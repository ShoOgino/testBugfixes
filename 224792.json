{"path":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a80ff037c976f7f62b76c2314397ef9957ff41e","date":1332907141,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15cacbf46c73bd5b0e47b57128be8852cb236160","date":1332942979,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d763f3dadb5ec17baac54cb33605188c9708e1c8","date":1332992301,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d8d10f2e06a107b21bd13856db864b3824143af","date":1335191859,"type":3,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase());\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( healthcheck != null && !new File(healthcheck).exists() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(healthcheck,true);\n        break;\n      case DISABLE:\n        handleEnable(healthcheck,false);\n        break;\n      case STATUS:\n        if( healthcheck == null){\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"healthcheck not configured\");\n          rsp.setException(e);\n        }\n        else {\n          if ( new File(healthcheck).exists() ){\n            rsp.add( \"status\",  \"enabled\");      \n          }\n          else {\n            rsp.add( \"status\",  \"disabled\");      \n          }\n        }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n    }\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aefa52d7f4630a453617748915d2b5afb1568be3","date":1335264439,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( healthcheck != null && !new File(healthcheck).exists() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(healthcheck,true);\n        break;\n      case DISABLE:\n        handleEnable(healthcheck,false);\n        break;\n      case STATUS:\n        if( healthcheck == null){\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"healthcheck not configured\");\n          rsp.setException(e);\n        }\n        else {\n          if ( new File(healthcheck).exists() ){\n            rsp.add( \"status\",  \"enabled\");      \n          }\n          else {\n            rsp.add( \"status\",  \"disabled\");      \n          }\n        }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase());\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( healthcheck != null && !new File(healthcheck).exists() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(healthcheck,true);\n        break;\n      case DISABLE:\n        handleEnable(healthcheck,false);\n        break;\n      case STATUS:\n        if( healthcheck == null){\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"healthcheck not configured\");\n          rsp.setException(e);\n        }\n        else {\n          if ( new File(healthcheck).exists() ){\n            rsp.add( \"status\",  \"enabled\");      \n          }\n          else {\n            rsp.add( \"status\",  \"disabled\");      \n          }\n        }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad826eef7abbe5ff5f62d508c87065b81010c4c6","date":1336074973,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( healthcheck != null && !new File(healthcheck).exists() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(healthcheck,true);\n        break;\n      case DISABLE:\n        handleEnable(healthcheck,false);\n        break;\n      case STATUS:\n        if( healthcheck == null){\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"healthcheck not configured\");\n          rsp.setException(e);\n        }\n        else {\n          if ( new File(healthcheck).exists() ){\n            rsp.add( \"status\",  \"enabled\");      \n          }\n          else {\n            rsp.add( \"status\",  \"disabled\");      \n          }\n        }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ecf64fd5d58505365336999bd012e122cd1af41","date":1337555402,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":["8ddf95246f079e162fbc4ef8f9d5cda419ff7eec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2a178a9ebfcc61e832755cd47b30712b308e91","date":1352137170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n          rsp.setException(e);\n          return;\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(DISTRIB);\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(DISTRIB, false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n          rsp.setException(e);\n          return;\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n          rsp.setException(e);\n          return;\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(DISTRIB);\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(DISTRIB, false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n          rsp.setException(e);\n          return;\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    \n    SolrParams params = req.getParams();\n    \n    // in this case, we want to default distrib to false so\n    // we only ping the single node\n    Boolean distrib = params.getBool(\"distrib\");\n    if (distrib == null)   {\n      ModifiableSolrParams mparams = new ModifiableSolrParams(params);\n      mparams.set(\"distrib\", false);\n      req.setParams(mparams);\n    }\n    \n    String actionParam = params.get(\"action\");\n    ACTIONS action = null;\n    if (actionParam == null){\n      action = ACTIONS.PING;\n    }\n    else {\n      try {\n        action = ACTIONS.valueOf(actionParam.toUpperCase(Locale.ROOT));\n      }\n      catch (IllegalArgumentException iae){\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n        \"Unknown action: \" + actionParam);\n      }\n    }\n    switch(action){\n      case PING:\n        if( isPingDisabled() ) {\n          SolrException e = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n                                  \"Service disabled\");\n          rsp.setException(e);\n          return;\n        }\n        handlePing(req, rsp);\n        break;\n      case ENABLE:\n        handleEnable(true);\n        break;\n      case DISABLE:\n        handleEnable(false);\n        break;\n      case STATUS:\n        if( healthcheck == null ){\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVICE_UNAVAILABLE, \n             \"healthcheck not configured\");\n          rsp.setException(e);\n        } else {\n          rsp.add( \"status\", isPingDisabled() ? \"disabled\" : \"enabled\" );      \n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a80ff037c976f7f62b76c2314397ef9957ff41e":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"8d8d10f2e06a107b21bd13856db864b3824143af":["d763f3dadb5ec17baac54cb33605188c9708e1c8"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5ecf64fd5d58505365336999bd012e122cd1af41":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["5ecf64fd5d58505365336999bd012e122cd1af41"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["fe2a178a9ebfcc61e832755cd47b30712b308e91"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5ecf64fd5d58505365336999bd012e122cd1af41","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"01624b85de12fb02335810bdf325124e59040772":["fe2a178a9ebfcc61e832755cd47b30712b308e91"],"46d8ada1fff8d18cb197c38c7983225162599948":["5ecf64fd5d58505365336999bd012e122cd1af41","2acf500f78aa12b92e371fd89c719291986b6b90"],"d763f3dadb5ec17baac54cb33605188c9708e1c8":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"aefa52d7f4630a453617748915d2b5afb1568be3":["8d8d10f2e06a107b21bd13856db864b3824143af"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["9a80ff037c976f7f62b76c2314397ef9957ff41e"],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["2acf500f78aa12b92e371fd89c719291986b6b90"],"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["aefa52d7f4630a453617748915d2b5afb1568be3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5ecf64fd5d58505365336999bd012e122cd1af41","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"ef0d8a69209261514c5739c770bba706c2308450":["ad826eef7abbe5ff5f62d508c87065b81010c4c6","5ecf64fd5d58505365336999bd012e122cd1af41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"9a80ff037c976f7f62b76c2314397ef9957ff41e":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"8d8d10f2e06a107b21bd13856db864b3824143af":["aefa52d7f4630a453617748915d2b5afb1568be3"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"5ecf64fd5d58505365336999bd012e122cd1af41":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","fe2a178a9ebfcc61e832755cd47b30712b308e91","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"d763f3dadb5ec17baac54cb33605188c9708e1c8":["8d8d10f2e06a107b21bd13856db864b3824143af"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["d763f3dadb5ec17baac54cb33605188c9708e1c8"],"aefa52d7f4630a453617748915d2b5afb1568be3":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["5ecf64fd5d58505365336999bd012e122cd1af41","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["9a80ff037c976f7f62b76c2314397ef9957ff41e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}