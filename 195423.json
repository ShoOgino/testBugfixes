{"path":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","commits":[{"id":"09ebb4b4370532662eb5f3238d02b002836b38b2","date":1331733267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testLengthPrefix() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final int blockBits = _TestUtil.nextInt(random, 2, 20);\n      final int blockSize = 1 << blockBits;\n      final PagedBytes p = new PagedBytes(blockBits);\n      final List<Integer> addresses = new ArrayList<Integer>();\n      final List<BytesRef> answers = new ArrayList<BytesRef>();\n      int totBytes = 0;\n      while(totBytes < 10000000 && answers.size() < 100000) {\n        final int len = random.nextInt(Math.min(blockSize-2, 32768));\n        final BytesRef b = new BytesRef();\n        b.bytes = new byte[len];\n        b.length = len;\n        b.offset = 0;\n        random.nextBytes(b.bytes);\n        answers.add(b);\n        addresses.add((int) p.copyUsingLengthPrefix(b));\n\n        totBytes += len;\n      }\n\n      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());\n\n      final BytesRef slice = new BytesRef();\n\n      for(int idx=0;idx<answers.size();idx++) {\n        reader.fillSliceWithPrefix(slice, addresses.get(idx));\n        assertEquals(answers.get(idx), slice);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","sourceNew":"  public void testLengthPrefix() throws Exception {\n    Random random = random();\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final int blockBits = _TestUtil.nextInt(random, 2, 20);\n      final int blockSize = 1 << blockBits;\n      final PagedBytes p = new PagedBytes(blockBits);\n      final List<Integer> addresses = new ArrayList<Integer>();\n      final List<BytesRef> answers = new ArrayList<BytesRef>();\n      int totBytes = 0;\n      while(totBytes < 10000000 && answers.size() < 100000) {\n        final int len = random.nextInt(Math.min(blockSize-2, 32768));\n        final BytesRef b = new BytesRef();\n        b.bytes = new byte[len];\n        b.length = len;\n        b.offset = 0;\n        random.nextBytes(b.bytes);\n        answers.add(b);\n        addresses.add((int) p.copyUsingLengthPrefix(b));\n\n        totBytes += len;\n      }\n\n      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());\n\n      final BytesRef slice = new BytesRef();\n\n      for(int idx=0;idx<answers.size();idx++) {\n        reader.fillSliceWithPrefix(slice, addresses.get(idx));\n        assertEquals(answers.get(idx), slice);\n      }\n    }\n  }\n\n","sourceOld":"  public void testLengthPrefix() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final int blockBits = _TestUtil.nextInt(random, 2, 20);\n      final int blockSize = 1 << blockBits;\n      final PagedBytes p = new PagedBytes(blockBits);\n      final List<Integer> addresses = new ArrayList<Integer>();\n      final List<BytesRef> answers = new ArrayList<BytesRef>();\n      int totBytes = 0;\n      while(totBytes < 10000000 && answers.size() < 100000) {\n        final int len = random.nextInt(Math.min(blockSize-2, 32768));\n        final BytesRef b = new BytesRef();\n        b.bytes = new byte[len];\n        b.length = len;\n        b.offset = 0;\n        random.nextBytes(b.bytes);\n        answers.add(b);\n        addresses.add((int) p.copyUsingLengthPrefix(b));\n\n        totBytes += len;\n      }\n\n      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());\n\n      final BytesRef slice = new BytesRef();\n\n      for(int idx=0;idx<answers.size();idx++) {\n        reader.fillSliceWithPrefix(slice, addresses.get(idx));\n        assertEquals(answers.get(idx), slice);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","sourceNew":null,"sourceOld":"  public void testLengthPrefix() throws Exception {\n    Random random = random();\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final int blockBits = _TestUtil.nextInt(random, 2, 20);\n      final int blockSize = 1 << blockBits;\n      final PagedBytes p = new PagedBytes(blockBits);\n      final List<Integer> addresses = new ArrayList<Integer>();\n      final List<BytesRef> answers = new ArrayList<BytesRef>();\n      int totBytes = 0;\n      while(totBytes < 10000000 && answers.size() < 100000) {\n        final int len = random.nextInt(Math.min(blockSize-2, 32768));\n        final BytesRef b = new BytesRef();\n        b.bytes = new byte[len];\n        b.length = len;\n        b.offset = 0;\n        random.nextBytes(b.bytes);\n        answers.add(b);\n        addresses.add((int) p.copyUsingLengthPrefix(b));\n\n        totBytes += len;\n      }\n\n      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());\n\n      final BytesRef slice = new BytesRef();\n\n      for(int idx=0;idx<answers.size();idx++) {\n        reader.fillSliceWithPrefix(slice, addresses.get(idx));\n        assertEquals(answers.get(idx), slice);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testLengthPrefix().mjava","sourceNew":null,"sourceOld":"  public void testLengthPrefix() throws Exception {\n    Random random = random();\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final int blockBits = _TestUtil.nextInt(random, 2, 20);\n      final int blockSize = 1 << blockBits;\n      final PagedBytes p = new PagedBytes(blockBits);\n      final List<Integer> addresses = new ArrayList<Integer>();\n      final List<BytesRef> answers = new ArrayList<BytesRef>();\n      int totBytes = 0;\n      while(totBytes < 10000000 && answers.size() < 100000) {\n        final int len = random.nextInt(Math.min(blockSize-2, 32768));\n        final BytesRef b = new BytesRef();\n        b.bytes = new byte[len];\n        b.length = len;\n        b.offset = 0;\n        random.nextBytes(b.bytes);\n        answers.add(b);\n        addresses.add((int) p.copyUsingLengthPrefix(b));\n\n        totBytes += len;\n      }\n\n      final PagedBytes.Reader reader = p.freeze(random.nextBoolean());\n\n      final BytesRef slice = new BytesRef();\n\n      for(int idx=0;idx<answers.size();idx++) {\n        reader.fillSliceWithPrefix(slice, addresses.get(idx));\n        assertEquals(answers.get(idx), slice);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fa968010b9c6598d02666b7b879c12e3cb0db4ee","d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}