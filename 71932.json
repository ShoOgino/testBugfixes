{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float maxScore() {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float maxScore() {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float maxScore() {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorable> getChildren() {\n                  return Collections.singleton(new ChildScorable(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0ec17eecd6c6f767b4d4d2cf85b8ddcbeb5d0d6","date":1553706563,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          if (scoreMode == ScoreMode.TOP_SCORES) {\n            return super.bulkScorer(context);\n          }\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final TwoPhaseIterator twoPhaseIterator = innerScorer.twoPhaseIterator();\n              if (twoPhaseIterator == null) {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, innerScorer.iterator());\n              } else {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, twoPhaseIterator);\n              }\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorable> getChildren() {\n                  return Collections.singleton(new ChildScorable(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          if (scoreMode.isExhaustive() == false) {\n            return super.bulkScorer(context);\n          }\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final TwoPhaseIterator twoPhaseIterator = innerScorer.twoPhaseIterator();\n              if (twoPhaseIterator == null) {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, innerScorer.iterator());\n              } else {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, twoPhaseIterator);\n              }\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          if (scoreMode == ScoreMode.TOP_SCORES) {\n            return super.bulkScorer(context);\n          }\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final TwoPhaseIterator twoPhaseIterator = innerScorer.twoPhaseIterator();\n              if (twoPhaseIterator == null) {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, innerScorer.iterator());\n              } else {\n                return new ConstantScoreScorer(innerWeight, score(), scoreMode, twoPhaseIterator);\n              }\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          return innerWeight.matches(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0ec17eecd6c6f767b4d4d2cf85b8ddcbeb5d0d6":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["523cc6563c99a55527ef7993efc5413c6648852d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["b0ec17eecd6c6f767b4d4d2cf85b8ddcbeb5d0d6"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["523cc6563c99a55527ef7993efc5413c6648852d","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["b0ec17eecd6c6f767b4d4d2cf85b8ddcbeb5d0d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"b0ec17eecd6c6f767b4d4d2cf85b8ddcbeb5d0d6":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}