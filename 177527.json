{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","commits":[{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // write the file again\n      try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","11c6df42fb3eba174c3ca0d9a5194eaecd893b77","d4a6f192ab2795740ebc5e2769b22b560b2f4057"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // write the file again\n      try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      String fileName;\n      while (true) {\n        fileName = TestUtil.randomSimpleString(random());\n        if (fileName.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(fileName);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      try {\n        fsDir.fileLength(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure rename fails:\n      try {\n        fsDir.renameFile(fileName, \"file2\");\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      // Make sure delete fails:\n      try {\n        fsDir.deleteFile(fileName);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      try {\n        fsDir.openInput(fileName, IOContext.DEFAULT);\n        fail(\"did not hit exception\");\n      } catch (NoSuchFileException nsfe) {\n        // expected\n      }\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"bugIntro":["d4a6f192ab2795740ebc5e2769b22b560b2f4057"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9873c86642e5c4fecb3e4e365155322ca547da7f","date":1456069232,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65fb6afbec59932f75dd371af329cb075d49844a","date":1456099903,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4a6f192ab2795740ebc5e2769b22b560b2f4057","date":1465637472,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":["05fe562aa248790944d43cdd478f512572835ba0","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c","9873c86642e5c4fecb3e4e365155322ca547da7f","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.rename(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.rename(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        String candidate = TestUtil.randomSimpleString(random());\n        if (candidate.length() == 0) {\n          continue;\n        }\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.renameFile(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n\n      if (random().nextBoolean()) {\n        try (IndexOutput out = fsDir.createOutput(fileName + \"z\", IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        // Make sure we can rename onto the deleted file:\n        fsDir.renameFile(fileName + \"z\", fileName);\n      } else {\n        // write the file again\n        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n      }\n      assertEquals(0, fsDir.fileLength(fileName));\n      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testPendingDeletions().mjava","sourceNew":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.getPendingDeletions().size() > 0) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.rename(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","sourceOld":"  // Make sure the FSDirectory impl properly \"emulates\" deletions on filesystems (Windows) with buggy deleteFile:\n  public void testPendingDeletions() throws IOException {\n    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {\n      assumeTrue(\"we can only install VirusCheckingFS on an FSDirectory\", dir instanceof FSDirectory);\n      FSDirectory fsDir = (FSDirectory) dir;\n\n      // Keep trying until virus checker refuses to delete:\n      final String fileName;\n      while (true) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String candidate = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {\n          out.getFilePointer(); // just fake access to prevent compiler warning\n        }\n        fsDir.deleteFile(candidate);\n        if (fsDir.checkPendingDeletions()) {\n          // good: virus checker struck and prevented deletion of fileName\n          fileName = candidate;\n          break;\n        }\n      }\n\n      // Make sure listAll does NOT include the file:\n      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));\n\n      // Make sure fileLength claims it's deleted:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.fileLength(fileName);\n      });\n\n      // Make sure rename fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.rename(fileName, \"file2\");\n      });\n\n      // Make sure delete fails:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.deleteFile(fileName);\n      });\n\n      // Make sure we cannot open it for reading:\n      expectThrows(NoSuchFileException.class, () -> {      \n        fsDir.openInput(fileName, IOContext.DEFAULT);\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"214256b5eeeaba88b8293b37d30460b462b19562":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["d4a6f192ab2795740ebc5e2769b22b560b2f4057"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["65fb6afbec59932f75dd371af329cb075d49844a","214256b5eeeaba88b8293b37d30460b462b19562"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65fb6afbec59932f75dd371af329cb075d49844a":["05fe562aa248790944d43cdd478f512572835ba0","9873c86642e5c4fecb3e4e365155322ca547da7f"],"d4a6f192ab2795740ebc5e2769b22b560b2f4057":["65fb6afbec59932f75dd371af329cb075d49844a"],"9873c86642e5c4fecb3e4e365155322ca547da7f":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["214256b5eeeaba88b8293b37d30460b462b19562"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"214256b5eeeaba88b8293b37d30460b462b19562":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c5e84aa7f651de6493590da495bcbe46d32cf038"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["65fb6afbec59932f75dd371af329cb075d49844a","9873c86642e5c4fecb3e4e365155322ca547da7f"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["214256b5eeeaba88b8293b37d30460b462b19562"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501","5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"65fb6afbec59932f75dd371af329cb075d49844a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d4a6f192ab2795740ebc5e2769b22b560b2f4057"],"d4a6f192ab2795740ebc5e2769b22b560b2f4057":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"9873c86642e5c4fecb3e4e365155322ca547da7f":["65fb6afbec59932f75dd371af329cb075d49844a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c5e84aa7f651de6493590da495bcbe46d32cf038":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}