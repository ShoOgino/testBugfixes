{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new ShingleFilterFactory */\n  public ShingleFilterFactory(Map<String, String> args) {\n    super(args);\n    maxShingleSize = getInt(args, \"maxShingleSize\", \n                            ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize\n                              + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(args, \"minShingleSize\",\n                            ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be no greater than maxShingleSize (\"\n                              + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(args, \"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = args.containsKey(\"tokenSeparator\")\n                     ? args.remove(\"tokenSeparator\")\n                     : ShingleFilter.TOKEN_SEPARATOR;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    maxShingleSize = getInt(\"maxShingleSize\", \n                            ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize\n                              + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(\"minShingleSize\",\n                            ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be no greater than maxShingleSize (\"\n                              + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(\"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(\"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = args.containsKey(\"tokenSeparator\")\n                     ? args.get(\"tokenSeparator\")\n                     : ShingleFilter.TOKEN_SEPARATOR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ShingleFilterFactory */\n  public ShingleFilterFactory(Map<String, String> args) {\n    super(args);\n    maxShingleSize = getInt(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n          (\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(args, \"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ShingleFilterFactory */\n  public ShingleFilterFactory(Map<String, String> args) {\n    super(args);\n    maxShingleSize = getInt(args, \"maxShingleSize\", \n                            ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize\n                              + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(args, \"minShingleSize\",\n                            ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize\n                              + \") - must be no greater than maxShingleSize (\"\n                              + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(args, \"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = args.containsKey(\"tokenSeparator\")\n                     ? args.remove(\"tokenSeparator\")\n                     : ShingleFilter.TOKEN_SEPARATOR;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6237bacfd44ad16661121d7d8a604a57f78978e9","date":1391038488,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory#ShingleFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ShingleFilterFactory */\n  public ShingleFilterFactory(Map<String, String> args) {\n    super(args);\n    maxShingleSize = getInt(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n          (\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(args, \"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = get(args, \"tokenSeparator\", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);\n    fillerToken = get(args, \"fillerToken\", ShingleFilter.DEFAULT_FILLER_TOKEN);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ShingleFilterFactory */\n  public ShingleFilterFactory(Map<String, String> args) {\n    super(args);\n    maxShingleSize = getInt(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");\n    }\n    minShingleSize = getInt(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n          (\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");\n    }\n    outputUnigrams = getBoolean(args, \"outputUnigrams\", true);\n    outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);\n    tokenSeparator = get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6237bacfd44ad16661121d7d8a604a57f78978e9"]},"commit2Childs":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["6237bacfd44ad16661121d7d8a604a57f78978e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}