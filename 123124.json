{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","date":1332297168,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":["81c86ba78280d33631b3536414395ad80a19a8af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws ParseException {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        \n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        \n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"3cdb67100dc016748799a77218aa409478372d79":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["3cdb67100dc016748799a77218aa409478372d79"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["c26f00b574427b55127e869b935845554afde1fa"],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}