{"path":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","commits":[{"id":"c451686dba22c9c0e2b950b3d4dc9c1cde081887","date":1199826919,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeVal(\"score\", doc.getFirstValue(\"score\"));\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606107a86b7a6f3cdb2b2bad2f796d3153e4ad17","date":1200430836,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeVal(\"score\", doc.getFirstValue(\"score\"));\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,SolrDocument,Set[String],boolean).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  final void writeDoc(String name, SolrDocument doc, Set<String> returnFields, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore && returnFields != null ) {\n      returnFields.add( \"score\" );\n    }\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // single valued... figure out if we should put <arr> tags around it anyway\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (version>=2100 && sf!=null && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          writeVal(fname, val);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;          \n        } else {\n          writeVal(fname, val);          \n        }\n      }\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["606107a86b7a6f3cdb2b2bad2f796d3153e4ad17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"606107a86b7a6f3cdb2b2bad2f796d3153e4ad17":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"606107a86b7a6f3cdb2b2bad2f796d3153e4ad17":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["606107a86b7a6f3cdb2b2bad2f796d3153e4ad17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}