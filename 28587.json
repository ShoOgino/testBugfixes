{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(entry, empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(entry, empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    for (Iterator<BytesRef> i = sorter.iterator(); i.hasNext(); count++) {\n      BytesRef entry = i.next();\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["7bf07f4ebadc7539de83a531e64678350d78ca26"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}