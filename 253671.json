{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity    \n  }\n\n","bugFix":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","e28b14e7783d24ca69089f13ddadadbd2afdcb29","7d6b8491b15b391062b53404b4af3c8f18924090"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,0, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = Math.max(0, vals[j]);\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["28288370235ed02234a64753cdbf0c6ec096304a"],"5eb2511ababf862ea11e10761c70ee560cd84510":["19275ba31e621f6da1b83bf13af75233876fd3d4","9d3d365762604952e436b51980101dfc84cc1b3e"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["5da0b42730b6b99b31389ef94cb97384e83b9ede","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9274621789ce990dbfef455dabdf026bb3184821":["e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"56572ec06f1407c066d6b7399413178b33176cd8":["9d3d365762604952e436b51980101dfc84cc1b3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"28288370235ed02234a64753cdbf0c6ec096304a":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["9d3d365762604952e436b51980101dfc84cc1b3e","9274621789ce990dbfef455dabdf026bb3184821"],"9d3d365762604952e436b51980101dfc84cc1b3e":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["9d3d365762604952e436b51980101dfc84cc1b3e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9d3d365762604952e436b51980101dfc84cc1b3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a71f63026529f3c1f03cfdd664910873ab2369ae","56572ec06f1407c066d6b7399413178b33176cd8","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["9274621789ce990dbfef455dabdf026bb3184821"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","56572ec06f1407c066d6b7399413178b33176cd8","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}