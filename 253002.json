{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf7efd82433f3f64684711c16edfd149db6af111":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}