{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1","date":1001444615,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce2d38fca9678b74e922c3d472944968909f7799","date":1013648326,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector, reader.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3","date":1095872580,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n          public final void collect(int doc, float score) {\n            if (bits.get(doc)) {                  // skip docs not in bits\n              results.collect(doc, score);\n            }\n          }\n        };\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n\t  public final void collect(int doc, float score) {\n\t    if (bits.get(doc)) {\t\t  // skip docs not in bits\n\t      results.collect(doc, score);\n\t    }\n\t  }\n\t};\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    search(query.weight(this), filter, results);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n          public final void collect(int doc, float score) {\n            if (bits.get(doc)) {                  // skip docs not in bits\n              results.collect(doc, score);\n            }\n          }\n        };\n    }\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public void search(Query query, Filter filter,\n                     final HitCollector results) throws IOException {\n    search(query.weight(this), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["9c7454619ea6a0710272c1dd947345cee64489f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["ce2d38fca9678b74e922c3d472944968909f7799"],"ce2d38fca9678b74e922c3d472944968909f7799":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["15c469602973ef1a33c9a07367a380d278ffab20"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"15c469602973ef1a33c9a07367a380d278ffab20":["27274410c91546fcfc28e692abd2dd77ca99be4b"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9c7454619ea6a0710272c1dd947345cee64489f6":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"ce2d38fca9678b74e922c3d472944968909f7799":["9c7454619ea6a0710272c1dd947345cee64489f6"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["ce2d38fca9678b74e922c3d472944968909f7799"],"15c469602973ef1a33c9a07367a380d278ffab20":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}