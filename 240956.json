{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","commits":[{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","pathOld":"/dev/null","sourceNew":"    /** Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<AtomicReader>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<AtomicReader>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","sourceOld":"    /** Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<AtomicReader>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<AtomicReader>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<LeafReader> readers = new ArrayList<>(this.readers.size());\n      for (LeafReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<AtomicReader> readers = new ArrayList<>(this.readers.size());\n      for (AtomicReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<LeafReader> readers = new ArrayList<>(this.readers.size());\n      for (LeafReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    /** Expert: Get the list of readers to merge. Note that this list does not\n     *  necessarily match the list of segments to merge and should only be used\n     *  to feed SegmentMerger to initialize a merge. When a {@link OneMerge}\n     *  reorders doc IDs, it must override {@link #getDocMap} too so that\n     *  deletes that happened during the merge can be applied to the newly\n     *  merged segment. */\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (readers == null) {\n        throw new IllegalStateException(\"IndexWriter has not initialized readers from the segment infos yet\");\n      }\n      final List<CodecReader> readers = new ArrayList<>(this.readers.size());\n      for (SegmentReader reader : this.readers) {\n        if (reader.numDocs() > 0) {\n          readers.add(reader);\n        }\n      }\n      return Collections.unmodifiableList(readers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["505bff044e47a553f461b6f4484d1d08faf4ac85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["505bff044e47a553f461b6f4484d1d08faf4ac85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["505bff044e47a553f461b6f4484d1d08faf4ac85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["505bff044e47a553f461b6f4484d1d08faf4ac85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}