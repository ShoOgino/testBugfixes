{"path":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n    String idField = uniqueKeyField.getName();\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    Filter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, idField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efbabb5fe919f9ebda7f487692e57506bc3246f8","date":1402102128,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    Filter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n    String idField = uniqueKeyField.getName();\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    Filter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, idField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitDocIdSetFilter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    Filter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitDocIdSetFilter parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddef54907d52d0079217460aacd73c5d3bb1d39","date":1527887541,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      //TODO shouldn't we try to use the Solr filter cache, and then ideally implement\n      //  BitSetProducer over that?\n      // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);\n      // then return BitSetProducer with custom BitSet impl accessing the docSet\n      parentsFilter = new QueryBitSetProducer(parentFilterQuery);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      //TODO shouldn't we try to use the Solr filter cache, and then ideally implement\n      //  BitSetProducer over that?\n      // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);\n      // then return BitSetProducer with custom BitSet impl accessing the docSet\n      parentsFilter = new QueryBitSetProducer(parentFilterQuery);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if (uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n    // Do we build a hierarchy or flat list of child docs (attached anonymously)?\n    boolean buildHierarchy = req.getSchema().hasExplicitField(NEST_PATH_FIELD_NAME);\n\n    String parentFilterStr = params.get( \"parentFilter\" );\n    BitSetProducer parentsFilter;\n    // TODO reuse org.apache.solr.search.join.BlockJoinParentQParser.getCachedFilter (uses a cache)\n    // TODO shouldn't we try to use the Solr filter cache, and then ideally implement\n    //  BitSetProducer over that?\n    // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);\n    // then return BitSetProducer with custom BitSet impl accessing the docSet\n    if (parentFilterStr == null) {\n      if (!buildHierarchy) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\");\n      }\n      parentsFilter = new QueryBitSetProducer(rootFilter);\n    } else {\n      if(buildHierarchy) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Parent filter should not be sent when the schema is nested\");\n      }\n      parentsFilter = new QueryBitSetProducer(parseQuery(parentFilterStr, req,  \"parentFilter\"));\n    }\n\n    String childFilterStr = params.get( \"childFilter\" );\n    DocSet childDocSet;\n    if (childFilterStr == null) {\n      childDocSet = null;\n    } else {\n      if (buildHierarchy) {\n        childFilterStr = processPathHierarchyQueryString(childFilterStr);\n      }\n      Query childFilter = parseQuery(childFilterStr, req, \"childFilter\");\n      try {\n        childDocSet = req.getSearcher().getDocSet(childFilter);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    int limit = params.getInt( \"limit\", 10 );\n\n    return new ChildDocTransformer(field, parentsFilter, childDocSet, buildHierarchy, limit);\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if(uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n\n    String parentFilter = params.get( \"parentFilter\" );\n    if( parentFilter == null ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\" );\n    }\n\n    String childFilter = params.get( \"childFilter\" );\n    int limit = params.getInt( \"limit\", 10 );\n\n    BitSetProducer parentsFilter = null;\n    try {\n      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();\n      //TODO shouldn't we try to use the Solr filter cache, and then ideally implement\n      //  BitSetProducer over that?\n      // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);\n      // then return BitSetProducer with custom BitSet impl accessing the docSet\n      parentsFilter = new QueryBitSetProducer(parentFilterQuery);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct parent filter query\" );\n    }\n\n    Query childFilterQuery = null;\n    if(childFilter != null) {\n      try {\n        childFilterQuery = QParser.getParser( childFilter, req).getQuery();\n      } catch (SyntaxError syntaxError) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Failed to create correct child filter query\" );\n      }\n    }\n\n    return new ChildDocTransformer( field, parentsFilter, uniqueKeyField, req.getSchema(), childFilterQuery, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"373ea6b2f051d2a56e8e78a5da11de7aa52ed399","date":1536159014,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    if(recursionCheckThreadLocal.get()) {\n      // this is a recursive call by SolrReturnFields, see ChildDocTransformerFactory#createChildDocTransformer\n      return new DocTransformer.NoopFieldTransformer();\n    } else {\n      try {\n        // transformer is yet to be initialized in this thread, create it\n        recursionCheckThreadLocal.set(true);\n        return createChildDocTransformer(field, params, req);\n      } finally {\n        recursionCheckThreadLocal.set(false);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {\n    SchemaField uniqueKeyField = req.getSchema().getUniqueKeyField();\n    if (uniqueKeyField == null) {\n      throw new SolrException( ErrorCode.BAD_REQUEST,\n          \" ChildDocTransformer requires the schema to have a uniqueKeyField.\" );\n    }\n    // Do we build a hierarchy or flat list of child docs (attached anonymously)?\n    boolean buildHierarchy = req.getSchema().hasExplicitField(NEST_PATH_FIELD_NAME);\n\n    String parentFilterStr = params.get( \"parentFilter\" );\n    BitSetProducer parentsFilter;\n    // TODO reuse org.apache.solr.search.join.BlockJoinParentQParser.getCachedFilter (uses a cache)\n    // TODO shouldn't we try to use the Solr filter cache, and then ideally implement\n    //  BitSetProducer over that?\n    // DocSet parentDocSet = req.getSearcher().getDocSet(parentFilterQuery);\n    // then return BitSetProducer with custom BitSet impl accessing the docSet\n    if (parentFilterStr == null) {\n      if (!buildHierarchy) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Parent filter should be sent as parentFilter=filterCondition\");\n      }\n      parentsFilter = new QueryBitSetProducer(rootFilter);\n    } else {\n      if(buildHierarchy) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Parent filter should not be sent when the schema is nested\");\n      }\n      parentsFilter = new QueryBitSetProducer(parseQuery(parentFilterStr, req,  \"parentFilter\"));\n    }\n\n    String childFilterStr = params.get( \"childFilter\" );\n    DocSet childDocSet;\n    if (childFilterStr == null) {\n      childDocSet = null;\n    } else {\n      if (buildHierarchy) {\n        childFilterStr = processPathHierarchyQueryString(childFilterStr);\n      }\n      Query childFilter = parseQuery(childFilterStr, req, \"childFilter\");\n      try {\n        childDocSet = req.getSearcher().getDocSet(childFilter);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    int limit = params.getInt( \"limit\", 10 );\n\n    return new ChildDocTransformer(field, parentsFilter, childDocSet, buildHierarchy, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["efbabb5fe919f9ebda7f487692e57506bc3246f8"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["4b3915945926c0bf7def01b0c504977709d3aed3"],"4b3915945926c0bf7def01b0c504977709d3aed3":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4b3915945926c0bf7def01b0c504977709d3aed3","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4b3915945926c0bf7def01b0c504977709d3aed3","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","4ddef54907d52d0079217460aacd73c5d3bb1d39"],"efbabb5fe919f9ebda7f487692e57506bc3246f8":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["4ddef54907d52d0079217460aacd73c5d3bb1d39"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["4b3915945926c0bf7def01b0c504977709d3aed3","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"]},"commit2Childs":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["4b3915945926c0bf7def01b0c504977709d3aed3"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["efbabb5fe919f9ebda7f487692e57506bc3246f8"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4b3915945926c0bf7def01b0c504977709d3aed3":["cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4ddef54907d52d0079217460aacd73c5d3bb1d39","b70042a8a492f7054d480ccdd2be9796510d4327","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["b70042a8a492f7054d480ccdd2be9796510d4327","44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"efbabb5fe919f9ebda7f487692e57506bc3246f8":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b70042a8a492f7054d480ccdd2be9796510d4327","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}