{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","commits":[{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n    \n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d7af7923eb20ee09475be28bf8053f8af5be53","date":1254575831,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n    \n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["360d15dc189fb48153cb62234f7d20819e4e292e"],"360d15dc189fb48153cb62234f7d20819e4e292e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["360d15dc189fb48153cb62234f7d20819e4e292e"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"360d15dc189fb48153cb62234f7d20819e4e292e":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}