{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene70DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.maxDoc();\n    ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n\n    int version = -1;\n\n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkIndexHeader(in, metaCodec,\n                                        Lucene70DocValuesFormat.VERSION_START,\n                                        Lucene70DocValuesFormat.VERSION_CURRENT,\n                                        state.segmentInfo.getId(),\n                                        state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkIndexHeader(data, dataCodec,\n                                                 Lucene70DocValuesFormat.VERSION_START,\n                                                 Lucene70DocValuesFormat.VERSION_CURRENT,\n                                                 state.segmentInfo.getId(),\n                                                 state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene70DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.maxDoc();\n    ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n\n    int version = -1;\n\n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkIndexHeader(in, metaCodec,\n                                        Lucene70DocValuesFormat.VERSION_START,\n                                        Lucene70DocValuesFormat.VERSION_CURRENT,\n                                        state.segmentInfo.getId(),\n                                        state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkIndexHeader(data, dataCodec,\n                                                 Lucene70DocValuesFormat.VERSION_START,\n                                                 Lucene70DocValuesFormat.VERSION_CURRENT,\n                                                 state.segmentInfo.getId(),\n                                                 state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene70DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.maxDoc();\n    ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n\n    int version = -1;\n\n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkIndexHeader(in, metaCodec,\n                                        Lucene70DocValuesFormat.VERSION_START,\n                                        Lucene70DocValuesFormat.VERSION_CURRENT,\n                                        state.segmentInfo.getId(),\n                                        state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkIndexHeader(data, dataCodec,\n                                                 Lucene70DocValuesFormat.VERSION_START,\n                                                 Lucene70DocValuesFormat.VERSION_CURRENT,\n                                                 state.segmentInfo.getId(),\n                                                 state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene70DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.maxDoc();\n    ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n\n    int version = -1;\n\n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkIndexHeader(in, metaCodec,\n                                        Lucene70DocValuesFormat.VERSION_START,\n                                        Lucene70DocValuesFormat.VERSION_CURRENT,\n                                        state.segmentInfo.getId(),\n                                        state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkIndexHeader(data, dataCodec,\n                                                 Lucene70DocValuesFormat.VERSION_START,\n                                                 Lucene70DocValuesFormat.VERSION_CURRENT,\n                                                 state.segmentInfo.getId(),\n                                                 state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#Lucene70DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  /** expert: instantiates a new reader */\n  Lucene70DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.maxDoc();\n    ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n\n    int version = -1;\n\n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkIndexHeader(in, metaCodec,\n                                        Lucene70DocValuesFormat.VERSION_START,\n                                        Lucene70DocValuesFormat.VERSION_CURRENT,\n                                        state.segmentInfo.getId(),\n                                        state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkIndexHeader(data, dataCodec,\n                                                 Lucene70DocValuesFormat.VERSION_START,\n                                                 Lucene70DocValuesFormat.VERSION_CURRENT,\n                                                 state.segmentInfo.getId(),\n                                                 state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}