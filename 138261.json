{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","sourceNew":"  @Test\n  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","sourceNew":"  public void testSpanNearExact() throws Exception {\n    SpanQuery query = spanNearOrderedQuery(\"field\", 0, \"seventy\", \"seven\");\n    \n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","sourceNew":"  public void testSpanNearExact() throws Exception {\n    SpanQuery query = spanNearOrderedQuery(\"field\", 0, \"seventy\", \"seven\");\n    \n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue().doubleValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue().doubleValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNearExact() throws Exception {\n    SpanQuery query = spanNearOrderedQuery(\"field\", 0, \"seventy\", \"seven\");\n    \n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977, 1077, 1177, 1277, 1377, 1477, 1577, 1677, 1777, 1877, 1977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}