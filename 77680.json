{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","commits":[{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(FieldInfo,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(FieldInfo fi, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e93b477a465bb7b012eb16214d6fe0214003e3ab","date":1359058944,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      checkBounds(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      checkBounds(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit what else to check ...\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      checkBounds(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      checkBounds(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n      if (docsWithField.get(i) == false && scratch.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + scratch + \" for doc: \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n      if (docsWithField.get(i) == false && scratch.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + scratch + \" for doc: \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(String,AtomicReader,BinaryDocValues).mjava","sourceNew":null,"sourceOld":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["caa40272511a69bd4ad04b8242ae420932f5799b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59d00acb12c9809438e21de7c24f016356973d46"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["50599bdf4e0c26952f76b740a4280d058cab3539"],"50599bdf4e0c26952f76b740a4280d058cab3539":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"caa40272511a69bd4ad04b8242ae420932f5799b":["e93b477a465bb7b012eb16214d6fe0214003e3ab"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"50599bdf4e0c26952f76b740a4280d058cab3539":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"caa40272511a69bd4ad04b8242ae420932f5799b":["59d00acb12c9809438e21de7c24f016356973d46"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","50599bdf4e0c26952f76b740a4280d058cab3539"],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["caa40272511a69bd4ad04b8242ae420932f5799b"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["e93b477a465bb7b012eb16214d6fe0214003e3ab"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}