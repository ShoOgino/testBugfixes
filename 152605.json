{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","commits":[{"id":"e229015cfbee24d06bca8b50a41ebe581ccf2252","date":1479460029,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiTermAnalysis() throws IOException {\n    TokenFilterFactory factory = new ASCIIFoldingFilterFactory(Collections.emptyMap());\n    TokenStream stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = new ASCIIFoldingFilterFactory(new HashMap<>(Collections.singletonMap(\"preserveOriginal\", \"true\")));\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\", \"Été\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fd6b5fef35d64e31781212a2aaeb32ef541acc8","date":1479481182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiTermAnalysis() throws IOException {\n    TokenFilterFactory factory = new ASCIIFoldingFilterFactory(Collections.emptyMap());\n    TokenStream stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = new ASCIIFoldingFilterFactory(new HashMap<>(Collections.singletonMap(\"preserveOriginal\", \"true\")));\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\", \"Été\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiTermAnalysis() throws IOException {\n    TokenFilterFactory factory = new ASCIIFoldingFilterFactory(Collections.emptyMap());\n    TokenStream stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = new ASCIIFoldingFilterFactory(new HashMap<>(Collections.singletonMap(\"preserveOriginal\", \"true\")));\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\", \"Été\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e322d5186d76764c8638aa79f72fd42a5aed70ef","date":1542622177,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestAsciiFoldingFilterFactory#testMultiTermAnalysis().mjava","sourceNew":"  public void testMultiTermAnalysis() throws IOException {\n    TokenFilterFactory factory = new ASCIIFoldingFilterFactory(Collections.emptyMap());\n    TokenStream stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.normalize(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = new ASCIIFoldingFilterFactory(new HashMap<>(Collections.singletonMap(\"preserveOriginal\", \"true\")));\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\", \"Été\" });\n\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.normalize(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n  }\n\n","sourceOld":"  public void testMultiTermAnalysis() throws IOException {\n    TokenFilterFactory factory = new ASCIIFoldingFilterFactory(Collections.emptyMap());\n    TokenStream stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n\n    factory = new ASCIIFoldingFilterFactory(new HashMap<>(Collections.singletonMap(\"preserveOriginal\", \"true\")));\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\", \"Été\" });\n\n    factory = (TokenFilterFactory) ((MultiTermAwareComponent) factory).getMultiTermComponent();\n    stream = new CannedTokenStream(new Token(\"Été\", 0, 3));\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Ete\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["0fd6b5fef35d64e31781212a2aaeb32ef541acc8"],"e229015cfbee24d06bca8b50a41ebe581ccf2252":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fd6b5fef35d64e31781212a2aaeb32ef541acc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e229015cfbee24d06bca8b50a41ebe581ccf2252"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0fd6b5fef35d64e31781212a2aaeb32ef541acc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e322d5186d76764c8638aa79f72fd42a5aed70ef"]},"commit2Childs":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e229015cfbee24d06bca8b50a41ebe581ccf2252":["0fd6b5fef35d64e31781212a2aaeb32ef541acc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e229015cfbee24d06bca8b50a41ebe581ccf2252","0fd6b5fef35d64e31781212a2aaeb32ef541acc8","2e859e664a65796dadf8aaf65db6f66f3a885368"],"0fd6b5fef35d64e31781212a2aaeb32ef541acc8":["e322d5186d76764c8638aa79f72fd42a5aed70ef","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}