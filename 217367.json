{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"extraction/solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}