{"path":"backwards/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.SCORE, reversed)\n      );\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.SCORE, reversed)\n      );\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.SCORE, reversed)\n      );\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}