{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","commits":[{"id":"c3e328a6f2b163170d23e06008798fb82c27af8b","date":1206825093,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken() throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token lastToken = input.next();\n      if (lastToken != null) {\n        for (int i = 1; i < lastToken.getPositionIncrement(); i++) {\n          tokenBuf.add(new Token(FILLER_TOKEN, lastToken.startOffset(),\n                                 lastToken.startOffset()));\n        }\n        tokenBuf.add(lastToken);\n        return getNextToken();\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","sourceNew":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken(final Token reusableToken) throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token nextToken = input.next(reusableToken);\n      if (nextToken != null) {\n        for (int i = 1; i < nextToken.getPositionIncrement(); i++) {\n          Token fillerToken = (Token) nextToken.clone();\n          // A filler token occupies no space\n          fillerToken.setEndOffset(fillerToken.startOffset());\n          fillerToken.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);\n          tokenBuf.add(fillerToken);\n        }\n        tokenBuf.add(nextToken.clone());\n        return getNextToken(nextToken);\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken() throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token lastToken = input.next();\n      if (lastToken != null) {\n        for (int i = 1; i < lastToken.getPositionIncrement(); i++) {\n          tokenBuf.add(new Token(FILLER_TOKEN, lastToken.startOffset(),\n                                 lastToken.startOffset()));\n        }\n        tokenBuf.add(lastToken);\n        return getNextToken();\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["c3e328a6f2b163170d23e06008798fb82c27af8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"c3e328a6f2b163170d23e06008798fb82c27af8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3e328a6f2b163170d23e06008798fb82c27af8b"],"c3e328a6f2b163170d23e06008798fb82c27af8b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}