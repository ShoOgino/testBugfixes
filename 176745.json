{"path":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer());\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a4d59223802237d352245759cf541e315aab20a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["3a4d59223802237d352245759cf541e315aab20a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3a4d59223802237d352245759cf541e315aab20a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a4d59223802237d352245759cf541e315aab20a":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","3a4d59223802237d352245759cf541e315aab20a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["3a4d59223802237d352245759cf541e315aab20a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a4d59223802237d352245759cf541e315aab20a":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}