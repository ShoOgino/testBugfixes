{"path":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // serialized PHP strings don't need to be escaped at all, however the \n    // string size reported needs be the number of bytes rather than chars.\n    int nBytes;\n    if (CESU8) {\n      nBytes = 0;\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if (ch<='\\u007f') {\n          nBytes += 1;\n        } else if (ch<='\\u07ff') {\n          nBytes += 2;\n        } else {\n          nBytes += 3;\n        }\n      }\n    } else {\n      UnicodeUtil.UTF16toUTF8(val, 0, val.length(), utf8);\n      nBytes = utf8.length;\n    }\n\n    writer.write(\"s:\");\n    writer.write(Integer.toString(nBytes));\n    writer.write(\":\\\"\");\n    writer.write(val);\n    writer.write(\"\\\";\");\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // serialized PHP strings don't need to be escaped at all, however the \n    // string size reported needs be the number of bytes rather than chars.\n    int nBytes;\n    if (CESU8) {\n      nBytes = 0;\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if (ch<='\\u007f') {\n          nBytes += 1;\n        } else if (ch<='\\u07ff') {\n          nBytes += 2;\n        } else {\n          nBytes += 3;\n        }\n      }\n    } else {\n      UnicodeUtil.UTF16toUTF8(val, 0, val.length(), utf8);\n      nBytes = utf8.length;\n    }\n\n    writer.write(\"s:\");\n    writer.write(Integer.toString(nBytes));\n    writer.write(\":\\\"\");\n    writer.write(val);\n    writer.write(\"\\\";\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // serialized PHP strings don't need to be escaped at all, however the \n    // string size reported needs be the number of bytes rather than chars.\n    int nBytes;\n    if (CESU8) {\n      nBytes = 0;\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if (ch<='\\u007f') {\n          nBytes += 1;\n        } else if (ch<='\\u07ff') {\n          nBytes += 2;\n        } else {\n          nBytes += 3;\n        }\n      }\n    } else {\n      UnicodeUtil.UTF16toUTF8(val, 0, val.length(), utf8);\n      nBytes = utf8.length;\n    }\n\n    writer.write(\"s:\");\n    writer.write(Integer.toString(nBytes));\n    writer.write(\":\\\"\");\n    writer.write(val);\n    writer.write(\"\\\";\");\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // serialized PHP strings don't need to be escaped at all, however the \n    // string size reported needs be the number of bytes rather than chars.\n    int nBytes;\n    if (CESU8) {\n      nBytes = 0;\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if (ch<='\\u007f') {\n          nBytes += 1;\n        } else if (ch<='\\u07ff') {\n          nBytes += 2;\n        } else {\n          nBytes += 3;\n        }\n      }\n    } else {\n      UnicodeUtil.UTF16toUTF8(val, 0, val.length(), utf8);\n      nBytes = utf8.length;\n    }\n\n    writer.write(\"s:\");\n    writer.write(Integer.toString(nBytes));\n    writer.write(\":\\\"\");\n    writer.write(val);\n    writer.write(\"\\\";\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}