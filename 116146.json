{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"/dev/null","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"/dev/null","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"/dev/null","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testReaderParent().mjava","sourceNew":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Tests for TaxonomyReader's getParent() method.\n    We check it by comparing its results to those we could have gotten by\n    looking at the category string paths (where the parentage is obvious).\n    Note that after testReaderBasic(), we already know we can trust the\n    ordinal <=> category conversions.\n    \n    Note: At the moment, the parent methods in the reader are deprecated,\n    but this does not mean they should not be tested! Until they are\n    removed (*if* they are removed), these tests should remain to see\n    that they still work correctly.\n   */\n\n  @Test\n  public void testReaderParent() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal=1; ordinal<tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tr.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent==null) {\n        fail(\"Parent of \"+ordinal+\" is \"+parentOrdinal+\n        \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the strings\n      if (!new CategoryPath(me, me.length()-1).equals(parent)) {\n        fail(\"Got parent \"+parentOrdinal+\" for ordinal \"+ordinal+\n            \" but categories are \"+showcat(parent)+\" and \"+showcat(me)+\n            \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tr.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tr.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tr.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"+parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}