{"path":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = min.getAddress();\n    InetAddress max = nextInetaddress();\n    byte[] bMax = max.getAddress();\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4","date":1491408615,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","sourceNew":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","sourceOld":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = min.getAddress();\n    InetAddress max = nextInetaddress();\n    byte[] bMax = max.getAddress();\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","sourceNew":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","sourceOld":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = min.getAddress();\n    InetAddress max = nextInetaddress();\n    byte[] bMax = max.getAddress();\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","sourceNew":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (FutureArrays.compareUnsigned(bMin, 0, bMin.length, bMax, 0, bMin.length) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","sourceOld":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (StringHelper.compare(bMin.length, bMin, 0, bMax, 0) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextRange(int).mjava","sourceNew":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (Arrays.compareUnsigned(bMin, 0, bMin.length, bMax, 0, bMin.length) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","sourceOld":"  @Override\n  protected Range nextRange(int dimensions) throws Exception {\n    InetAddress min = nextInetaddress();\n    byte[] bMin = InetAddressPoint.encode(min);\n    InetAddress max = nextInetaddress();\n    byte[] bMax = InetAddressPoint.encode(max);\n    if (FutureArrays.compareUnsigned(bMin, 0, bMin.length, bMax, 0, bMin.length) > 0) {\n      return new IpRange(max, min);\n    }\n    return new IpRange(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}