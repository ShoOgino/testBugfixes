{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13406cad512adb18f0b9447f1f35385a56a7bd88","date":1445252017,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 41.802513122558594f, 34.13160705566406f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 34.13160705566406f, 20.901256561279297f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 38.3189697265625f, 34.13160705566406f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });\n    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });\n    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });\n\n  }\n\n","bugFix":["2e8525cf39738b3113cc2ef20025af7208403718"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 20.901256561279297f, 17.06580352783203f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 10.450628280639648f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.15948486328125f, 17.06580352783203f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 41.802513122558594f, 34.13160705566406f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 34.13160705566406f, 20.901256561279297f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 38.3189697265625f, 34.13160705566406f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 20.901256561279297f, 17.06580352783203f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 10.450628280639648f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.15948486328125f, 17.06580352783203f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 41.802513122558594f, 34.13160705566406f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 34.13160705566406f, 20.901256561279297f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 38.3189697265625f, 34.13160705566406f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#testNestedNearQuery().mjava","sourceNew":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new ClassicSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 20.901256561279297f, 17.06580352783203f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 10.450628280639648f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.15948486328125f, 17.06580352783203f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedNearQuery() throws Exception {\n\n    // (one OR hundred) NEAR (twenty two) ~ 1\n    //  2    4        4    4\n    // one hundred twenty two\n    // two hundred twenty two\n\n    SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{\n        new SpanOrQuery(new SpanTermQuery(new Term(\"field\", \"one\")), new SpanTermQuery(new Term(\"field\", \"hundred\"))),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"field\", \"twenty\")),\n            new SpanTermQuery(new Term(\"field\", \"two\"))\n        }, 0, true)\n    }, 1, true);\n\n    // check includeSpanScore makes a difference here\n    searcher.setSimilarity(new MultiplyingSimilarity());\n    try {\n      checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 20.901256561279297f, 17.06580352783203f });\n      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 10.450628280639648f });\n      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.15948486328125f, 17.06580352783203f });\n      checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});\n      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});\n      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});\n    }\n    finally {\n      searcher.setSimilarity(similarity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["615370d2b876c3435773b5174df2e2242ad7981a"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["13406cad512adb18f0b9447f1f35385a56a7bd88","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13406cad512adb18f0b9447f1f35385a56a7bd88":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["1abe64b887edbb37f6261531cf8a62d88d63fdcb","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"13406cad512adb18f0b9447f1f35385a56a7bd88":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}