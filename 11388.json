{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#_read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#_read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#_read().mjava","sourceNew":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n\n","sourceOld":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#_read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#_read().mjava","sourceNew":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Tuple tuple = Tuple.EOF();\n      if(trace) {\n        tuple.put(\"_COLLECTION_\", this.collection);\n      }\n      return tuple;\n    }\n  }\n\n","sourceOld":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}