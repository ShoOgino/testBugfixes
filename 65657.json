{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"b9fc748b8fc4097ccc222bdf2948cc2d20770c54","date":1264591145,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(source);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new KeywordMarkerTokenFilter(result, excltable);\n    result = new DutchStemFilter(result, stemdict);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(source);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new KeywordMarkerTokenFilter(result, excltable);\n    result = new DutchStemFilter(result, stemdict);\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c2877c077c0dc229ee9871dc196b2a62442df599"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["c2877c077c0dc229ee9871dc196b2a62442df599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}