{"path":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","commits":[{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,float,boolean).mjava","sourceNew":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val,\n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      doc.add((Field)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add((Field) f);\n          }\n        } else {\n          doc.add((Field) f);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param boost Boost value for the field\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val, float boost, \n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      // set boost to the calculated compound boost\n      ((Field)val).setBoost(boost);\n      doc.add((Field)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val, boost)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add((Field) f);\n          }\n        } else {\n          doc.add((Field) f);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","sourceNew":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val,\n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      doc.add((IndexableField)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add(f);\n          }\n        } else {\n          doc.add(f);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val,\n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      doc.add((Field)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add((Field) f);\n          }\n        } else {\n          doc.add((Field) f);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(Document,SchemaField,Object,boolean).mjava","sourceNew":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val,\n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      doc.add((IndexableField)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add(f);\n          }\n        } else {\n          doc.add(f);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a field value to a given document.\n   * @param doc Document that the field needs to be added to\n   * @param field The schema field object for the field\n   * @param val The value for the field to be added\n   * @param forInPlaceUpdate Whether the field is to be added for in-place update. If true,\n   *        only numeric docValues based fields are added to the document. This can be true\n   *        when constructing a Lucene document for writing an in-place update, and we don't need\n   *        presence of non-updatable fields (non NDV) in such a document.\n   */\n  private static void addField(Document doc, SchemaField field, Object val,\n      boolean forInPlaceUpdate) {\n    if (val instanceof IndexableField) {\n      if (forInPlaceUpdate) {\n        assert val instanceof NumericDocValuesField: \"Expected in-place update to be done on\"\n            + \" NDV fields only.\";\n      }\n      doc.add((Field)val);\n      return;\n    }\n    for (IndexableField f : field.getType().createFields(field, val)) {\n      if (f != null) { // null fields are not added\n        // HACK: workaround for SOLR-9809\n        // even though at this point in the code we know the field is single valued and DV only\n        // TrieField.createFields() may still return (usless) IndexableField instances that are not\n        // NumericDocValuesField instances.\n        //\n        // once SOLR-9809 is resolved, we should be able to replace this conditional with...\n        //    assert f instanceof NumericDocValuesField\n        if (forInPlaceUpdate) {\n          if (f instanceof NumericDocValuesField) {\n            doc.add((Field) f);\n          }\n        } else {\n          doc.add((Field) f);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"12f7f335611574989edc8f87d25d91e89aa385b6":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12f7f335611574989edc8f87d25d91e89aa385b6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd9883560fd89e6448b2b447302fe543040cd4f"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"12f7f335611574989edc8f87d25d91e89aa385b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7b4eb0a25318cc756077fbde9bd3052690aed03d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}