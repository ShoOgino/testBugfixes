{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addLine(BytesRef,BlockTermState,IndexDictionary.Builder).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addLine(BytesRef,BlockTermState,IndexDictionary.Builder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a new {@link BlockLine} term for the current field.\n   * <p>\n   * This method determines whether the new term is part of the current block,\n   * or if it is part of the next block. In the latter case, a new block is started\n   * (including one or more of the lastly added lines), the current block is\n   * written to the block file, and the current block key is added to the\n   * {@link IndexDictionary.Builder}.\n   *\n   * @param term              The block line term. The {@link BytesRef} instance is used directly,\n   *                          the caller is responsible to make a deep copy if needed. This is required\n   *                          because we keep a list of block lines until we decide to write the\n   *                          current block, and each line must have a different term instance.\n   * @param blockTermState    Block line details.\n   * @param dictionaryBuilder to which the block keys are added.\n   */\n  protected void addLine(BytesRef term, BlockTermState blockTermState, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n    assert term != null;\n    assert blockTermState != null;\n    int mdpLength = TermBytes.computeMdpLength(lastTerm, term);\n    blockLines.add(new BlockLine(new TermBytes(mdpLength, term), blockTermState));\n    lastTerm = term;\n    if (blockLines.size() >= targetNumBlockLines + deltaNumLines) {\n      splitAndWriteBlock(dictionaryBuilder);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}