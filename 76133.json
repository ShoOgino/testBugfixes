{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","commits":[{"id":"aa3636f020dd2f593d4df8cf2a55798e984ae749","date":1483541265,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String prefix = req.getParams().get(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefix != null) {\n      mustMatchFilter = new SolrMetricManager.PrefixFilter(prefix.trim());\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String prefix = req.getParams().get(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefix != null) {\n      mustMatchFilter = new SolrMetricManager.PrefixFilter(prefix.trim());\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449bfd05ae28dcff263bf35fdb5fb75ae72446d3","date":1484383935,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      mustMatchFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String prefix = req.getParams().get(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefix != null) {\n      mustMatchFilter = new SolrMetricManager.PrefixFilter(prefix.trim());\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      mustMatchFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String prefix = req.getParams().get(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefix != null) {\n      mustMatchFilter = new SolrMetricManager.PrefixFilter(prefix.trim());\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    }\n    String[] regexes = req.getParams().getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      mustMatchFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter(prefixSet);\n    }\n    String[] regexes = req.getParams().getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      if (prefixFilter == null) {\n        mustMatchFilter = regexFilter;\n      } else if (regexFilter == null) {\n        mustMatchFilter = prefixFilter;\n      } else {\n        mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n      }\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    }\n    String[] regexes = req.getParams().getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter(prefixSet);\n    }\n    String[] regexes = req.getParams().getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      if (prefixFilter == null) {\n        mustMatchFilter = regexFilter;\n      } else if (regexFilter == null) {\n        mustMatchFilter = prefixFilter;\n      } else {\n        mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n      }\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(\"prefix\");\n    MetricFilter mustMatchFilter;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      mustMatchFilter = new SolrMetricManager.PrefixFilter((String[])prefixSet.toArray(new String[prefixSet.size()]));\n    } else  {\n      mustMatchFilter = MetricFilter.ALL;\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMustMatchFilter(SolrQueryRequest).mjava","sourceNew":"  private MetricFilter parseMustMatchFilter(SolrParams params) {\n    String[] prefixes = params.getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter(prefixSet);\n    }\n    String[] regexes = params.getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      if (prefixFilter == null) {\n        mustMatchFilter = regexFilter;\n      } else if (regexFilter == null) {\n        mustMatchFilter = prefixFilter;\n      } else {\n        mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n      }\n    }\n    return mustMatchFilter;\n  }\n\n","sourceOld":"  private MetricFilter parseMustMatchFilter(SolrQueryRequest req) {\n    String[] prefixes = req.getParams().getParams(PREFIX_PARAM);\n    MetricFilter prefixFilter = null;\n    if (prefixes != null && prefixes.length > 0) {\n      Set<String> prefixSet = new HashSet<>();\n      for (String prefix : prefixes) {\n        prefixSet.addAll(StrUtils.splitSmart(prefix, ','));\n      }\n      prefixFilter = new SolrMetricManager.PrefixFilter(prefixSet);\n    }\n    String[] regexes = req.getParams().getParams(REGEX_PARAM);\n    MetricFilter regexFilter = null;\n    if (regexes != null && regexes.length > 0) {\n      regexFilter = new SolrMetricManager.RegexFilter(regexes);\n    }\n    MetricFilter mustMatchFilter;\n    if (prefixFilter == null && regexFilter == null) {\n      mustMatchFilter = MetricFilter.ALL;\n    } else {\n      if (prefixFilter == null) {\n        mustMatchFilter = regexFilter;\n      } else if (regexFilter == null) {\n        mustMatchFilter = prefixFilter;\n      } else {\n        mustMatchFilter = new SolrMetricManager.OrFilter(prefixFilter, regexFilter);\n      }\n    }\n    return mustMatchFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["aa3636f020dd2f593d4df8cf2a55798e984ae749"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["491c9672ec42582fe43960452dbd37f1c80fe0f0","449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"816521ebaad5add9cb96bb88c577394e2938c40b":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aa3636f020dd2f593d4df8cf2a55798e984ae749"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa3636f020dd2f593d4df8cf2a55798e984ae749","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","507e7decdf00981d09a74632ea30299a4ce6ba72","816521ebaad5add9cb96bb88c577394e2938c40b"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}