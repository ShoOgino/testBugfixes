{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      builder.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      builder.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","sourceNew":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      fstCompiler.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","sourceOld":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      builder.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggesterBuilder#finishTerm().mjava","sourceNew":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      fstCompiler.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","sourceOld":"  /**\n   * Writes all the entries for the FST input term\n   */\n  public void finishTerm() throws IOException {\n    int numArcs = 0;\n    int numDedupBytes = 1;\n    analyzed.grow(analyzed.length() + 1);\n    analyzed.setLength(analyzed.length() + 1);\n    for (Entry entry : entries) {\n      if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {\n        analyzed.setByteAt(analyzed.length() - 1, (byte) (numArcs));\n        analyzed.grow(analyzed.length() + 1);\n        analyzed.setLength(analyzed.length() + 1);\n        numArcs = 0;\n        numDedupBytes++;\n      }\n      analyzed.setByteAt(analyzed.length() - 1, (byte) numArcs++);\n      Util.toIntsRef(analyzed.get(), scratchInts);\n      builder.add(scratchInts.get(), outputs.newPair(entry.weight, entry.payload));\n    }\n    maxAnalyzedPathsPerOutput = Math.max(maxAnalyzedPathsPerOutput, entries.size());\n    entries.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}