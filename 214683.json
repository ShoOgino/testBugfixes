{"path":"backwards/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","sourceNew":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","sourceOld":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","sourceNew":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","sourceOld":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}