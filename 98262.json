{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","commits":[{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanTermQuery() throws Exception {\n    SpanTermQuery stq;\n    PayloadSpans spans;\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"seventy\"));\n    spans = stq.getPayloadSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 1, 1, 1);\n\n    stq = new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"seventy\"));  \n    spans = stq.getPayloadSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 0, 0, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","sourceNew":"  public void testSpanTermQuery() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"seventy\"));\n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 1, 1, 1);\n\n    stq = new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"seventy\"));  \n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 0, 0, 0);\n  }\n\n","sourceOld":"  public void testSpanTermQuery() throws Exception {\n    SpanTermQuery stq;\n    PayloadSpans spans;\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"seventy\"));\n    spans = stq.getPayloadSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 1, 1, 1);\n\n    stq = new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"seventy\"));  \n    spans = stq.getPayloadSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanTermQuery().mjava","sourceNew":"  public void testSpanTermQuery() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"seventy\"));\n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 1, 1, 1);\n\n    stq = new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"seventy\"));  \n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 0, 0, 0);\n  }\n\n","sourceOld":"  public void testSpanTermQuery() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"seventy\"));\n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 1, 1, 1);\n\n    stq = new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"seventy\"));  \n    spans = stq.getSpans(indexReader);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 100, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ff93c6759a7da468c20c64fb459f85bccd0af370"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd5947db4de866f035b932f219674c03562d904e"],"fd5947db4de866f035b932f219674c03562d904e":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}