{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#verifyAllFilesAreZNodes(Path,String).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#verifyAllFilesAreZNodes(Path,String).mjava","pathOld":"/dev/null","sourceNew":"  void verifyAllFilesAreZNodes(Path fileRoot, String zkRoot) throws IOException {\n    Files.walkFileTree(fileRoot, new SimpleFileVisitor<Path>() {\n      void checkPathOnZk(Path path) {\n        String znode = zkRoot + path.toAbsolutePath().toString().substring(fileRoot.toAbsolutePath().toString().length());\n        try {\n          assertTrue(\"Should have found \" + znode + \" on Zookeeper\", zkClient.exists(znode, true));\n        } catch (Exception e) {\n          fail(\"Caught unexpected exception \" + e.getMessage() + \" Znode we were checking \" + znode);\n        }\n      }\n\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        assertTrue(\"Path should start at proper place!\", file.startsWith(fileRoot));\n        checkPathOnZk(file);\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n\n        checkPathOnZk(dir);\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b515f281a63ffbd9030d4f3d458ede2e416337","date":1467591265,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#verifyAllFilesAreZNodes(Path,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#verifyAllFilesAreZNodes(Path,String).mjava","sourceNew":"  void verifyAllFilesAreZNodes(Path fileRoot, String zkRoot) throws IOException {\n    Files.walkFileTree(fileRoot, new SimpleFileVisitor<Path>() {\n      void checkPathOnZk(Path path) {\n        String znode = ZkMaintenanceUtils.createZkNodeName(zkRoot, fileRoot, path);\n        try { // It's easier to catch this exception and fail than catch it everywher eles.\n          assertTrue(\"Should have found \" + znode + \" on Zookeeper\", zkClient.exists(znode, true));\n        } catch (Exception e) {\n          fail(\"Caught unexpected exception \" + e.getMessage() + \" Znode we were checking \" + znode);\n        }\n      }\n\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        assertTrue(\"Path should start at proper place!\", file.startsWith(fileRoot));\n        checkPathOnZk(file);\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n\n        checkPathOnZk(dir);\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  void verifyAllFilesAreZNodes(Path fileRoot, String zkRoot) throws IOException {\n    Files.walkFileTree(fileRoot, new SimpleFileVisitor<Path>() {\n      void checkPathOnZk(Path path) {\n        String znode = zkRoot + path.toAbsolutePath().toString().substring(fileRoot.toAbsolutePath().toString().length());\n        try {\n          assertTrue(\"Should have found \" + znode + \" on Zookeeper\", zkClient.exists(znode, true));\n        } catch (Exception e) {\n          fail(\"Caught unexpected exception \" + e.getMessage() + \" Znode we were checking \" + znode);\n        }\n      }\n\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        assertTrue(\"Path should start at proper place!\", file.startsWith(fileRoot));\n        checkPathOnZk(file);\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n\n        checkPathOnZk(dir);\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#verifyAllFilesAreZNodes(Path,String).mjava","pathOld":"/dev/null","sourceNew":"  void verifyAllFilesAreZNodes(Path fileRoot, String zkRoot) throws IOException {\n    Files.walkFileTree(fileRoot, new SimpleFileVisitor<Path>() {\n      void checkPathOnZk(Path path) {\n        String znode = ZkMaintenanceUtils.createZkNodeName(zkRoot, fileRoot, path);\n        try { // It's easier to catch this exception and fail than catch it everywher eles.\n          assertTrue(\"Should have found \" + znode + \" on Zookeeper\", zkClient.exists(znode, true));\n        } catch (Exception e) {\n          fail(\"Caught unexpected exception \" + e.getMessage() + \" Znode we were checking \" + znode);\n        }\n      }\n\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        assertTrue(\"Path should start at proper place!\", file.startsWith(fileRoot));\n        checkPathOnZk(file);\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n\n        checkPathOnZk(dir);\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5b515f281a63ffbd9030d4f3d458ede2e416337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5b515f281a63ffbd9030d4f3d458ede2e416337"]},"commit2Childs":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}