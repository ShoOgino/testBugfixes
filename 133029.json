{"path":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5","date":1461159938,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["606ea169579957651185909e7264798e99e714f9","3f8f94df09ef39794abdae8ec5bffc9def9c4eb5"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"606ea169579957651185909e7264798e99e714f9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5":["606ea169579957651185909e7264798e99e714f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["606ea169579957651185909e7264798e99e714f9"],"606ea169579957651185909e7264798e99e714f9":["9b701e0fcef214f86bab1daf107adce0b0131212","3f8f94df09ef39794abdae8ec5bffc9def9c4eb5"],"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5":["9b701e0fcef214f86bab1daf107adce0b0131212"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}