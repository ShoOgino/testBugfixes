{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode, true);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode, true);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode, true);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}