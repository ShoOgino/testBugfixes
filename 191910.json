{"path":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","commits":[{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24230fe54121f9be9d85f2c2067536296785e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}