{"path":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(IndexReader).mjava","commits":[{"id":"366fcca5de1fe02aa77c7aca163ce4c0dbf30112","date":1138917988,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(IndexReader).mjava","pathOld":"src/lucene_extras/org/apache/lucene/search/function/IntFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","a397491f6601f7c45bc425f45e95c41c3a6d1ca3","a397491f6601f7c45bc425f45e95c41c3a6d1ca3","a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/IntFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = (parser==null) ?\n            cache.getInts(reader, field) :\n            cache.getInts(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int)arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"366fcca5de1fe02aa77c7aca163ce4c0dbf30112":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["366fcca5de1fe02aa77c7aca163ce4c0dbf30112"]},"commit2Childs":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"366fcca5de1fe02aa77c7aca163ce4c0dbf30112":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["366fcca5de1fe02aa77c7aca163ce4c0dbf30112"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}