{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testUnmodifiedLetters().mjava","commits":[{"id":"6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed","date":1475744203,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testUnmodifiedLetters().mjava","pathOld":"/dev/null","sourceNew":"  // Test that we do not emit duplicated tokens when preserve original is on\n  public void testUnmodifiedLetters() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"§ ¦ ¤ END\");\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream, true);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertNextTerms(\"§\", \"§\", filter, termAtt);\n    assertNextTerms(\"¦\", \"¦\", filter, termAtt);\n    assertNextTerms(\"¤\", \"¤\", filter, termAtt);\n    assertNextTerms(\"END\", \"END\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testUnmodifiedLetters().mjava","pathOld":"/dev/null","sourceNew":"  // Test that we do not emit duplicated tokens when preserve original is on\n  public void testUnmodifiedLetters() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"§ ¦ ¤ END\");\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream, true);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertNextTerms(\"§\", \"§\", filter, termAtt);\n    assertNextTerms(\"¦\", \"¦\", filter, termAtt);\n    assertNextTerms(\"¤\", \"¤\", filter, termAtt);\n    assertNextTerms(\"END\", \"END\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6acfef8cc5d0193583040dd9279f5f9ca4c6f8ed":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}