{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#affixFST(TreeMap[String,List[Character]]).mjava","commits":[{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#affixFST(TreeMap[String,List[Character]]).mjava","pathOld":"/dev/null","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Character>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    \n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Character>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Character> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      int upto = 0;\n      for (Character c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Character]]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#affixFST(TreeMap[String,List[Character]]).mjava","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Character>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    \n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Character>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Character> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Character c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  private FST<IntsRef> affixFST(TreeMap<String,List<Character>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    \n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Character>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Character> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      int upto = 0;\n      for (Character c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"26c5ee01d8657497f54f46447208768acc949d51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26c5ee01d8657497f54f46447208768acc949d51","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}