{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<ReplicaInfo>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<ReplicaInfo>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<ReplicaInfo> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            ReplicaInfo ri = new ReplicaInfo(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader) {\n              ri.getVariables().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.getVariable(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.getVariable(Variable.Type.CORE_IDX.tagName);\n                  ri.getVariables().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<ReplicaInfo>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<ReplicaInfo>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<ReplicaInfo> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            ReplicaInfo ri = new ReplicaInfo(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader) {\n              ri.getVariables().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.getVariable(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.getVariable(Variable.Type.CORE_IDX.tagName);\n                  ri.getVariables().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<ReplicaInfo>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<ReplicaInfo>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<ReplicaInfo> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            ReplicaInfo ri = new ReplicaInfo(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader) {\n              ri.getVariables().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.getVariable(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.getVariable(Variable.Type.CORE_IDX.tagName);\n                  ri.getVariables().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<Replica>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<Replica>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<Replica> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            Replica ri = new Replica(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader()) {\n              ri.getProperties().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.get(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.get(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.get(Variable.Type.CORE_IDX.tagName);\n                  ri.getProperties().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<ReplicaInfo>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<ReplicaInfo>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<ReplicaInfo> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            ReplicaInfo ri = new ReplicaInfo(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader) {\n              ri.getVariables().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.getVariable(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.getVariable(Variable.Type.CORE_IDX.tagName);\n                  ri.getVariables().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#SnapshotNodeStateProvider(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {\n    Objects.requireNonNull(snapshot);\n    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault(\"nodeValues\", Collections.emptyMap());\n    ((Map<String, Object>)snapshot.getOrDefault(\"replicaInfos\", Collections.emptyMap())).forEach((node, v) -> {\n      Map<String, Map<String, List<Replica>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());\n      ((Map<String, Object>)v).forEach((collection, shards) -> {\n        Map<String, List<Replica>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());\n        ((Map<String, Object>)shards).forEach((shard, replicas) -> {\n          List<Replica> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());\n          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {\n            Replica ri = new Replica(new LinkedHashMap<>(replicaMap)); // constructor modifies this map\n            if (ri.isLeader()) {\n              ri.getProperties().put(\"leader\", \"true\");\n            }\n            // externally produced snapshots may not include the right units\n            if (ri.get(Variable.Type.CORE_IDX.metricsAttribute) == null) {\n                if (ri.get(Variable.Type.CORE_IDX.tagName) != null) {\n                  Number indexSizeGB = (Number) ri.get(Variable.Type.CORE_IDX.tagName);\n                  ri.getProperties().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);\n                } else {\n                  throw new RuntimeException(\"Missing size information for replica: \" + ri);\n              }\n            }\n            infos.add(ri);\n          });\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}