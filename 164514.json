{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#assertOrderOf(List[Tuple],String,int...).mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#assertOrderOf(List[Tuple],String,int...).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertMapOrder(List[Tuple],int...).mjava","sourceNew":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      String tip = t.getString(fieldName);\n      if(!tip.equals(Integer.toString(val))) {\n        throw new Exception(\"Found value:\"+tip+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","sourceOld":"  protected boolean assertMapOrder(List<Tuple> tuples, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      List<Map> tip = t.getMaps(\"group\");\n      int id = (int)tip.get(0).get(\"id\");\n      if(id != val) {\n        throw new Exception(\"Found value:\"+id+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}