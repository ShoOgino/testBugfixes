{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab2f54aa3920f7b4a9b92e45334237f6427b20d3","date":1522384863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeLostTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testNodeLostTrigger() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(5000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String lostNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    cluster.simRemoveNode(lostNodeName, false);\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeLostEvent = events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(lostNodeName));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2000 / SPEED, TimeUnit.MILLISECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}