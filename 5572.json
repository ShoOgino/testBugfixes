{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","commits":[{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointRangeEquals() {\n    Query q = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, IntPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(IntPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, LongPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(LongPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, FloatPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(FloatPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, DoublePoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(DoublePoint.newRangeQuery(\"a\", 1, 1000)));\n\n    byte[] zeros = new byte[5];\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    assertEquals(q, BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones}));\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q.equals(BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {other})));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","sourceNew":"  public void testPointRangeEquals() {\n    Query q1 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    Query q2 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newRangeQuery(\"a\", 1, 1000)));\n\n    byte[] zeros = new byte[5];\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    q2 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {other})));\n  }\n\n","sourceOld":"  public void testPointRangeEquals() {\n    Query q = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, IntPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(IntPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, LongPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(LongPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, FloatPoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(FloatPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q, DoublePoint.newRangeQuery(\"a\", 0, 1000));\n    assertFalse(q.equals(DoublePoint.newRangeQuery(\"a\", 1, 1000)));\n\n    byte[] zeros = new byte[5];\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    assertEquals(q, BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones}));\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q.equals(BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {other})));\n  }\n\n","bugFix":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"bugIntro":["d2270976e274799939e1b5339eb6c16c7601dfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2270976e274799939e1b5339eb6c16c7601dfda","date":1458767534,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeEquals().mjava","sourceNew":"  public void testPointRangeEquals() {\n    Query q1, q2;\n\n    q1 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newRangeQuery(\"a\", 1, 1000)));\n    assertFalse(q1.equals(IntPoint.newRangeQuery(\"b\", 0, 1000)));\n\n    q1 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newRangeQuery(\"a\", 1, 1000)));\n\n    byte[] zeros = new byte[5];\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    q2 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {other})));\n  }\n\n","sourceOld":"  public void testPointRangeEquals() {\n    Query q1 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    Query q2 = IntPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = LongPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = FloatPoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newRangeQuery(\"a\", 1, 1000)));\n\n    q1 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    q2 = DoublePoint.newRangeQuery(\"a\", 0, 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newRangeQuery(\"a\", 1, 1000)));\n\n    byte[] zeros = new byte[5];\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    q2 = BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {ones});\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newRangeQuery(\"a\", new byte[][] {zeros}, new byte[][] {other})));\n  }\n\n","bugFix":["606ea169579957651185909e7264798e99e714f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2270976e274799939e1b5339eb6c16c7601dfda":["606ea169579957651185909e7264798e99e714f9"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2270976e274799939e1b5339eb6c16c7601dfda"]},"commit2Childs":{"d2270976e274799939e1b5339eb6c16c7601dfda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"606ea169579957651185909e7264798e99e714f9":["d2270976e274799939e1b5339eb6c16c7601dfda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}