{"path":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.NIOFSIndexInput#readInternal(ByteBuffer).mjava","commits":[{"id":"af9ce763a9d61cb88781e638d593430b71efa7dc","date":1586259009,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.NIOFSIndexInput#readInternal(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.NIOFSIndexInput#readInternal(byte[],int,int).mjava","sourceNew":"    @Override\n    protected void readInternal(ByteBuffer b) throws IOException {\n      long pos = getFilePointer() + off;\n      \n      if (pos + b.remaining() > end) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n\n      try {\n        int readLength = b.remaining();\n        while (readLength > 0) {\n          final int toRead = Math.min(CHUNK_SIZE, readLength);\n          b.limit(b.position() + toRead);\n          assert b.remaining() == toRead;\n          final int i = channel.read(b, pos);\n          if (i < 0) { // be defensive here, even though we checked before hand, something could have changed\n            throw new EOFException(\"read past EOF: \" + this + \" buffer: \" + b + \" chunkLen: \" + toRead + \" end: \" + end);\n          }\n          assert i > 0 : \"FileChannel.read with non zero-length bb.remaining() must always read at least one byte (FileChannel is in blocking mode, see spec of ReadableByteChannel)\";\n          pos += i;\n          readLength -= i;\n        }\n        assert readLength == 0;\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void readInternal(byte[] b, int offset, int len) throws IOException {\n      final ByteBuffer bb;\n\n      // Determine the ByteBuffer we should use\n      if (b == buffer) {\n        // Use our own pre-wrapped byteBuf:\n        assert byteBuf != null;\n        bb = byteBuf;\n        byteBuf.clear().position(offset);\n      } else {\n        bb = ByteBuffer.wrap(b, offset, len);\n      }\n\n      long pos = getFilePointer() + off;\n      \n      if (pos + len > end) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n\n      try {\n        int readLength = len;\n        while (readLength > 0) {\n          final int toRead = Math.min(CHUNK_SIZE, readLength);\n          bb.limit(bb.position() + toRead);\n          assert bb.remaining() == toRead;\n          final int i = channel.read(bb, pos);\n          if (i < 0) { // be defensive here, even though we checked before hand, something could have changed\n            throw new EOFException(\"read past EOF: \" + this + \" off: \" + offset + \" len: \" + len + \" pos: \" + pos + \" chunkLen: \" + toRead + \" end: \" + end);\n          }\n          assert i > 0 : \"FileChannel.read with non zero-length bb.remaining() must always read at least one byte (FileChannel is in blocking mode, see spec of ReadableByteChannel)\";\n          pos += i;\n          readLength -= i;\n        }\n        assert readLength == 0;\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af9ce763a9d61cb88781e638d593430b71efa7dc"]},"commit2Childs":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}