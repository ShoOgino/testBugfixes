{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","commits":[{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893d07555f01912f57b453a320e4d46363a31b50","5cab9a86bd67202d20b6adc463008c8e982b070a"],"893d07555f01912f57b453a320e4d46363a31b50":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}