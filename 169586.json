{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#init(List[String]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#init(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public void init(List<String> solrUrls) throws Exception {\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = getSolrClient(solrUrl)) {\n        this.liveNodes = fetchLiveNodes(initialClient);\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch cluster state from {} failed.\", solrUrl, e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dd01f5409ba713534b5495b0a5bbe5b9f071905f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd01f5409ba713534b5495b0a5bbe5b9f071905f","date":1585446632,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#init(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#init(List[String]).mjava","sourceNew":"  public void init(List<String> solrUrls) throws Exception {\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = getSolrClient(solrUrl)) {\n        this.liveNodes = fetchLiveNodes(initialClient);\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from {} failed.\", solrUrl, e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","sourceOld":"  public void init(List<String> solrUrls) throws Exception {\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = getSolrClient(solrUrl)) {\n        this.liveNodes = fetchLiveNodes(initialClient);\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch cluster state from {} failed.\", solrUrl, e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","bugFix":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd01f5409ba713534b5495b0a5bbe5b9f071905f":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd01f5409ba713534b5495b0a5bbe5b9f071905f"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["dd01f5409ba713534b5495b0a5bbe5b9f071905f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"dd01f5409ba713534b5495b0a5bbe5b9f071905f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}