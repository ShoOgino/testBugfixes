{"path":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","commits":[{"id":"0274c27988a26cb0cda3a0d15b282221b1b453f0","date":1343923460,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"]},"commit2Childs":{"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0274c27988a26cb0cda3a0d15b282221b1b453f0","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}