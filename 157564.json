{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          docID = Integer.parseInt(new String(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length));\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73ba365ae82cd3711e98f656f96eb9e811606c53","date":1289258492,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          docID = Integer.parseInt(new String(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length));\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          docID = Integer.parseInt(new String(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length));\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.result, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (skipDocs == null || !skipDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (scratch.startsWith(FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (scratch.startsWith(POS)) {\n          // skip\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          posStart = in.getFilePointer();\n          first = false;\n        } else if (scratch.startsWith(POS)) {\n          tf++;\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (scratch.startsWith(FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (scratch.startsWith(POS)) {\n          // skip\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (scratch.startsWith(FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (scratch.startsWith(POS)) {\n          // skip\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.startsWith(DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (scratch.startsWith(FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (scratch.startsWith(POS)) {\n          // skip\n        } else if (scratch.startsWith(PAYLOAD)) {\n          // skip\n        } else {\n          assert scratch.startsWith(TERM) || scratch.startsWith(FIELD) || scratch.startsWith(END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      boolean first = true;\n      in.seek(nextDocStart);\n      long posStart = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          tf = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          tf = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          posStart = in.getFilePointer();\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END);\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            nextDocStart = lineStart;\n            in.seek(posStart);\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"06584e6e98d592b34e1329b384182f368d2025e8":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["06584e6e98d592b34e1329b384182f368d2025e8"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"85a883878c0af761245ab048babc63d099f835f3":["8d47f68d60cbff5718136b945ba8c55982342f38","73ba365ae82cd3711e98f656f96eb9e811606c53"],"8d47f68d60cbff5718136b945ba8c55982342f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73ba365ae82cd3711e98f656f96eb9e811606c53"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["73ba365ae82cd3711e98f656f96eb9e811606c53","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"73ba365ae82cd3711e98f656f96eb9e811606c53":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["73ba365ae82cd3711e98f656f96eb9e811606c53"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["85a883878c0af761245ab048babc63d099f835f3","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"85a883878c0af761245ab048babc63d099f835f3":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8d47f68d60cbff5718136b945ba8c55982342f38":["85a883878c0af761245ab048babc63d099f835f3","73ba365ae82cd3711e98f656f96eb9e811606c53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"73ba365ae82cd3711e98f656f96eb9e811606c53":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d47f68d60cbff5718136b945ba8c55982342f38","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}