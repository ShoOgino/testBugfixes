{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}