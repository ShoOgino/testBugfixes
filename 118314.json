{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","sourceNew":null,"sourceOld":"  public void testEqualsHashcode() {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}