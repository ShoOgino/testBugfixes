{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","81ea17596392ebd5d12741eb9e3b2516258b9413"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","81ea17596392ebd5d12741eb9e3b2516258b9413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["f1bdbf92da222965b46c0a942c3857ba56e5c638","81ea17596392ebd5d12741eb9e3b2516258b9413","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}