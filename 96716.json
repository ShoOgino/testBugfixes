{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","commits":[{"id":"82ed10ec58814cd9841195fb52bcbc1c2402e2cc","date":1390222136,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"702f9eb5f4d8ac6dea3945928de043b9d25fa87d","date":1391001447,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","sourceNew":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    } catch (Exception e) {\n      log.warn(\"error \", e);\n      return new ArrayList<String>();\n    }\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","sourceOld":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","sourceNew":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    } catch (Exception e) {\n      log.warn(\"error \", e);\n      return new ArrayList<>();\n    }\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","sourceOld":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    } catch (Exception e) {\n      log.warn(\"error \", e);\n      return new ArrayList<String>();\n    }\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e66d99e5beccb546edd910c91f646fb7d831a94","date":1395391298,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedOverseerNodeNames(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getSortedNodeNames(SolrZkClient).mjava","sourceNew":"  public static List<String> getSortedOverseerNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    } catch (Exception e) {\n      log.warn(\"error \", e);\n      return new ArrayList<>();\n    }\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","sourceOld":"  public static List<String> getSortedNodeNames(SolrZkClient zk) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);\n    } catch (Exception e) {\n      log.warn(\"error \", e);\n      return new ArrayList<>();\n    }\n    LeaderElector.sortSeqs(children);\n    ArrayList<String> nodeNames = new ArrayList<>(children.size());\n    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["82ed10ec58814cd9841195fb52bcbc1c2402e2cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82ed10ec58814cd9841195fb52bcbc1c2402e2cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e66d99e5beccb546edd910c91f646fb7d831a94":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e66d99e5beccb546edd910c91f646fb7d831a94"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7e66d99e5beccb546edd910c91f646fb7d831a94"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82ed10ec58814cd9841195fb52bcbc1c2402e2cc"],"82ed10ec58814cd9841195fb52bcbc1c2402e2cc":["702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"7e66d99e5beccb546edd910c91f646fb7d831a94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}