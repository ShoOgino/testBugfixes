{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d","date":1405005344,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[ScoreTerm]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<ScoreTerm> q) {\n    BooleanQuery query = new BooleanQuery();\n    ScoreTerm scoreTerm;\n    float bestScore = -1;\n\n    while ((scoreTerm = q.pop()) != null) {\n      TermQuery tq = new TermQuery(new Term(scoreTerm.topField, scoreTerm.word));\n\n      if (boost) {\n        if (bestScore == -1) {\n          bestScore = (scoreTerm.score);\n        }\n        float myScore = (scoreTerm.score);\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}