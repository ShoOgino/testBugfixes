{"path":"src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","commits":[{"id":"57e91c86e193010fc38028001cf0590693ad2cd1","date":1166153548,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n    \n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n      \n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"810d380561c984370e8bfcbf778486c08f7e2cc0","date":1171644169,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","pathOld":"src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","sourceNew":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n    \n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n      \n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/DOMUtil#getText(Node).mjava","pathOld":"src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","sourceNew":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"57e91c86e193010fc38028001cf0590693ad2cd1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"810d380561c984370e8bfcbf778486c08f7e2cc0":["57e91c86e193010fc38028001cf0590693ad2cd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":[],"57e91c86e193010fc38028001cf0590693ad2cd1":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["57e91c86e193010fc38028001cf0590693ad2cd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"810d380561c984370e8bfcbf778486c08f7e2cc0":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}