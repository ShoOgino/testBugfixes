{"path":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e03f44b45336edd453b051c625896b1efd1036","date":1327499968,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSimple2().mjava","sourceNew":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","sourceOld":"  public void testSimple2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"last\", \"smith\"));\n    SpanQuery q = new SpanNearQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")}, -1, false );\n    check(q, new int[] { 2, 4 });\n    q = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(q1, \"id\"),\n        new FieldMaskingSpanQuery(q2, \"id\") }, -1, false );\n    check(q, new int[] { 2, 4 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["9454a6510e2db155fb01faa5c049b06ece95fab9","97e03f44b45336edd453b051c625896b1efd1036"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9454a6510e2db155fb01faa5c049b06ece95fab9","97e03f44b45336edd453b051c625896b1efd1036"],"97e03f44b45336edd453b051c625896b1efd1036":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["97e03f44b45336edd453b051c625896b1efd1036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"97e03f44b45336edd453b051c625896b1efd1036":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","97e03f44b45336edd453b051c625896b1efd1036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}