{"path":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer(random));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer(random));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer(random));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer(random));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer());\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":null,"sourceOld":"  public void testConstructor() {\n    BytesRef [] queryTerm = {new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), \n        new BytesRef(\"again\"), new BytesRef(\"foo\"), new BytesRef(\"bar\"), new BytesRef(\"go\"),\n        new BytesRef(\"go\"), new BytesRef(\"go\")};\n    //Items are sorted lexicographically\n    BytesRef [] gold = {new BytesRef(\"again\"), new BytesRef(\"bar\"), new BytesRef(\"foo\"), new BytesRef(\"go\")};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    BytesRef [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new MockAnalyzer(random));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"962d04139994fce5193143ef35615499a9a96d78":["5f4e87790277826a2aea119328600dfb07761f32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}