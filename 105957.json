{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testEstimatePointCount().mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testEstimatePointCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testEstimatePointCount().mjava","sourceNew":"  public void testEstimatePointCount() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Avoid mockRandomMP since it may cause non-optimal merges that make the\n    // number of points per leaf hard to predict\n    while (iwc.getMergePolicy() instanceof MockRandomMergePolicy) {\n      iwc.setMergePolicy(newMergePolicy());\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] pointValue = new byte[3];\n    byte[] uniquePointValue = new byte[3];\n    random().nextBytes(uniquePointValue);\n    final int numDocs = TEST_NIGHTLY ? atLeast(10000) : atLeast(500); // at night, make sure we have several leaves\n    final boolean multiValues = random().nextBoolean();\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (i == numDocs / 2) {\n        doc.add(new BinaryPoint(\"f\", uniquePointValue));\n      } else {\n        final int numValues = (multiValues) ? TestUtil.nextInt(random(), 2, 100) : 1;\n        for (int j = 0; j < numValues; j ++) {\n          do {\n            random().nextBytes(pointValue);\n          } while (Arrays.equals(pointValue, uniquePointValue));\n          doc.add(new BinaryPoint(\"f\", pointValue));\n        }\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    final LeafReader lr = getOnlyLeafReader(r);\n    PointValues points = lr.getPointValues(\"f\");\n\n    // If all points match, then the point count is numLeaves * maxPointsInLeafNode\n    final int numLeaves = (int) Math.ceil((double) points.size() / maxPointsInLeafNode);\n\n    IntersectVisitor allPointsVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    };\n\n    assertEquals(numLeaves * maxPointsInLeafNode, points.estimatePointCount(allPointsVisitor));\n    assertEquals(numDocs, points.estimateDocCount(allPointsVisitor));\n\n    IntersectVisitor noPointsVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    };\n\n    // Return 0 if no points match\n    assertEquals(0, points.estimatePointCount(noPointsVisitor));\n    assertEquals(0, points.estimateDocCount(noPointsVisitor));\n\n    IntersectVisitor onePointMatchVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(uniquePointValue, 0, 3, maxPackedValue, 0, 3) > 0 ||\n            Arrays.compareUnsigned(uniquePointValue, 0, 3, minPackedValue, 0, 3) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    };\n\n    // If only one point matches, then the point count is (maxPointsInLeafNode + 1) / 2\n    // in general, or maybe 2x that if the point is a split value\n    final long pointCount = points.estimatePointCount(onePointMatchVisitor);\n    assertTrue(\"\"+pointCount,\n        pointCount == (maxPointsInLeafNode + 1) / 2 || // common case\n        pointCount == 2*((maxPointsInLeafNode + 1) / 2)); // if the point is a split value\n\n    final long docCount = points.estimateDocCount(onePointMatchVisitor);\n\n    if (multiValues) {\n      assertEquals(docCount, (long) (docCount * (1d - Math.pow( (numDocs -  pointCount) / points.size() , points.size() / docCount))));\n    } else {\n      assertEquals(Math.min(pointCount, numDocs), docCount);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEstimatePointCount() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Avoid mockRandomMP since it may cause non-optimal merges that make the\n    // number of points per leaf hard to predict\n    while (iwc.getMergePolicy() instanceof MockRandomMergePolicy) {\n      iwc.setMergePolicy(newMergePolicy());\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] pointValue = new byte[3];\n    byte[] uniquePointValue = new byte[3];\n    random().nextBytes(uniquePointValue);\n    final int numDocs = TEST_NIGHTLY ? atLeast(10000) : atLeast(500); // at night, make sure we have several leaves\n    final boolean multiValues = random().nextBoolean();\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (i == numDocs / 2) {\n        doc.add(new BinaryPoint(\"f\", uniquePointValue));\n      } else {\n        final int numValues = (multiValues) ? TestUtil.nextInt(random(), 2, 100) : 1;\n        for (int j = 0; j < numValues; j ++) {\n          do {\n            random().nextBytes(pointValue);\n          } while (Arrays.equals(pointValue, uniquePointValue));\n          doc.add(new BinaryPoint(\"f\", pointValue));\n        }\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    final LeafReader lr = getOnlyLeafReader(r);\n    PointValues points = lr.getPointValues(\"f\");\n\n    // If all points match, then the point count is numLeaves * maxPointsInLeafNode\n    final int numLeaves = (int) Math.ceil((double) points.size() / maxPointsInLeafNode);\n\n    IntersectVisitor allPointsVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    };\n\n    assertEquals(numLeaves * maxPointsInLeafNode, points.estimatePointCount(allPointsVisitor));\n    assertEquals(numDocs, points.estimateDocCount(allPointsVisitor));\n\n    IntersectVisitor noPointsVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    };\n\n    // Return 0 if no points match\n    assertEquals(0, points.estimatePointCount(noPointsVisitor));\n    assertEquals(0, points.estimateDocCount(noPointsVisitor));\n\n    IntersectVisitor onePointMatchVisitor = new IntersectVisitor() {\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {}\n\n      @Override\n      public void visit(int docID) throws IOException {}\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(uniquePointValue, 0, 3, maxPackedValue, 0, 3) > 0 ||\n            Arrays.compareUnsigned(uniquePointValue, 0, 3, minPackedValue, 0, 3) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    };\n\n    // If only one point matches, then the point count is (maxPointsInLeafNode + 1) / 2\n    // in general, or maybe 2x that if the point is a split value\n    final long pointCount = points.estimatePointCount(onePointMatchVisitor);\n    assertTrue(\"\"+pointCount,\n        pointCount == (maxPointsInLeafNode + 1) / 2 || // common case\n        pointCount == 2*((maxPointsInLeafNode + 1) / 2)); // if the point is a split value\n\n    final long docCount = points.estimateDocCount(onePointMatchVisitor);\n\n    if (multiValues) {\n      assertEquals(docCount, (long) (docCount * (1d - Math.pow( (numDocs -  pointCount) / points.size() , points.size() / docCount))));\n    } else {\n      assertEquals(Math.min(pointCount, numDocs), docCount);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}