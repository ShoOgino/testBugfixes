{"path":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}