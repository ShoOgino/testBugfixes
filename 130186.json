{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    return Explanation.match(valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\", subQueryExpl, valSrcExpl);\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","sourceNew":null,"sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    return Explanation.match(valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\", subQueryExpl, valSrcExpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a82662cae660e76ded4de1e9b451633e523d83e1":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["a82662cae660e76ded4de1e9b451633e523d83e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}