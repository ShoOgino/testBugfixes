{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","sourceNew":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","sourceOld":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","sourceNew":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","sourceOld":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","sourceNew":"  /*\n   * <t>...terminal\n   *\n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","sourceOld":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlapPhrases3().mjava","sourceNew":"  /*\n   * <t>...terminal\n   *\n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","sourceOld":"  /*\n   * <t>...terminal\n   * \n   * a-a-a-<t>\n   *     +-a-<t>\n   *       +-a-<t>\n   *         +-a-<t>\n   */\n  public void testQueryPhraseMapOverlapPhrases3() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( pqF( \"a\", \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    query.add( pqF( 2, \"a\", \"a\", \"a\" ), Occur.SHOULD );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n\n    // \"a a a\"\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"a\" );\n    assertFalse( qpm3.terminal );\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"a\" );\n    assertTrue( qpm4.terminal );\n\n    // \"a a a a\"\n    assertEquals( 1, qpm4.subMap.size() );\n    assertNotNull( qpm4.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm5 = qpm4.subMap.get( \"a\" );\n    assertTrue( qpm5.terminal );\n\n    // \"a a a a a\"\n    assertEquals( 1, qpm5.subMap.size() );\n    assertNotNull( qpm5.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm6 = qpm5.subMap.get( \"a\" );\n    assertTrue( qpm6.terminal );\n\n    // \"a a a a a a\"\n    assertEquals( 1, qpm6.subMap.size() );\n    assertNotNull( qpm6.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm7 = qpm6.subMap.get( \"a\" );\n    assertTrue( qpm7.terminal );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}