{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","pathOld":"/dev/null","sourceNew":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, TrieDateField.formatExternal(dates[0]));\n    params.add(FacetParams.FACET_RANGE_END, TrieDateField.formatExternal(dates[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, DateFormatUtil.formatExternal(dates[0]));\n    params.add(FacetParams.FACET_RANGE_END, DateFormatUtil.formatExternal(dates[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, TrieDateField.formatExternal(dates[0]));\n    params.add(FacetParams.FACET_RANGE_END, TrieDateField.formatExternal(dates[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, dates[0].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_END, dates[1].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, DateFormatUtil.formatExternal(dates[0]));\n    params.add(FacetParams.FACET_RANGE_END, DateFormatUtil.formatExternal(dates[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0a64ffcef6ae839baf314a48817008c796b053d","date":1499974056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime()) * (random().nextBoolean()?-1:1)));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime()) * (random().nextBoolean()?-1:1)));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, dates[0].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_END, dates[1].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, dates[0].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_END, dates[1].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsDate().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime()) * (random().nextBoolean()?-1:1)));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime()) * (random().nextBoolean()?-1:1)));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, dates[0].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_END, dates[1].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsDate() {\n    String field = new String[]{\"range_facet_dt_dv\", \"a_tdt\", \"bday\"}[random().nextInt(3)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Date[] dates = new Date[2];\n    do {\n      dates[0] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n      dates[1] = new Date((long)(random().nextDouble()*(new Date().getTime())));\n    } while (dates[0].equals(dates[1]));\n    Arrays.sort(dates);\n    long dateDiff = (dates[1].getTime() - dates[0].getTime())/1000;\n    String gapUnit;\n    if (dateDiff < 1000) {\n      gapUnit = DATE_GAP_UNITS[random().nextInt(DATE_GAP_UNITS.length)];\n    } else if (dateDiff < 10000){\n      gapUnit = DATE_GAP_UNITS[1 + random().nextInt(DATE_GAP_UNITS.length - 1)];\n    } else if (dateDiff < 100000){\n      gapUnit = DATE_GAP_UNITS[2 + random().nextInt(DATE_GAP_UNITS.length - 2)];\n    } else if (dateDiff < 1000000){\n      gapUnit = DATE_GAP_UNITS[3 + random().nextInt(DATE_GAP_UNITS.length - 3)];\n    } else {\n      gapUnit = DATE_GAP_UNITS[4 + random().nextInt(DATE_GAP_UNITS.length - 4)];\n    }\n    int gapNum = random().nextInt(100) + 1;\n    \n    params.add(FacetParams.FACET_RANGE_START, dates[0].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_END, dates[1].toInstant().toString());\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%d%s\", gapNum, gapUnit));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["d3f6c7717a0f1decd1668144537943efcc70cd95","d0a64ffcef6ae839baf314a48817008c796b053d"],"d0a64ffcef6ae839baf314a48817008c796b053d":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0a64ffcef6ae839baf314a48817008c796b053d"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["e135e47842b3fd6a4797b7e4787241b06817efa2"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["aaf90fc29510e72665ac7934f34c3d1c25efad64","d0a64ffcef6ae839baf314a48817008c796b053d"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"d0a64ffcef6ae839baf314a48817008c796b053d":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}