{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#applyNameFilter(List[String]).mjava","commits":[{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#applyNameFilter(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.PageOfCollections#applyNameFilter(List[String]).mjava","sourceNew":"    /**\n     * Filters a list of collections by name if applicable.\n     */\n    List<String> applyNameFilter(List<String> collections) {\n\n      if (filterType != FilterType.name || filter == null)\n        return collections; // name filter doesn't apply\n\n      // typically, a user will type a prefix and then *, e.g. tj*\n      // when they really mean tj.*\n      String regexFilter = (!filter.endsWith(\".*\") && filter.endsWith(\"*\"))\n          ? filter.substring(0, filter.length() - 1) + \".*\" : filter;\n\n      // case-insensitive\n      if (!regexFilter.startsWith(\"(?i)\"))\n        regexFilter = \"(?i)\" + regexFilter;\n\n      Pattern filterRegex = Pattern.compile(regexFilter);\n      List<String> filtered = new ArrayList<String>();\n      for (String next : collections) {\n        if (matches(filterRegex, next))\n          filtered.add(next);\n      }\n\n      return filtered;\n    }\n\n","sourceOld":"    /**\n     * Filters a list of collections by name if applicable. \n     */\n    List<String> applyNameFilter(List<String> collections) {\n      \n      if (filterType != FilterType.name || filter == null)\n        return collections; // name filter doesn't apply\n            \n      // typically, a user will type a prefix and then *, e.g. tj*\n      // when they really mean tj.*\n      String regexFilter = (!filter.endsWith(\".*\") && filter.endsWith(\"*\")) \n          ? filter.substring(0,filter.length()-1)+\".*\" : filter; \n      \n      // case-insensitive\n      if (!regexFilter.startsWith(\"(?i)\"))\n        regexFilter = \"(?i)\"+regexFilter;\n      \n      Pattern filterRegex = Pattern.compile(regexFilter);        \n      List<String> filtered = new ArrayList<String>();\n      for (String next : collections) {\n        if (matches(filterRegex, next))\n          filtered.add(next);\n      }\n      \n      return filtered;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}