{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","commits":[{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    try {\n      ignoreException(\"Too many clauses\");\n      assertJQ(req(\"q\",q)\n          ,\"/response/numFound==6\");\n      fail();\n    } catch (Exception e) {\n      // expect \"too many clauses\" exception... see SOLR-10921\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    try {\n      ignoreException(\"Too many clauses\");\n      assertJQ(req(\"q\",q)\n          ,\"/response/numFound==6\");\n      fail();\n    } catch (Exception e) {\n      // expect \"too many clauses\" exception... see SOLR-10921\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    try {\n      ignoreException(\"Too many clauses\");\n      assertJQ(req(\"q\",q)\n          ,\"/response/numFound==6\");\n      fail();\n    } catch (Exception e) {\n      // expect \"too many clauses\" exception... see SOLR-10921\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    {\n      ignoreException(\"Too many clauses\");\n      SolrException e = expectThrows(SolrException.class, \"exoected too many clauses exception\",\n          () -> assertJQ(req(\"q\", q), \"/response/numFound==6\"));\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    try {\n      ignoreException(\"Too many clauses\");\n      assertJQ(req(\"q\",q)\n          ,\"/response/numFound==6\");\n      fail();\n    } catch (Exception e) {\n      // expect \"too many clauses\" exception... see SOLR-10921\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2be0a2886c76942ff986465eabde7b858895dc9","date":1555349228,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testManyClauses() throws Exception {\n    String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < 1024; i++) { // historically, the max number of boolean clauses defaulted to 1024\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n\n    String q = sb.toString();\n\n    // This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.\n    {\n      ignoreException(\"Too many clauses\");\n      SolrException e = expectThrows(SolrException.class, \"exoected too many clauses exception\",\n          () -> assertJQ(req(\"q\", q), \"/response/numFound==6\"));\n      assertTrue(e.getMessage().contains(\"many clauses\"));\n    }\n\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", q, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2be0a2886c76942ff986465eabde7b858895dc9":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c03778630c4604270d88c148afb8c7de35b51d3c","39fdbc59d893f5a211736e861fe145798a40b9ff"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["28288370235ed02234a64753cdbf0c6ec096304a"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["e55782fb51a6e9789542818eb2161a3247f39ace","39fdbc59d893f5a211736e861fe145798a40b9ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2be0a2886c76942ff986465eabde7b858895dc9"]},"commit2Childs":{"a2be0a2886c76942ff986465eabde7b858895dc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c03778630c4604270d88c148afb8c7de35b51d3c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"464e7336798bc8a1281d5cf610c649c5a0784e83":["a2be0a2886c76942ff986465eabde7b858895dc9"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"e55782fb51a6e9789542818eb2161a3247f39ace":["39fdbc59d893f5a211736e861fe145798a40b9ff","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}