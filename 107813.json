{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && \n        f.indexOptions() == IndexOptions.DOCS_ONLY)      ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && \n        f.indexOptions() == IndexOptions.DOCS_AND_FREQS) ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8c18828cd7c43a8460d7f4046d8138278a7eaa","date":1311619509,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && \n                   f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && \n        f.indexOptions() == IndexOptions.DOCS_ONLY)      ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && \n        f.indexOptions() == IndexOptions.DOCS_AND_FREQS) ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && \n                   f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406bc9b8259803aa08a36dff8485f39d0859df51","date":1362272687,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPayloads() )  ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPayloads() )  ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.isUninvertible())      ? FieldFlag.UNINVERTIBLE.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPayloads() )  ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n\n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n\n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.hasDocValues())        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPayloads() )  ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null &&\n        f.omitTermFreqAndPositions() )        ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitPositions() )      ? FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeOffsetsWithPositions() )      ? FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["406bc9b8259803aa08a36dff8485f39d0859df51","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["406bc9b8259803aa08a36dff8485f39d0859df51"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"406bc9b8259803aa08a36dff8485f39d0859df51":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["406bc9b8259803aa08a36dff8485f39d0859df51"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406bc9b8259803aa08a36dff8485f39d0859df51":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}