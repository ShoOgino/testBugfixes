{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    Map<String, DocCollection> states = getCollectionStates();\n    ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n    if (saveClusterState.getAndSet(false)) {\n      saveClusterState(state);\n    }\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    Map<String, DocCollection> states = getCollectionStates();\n    ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n    return state;\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    Map<String, DocCollection> states = getCollectionStates();\n    ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n    if (saveClusterState.getAndSet(false)) {\n      saveClusterState(state);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    lock.lock();\n    try {\n      Map<String, DocCollection> states = getCollectionStates();\n      ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n      return state;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    Map<String, DocCollection> states = getCollectionStates();\n    ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76ebb8ccd9ce24bddddc5bec621183fdec375769","date":1552676813,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    lock.lock();\n    try {\n      Map<String, DocCollection> states = getCollectionStates();\n      ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n      return state;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76ebb8ccd9ce24bddddc5bec621183fdec375769":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["76ebb8ccd9ce24bddddc5bec621183fdec375769"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"76ebb8ccd9ce24bddddc5bec621183fdec375769":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["76ebb8ccd9ce24bddddc5bec621183fdec375769"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}