{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPointDistanceFeatureQuery#testCompareSorting().mjava","commits":[{"id":"607e7af5082700f0a5d1b5e92452084cf94058d4","date":1537346996,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPointDistanceFeatureQuery#testCompareSorting().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompareSorting() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n\n    Document doc = new Document();\n    LatLonPoint point = new LatLonPoint(\"foo\", 0., 0.);\n    doc.add(point);\n    LatLonDocValuesField docValue = new LatLonDocValuesField(\"foo\", 0., 0.);\n    doc.add(docValue);\n\n    int numDocs = atLeast(10000);\n    for (int i = 0; i < numDocs; ++i) {\n      double lat = random().nextDouble() * 180 - 90;\n      double lon = random().nextDouble() * 360 - 180;\n      point.setLocationValue(lat, lon);\n      docValue.setLocationValue(lat, lon);\n      w.addDocument(doc);\n    }\n\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    double lat = random().nextDouble() * 180 - 90;\n    double lon = random().nextDouble() * 360 - 180;\n    double  pivotDistance = random().nextDouble() * random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI;\n    float boost = (1 + random().nextInt(10)) / 3f;\n\n    Query query1 = LatLonPoint.newDistanceFeatureQuery(\"foo\", boost, lat, lon, pivotDistance);\n    Sort sort1 = new Sort(SortField.FIELD_SCORE, LatLonDocValuesField.newDistanceSort(\"foo\", lat, lon));\n\n    Query query2 = new MatchAllDocsQuery();\n    Sort sort2 = new Sort(LatLonDocValuesField.newDistanceSort(\"foo\", lat, lon));\n\n    TopDocs topDocs1 = searcher.search(query1, 10, sort1);\n    TopDocs topDocs2 = searcher.search(query2, 10, sort2);\n    for (int i =0; i< 10; i++) {\n      assertTrue(topDocs1.scoreDocs[i].doc == topDocs2.scoreDocs[i].doc);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607e7af5082700f0a5d1b5e92452084cf94058d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607e7af5082700f0a5d1b5e92452084cf94058d4"]},"commit2Childs":{"607e7af5082700f0a5d1b5e92452084cf94058d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607e7af5082700f0a5d1b5e92452084cf94058d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}