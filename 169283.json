{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","commits":[{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#XtestCompositePk_DeltaImport_replace_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void XtestCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    super.runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#XtestCompositePk_DeltaImport_replace_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void XtestCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    super.runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testCompositePk_DeltaImport_replace_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_replace_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_replace_delete\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"c26f00b574427b55127e869b935845554afde1fa":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}