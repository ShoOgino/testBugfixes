{"path":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n\t\tTopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n\t\tTopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n                if (VERBOSE) {\n                  System.out.println(\"TEST: query=\" + q);\n                }\n                TopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n\t\tTopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n                if (VERBOSE) {\n                  System.out.println(\"TEST: query=\" + q);\n                }\n                TopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n\t\tTopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n                if (VERBOSE) {\n                  System.out.println(\"TEST: query=\" + q);\n                }\n                TopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n\t\tTopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        org.apache.lucene.document.Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"\tprivate void dumpResults(String qType,Query q, int numDocs) throws IOException\n\t{\n                if (VERBOSE) {\n                  System.out.println(\"TEST: query=\" + q);\n                }\n                TopDocs hits = searcher.search(q, null, numDocs);\n\t\tassertTrue(qType +\" should produce results \", hits.totalHits>0);\n\t\tif(VERBOSE)\n\t\t{\n\t\t\tSystem.out.println(\"=========\"+qType+\"============\");\n\t\t\tScoreDoc[] scoreDocs = hits.scoreDocs;\n\t\t\tfor(int i=0;i<Math.min(numDocs,hits.totalHits);i++)\n\t\t\t{\n\t\t\t\torg.apache.lucene.document.Document ldoc=searcher.doc(scoreDocs[i].doc);\n\t\t\t\tSystem.out.println(\"[\"+ldoc.get(\"date\")+\"]\"+ldoc.get(\"contents\"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        org.apache.lucene.document.Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}