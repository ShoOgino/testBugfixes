{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","commits":[{"id":"198966886b1666a28e299aeb05a224d8579ee1da","date":1460030082,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath,\n      final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          logger.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":5,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path rootPath, final String zkPath,\n                         final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath,\n      final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          logger.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","sourceNew":null,"sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath,\n      final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          logger.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["198966886b1666a28e299aeb05a224d8579ee1da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"198966886b1666a28e299aeb05a224d8579ee1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["198966886b1666a28e299aeb05a224d8579ee1da","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"]},"commit2Childs":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["198966886b1666a28e299aeb05a224d8579ee1da"],"198966886b1666a28e299aeb05a224d8579ee1da":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}