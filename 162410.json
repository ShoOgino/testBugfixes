{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#verifySort(BKDConfig,HeapPointWriter,int,int).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#verifySort(BKDConfig,HeapPointWriter,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#verifySort(HeapPointWriter,int,int,int,int,int).mjava","sourceNew":"  private void verifySort(BKDConfig config, HeapPointWriter points,int start, int end) throws IOException{\n    Directory dir = newDirectory();\n    BKDRadixSelector radixSelector = new BKDRadixSelector(config, 1000, dir, \"test\");\n    // we check for each dimension\n    for (int splitDim = 0; splitDim < config.numDims; splitDim++) {\n      radixSelector.heapRadixSort(points, start, end, splitDim, getRandomCommonPrefix(config, points, start, end, splitDim));\n      byte[] previous = new byte[config.packedBytesLength];\n      int previousDocId = -1;\n      Arrays.fill(previous, (byte) 0);\n      int dimOffset = splitDim * config.bytesPerDim;\n      for (int j = start; j < end; j++) {\n        PointValue pointValue = points.getPackedValueSlice(j);\n        BytesRef value = pointValue.packedValue();\n        int cmp = Arrays.compareUnsigned(value.bytes, value.offset + dimOffset, value.offset + dimOffset + config.bytesPerDim, previous, dimOffset, dimOffset + config.bytesPerDim);\n        assertTrue(cmp >= 0);\n        if (cmp == 0) {\n          int dataOffset = config.numIndexDims * config.bytesPerDim;\n          cmp = Arrays.compareUnsigned(value.bytes, value.offset + dataOffset, value.offset + config.packedBytesLength, previous, dataOffset, config.packedBytesLength);\n          assertTrue(cmp >= 0);\n        }\n        if (cmp == 0) {\n          assertTrue(pointValue.docID() >= previousDocId);\n        }\n        System.arraycopy(value.bytes, value.offset, previous, 0, config.packedBytesLength);\n        previousDocId = pointValue.docID();\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  private void verifySort(HeapPointWriter points, int dataDimensions, int indexDimensions, int start, int end, int bytesPerDim) throws IOException{\n    int packedBytesLength = dataDimensions * bytesPerDim;\n    Directory dir = newDirectory();\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, indexDimensions, bytesPerDim, 1000, dir, \"test\");\n    // we check for each dimension\n    for (int splitDim = 0; splitDim < dataDimensions; splitDim++) {\n      radixSelector.heapRadixSort(points, start, end, splitDim, getRandomCommonPrefix(points, start, end, bytesPerDim, splitDim));\n      byte[] previous = new byte[bytesPerDim * dataDimensions];\n      int previousDocId = -1;\n      Arrays.fill(previous, (byte) 0);\n      int dimOffset = splitDim * bytesPerDim;\n      for (int j = start; j < end; j++) {\n        PointValue pointValue = points.getPackedValueSlice(j);\n        BytesRef value = pointValue.packedValue();\n        int cmp = Arrays.compareUnsigned(value.bytes, value.offset + dimOffset, value.offset + dimOffset + bytesPerDim, previous, dimOffset, dimOffset + bytesPerDim);\n        assertTrue(cmp >= 0);\n        if (cmp == 0) {\n          int dataOffset = indexDimensions * bytesPerDim;\n          cmp = Arrays.compareUnsigned(value.bytes, value.offset + dataOffset, value.offset + packedBytesLength, previous, dataOffset, packedBytesLength);\n          assertTrue(cmp >= 0);\n        }\n        if (cmp == 0) {\n          assertTrue(pointValue.docID() >= previousDocId);\n        }\n        System.arraycopy(value.bytes, value.offset, previous, 0, packedBytesLength);\n        previousDocId = pointValue.docID();\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}