{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(UHComponents,Analyzer,Function[Query,Collection[Query]]).mjava","commits":[{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(UHComponents,Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"/dev/null","sourceNew":"  public MemoryIndexOffsetStrategy(UHComponents components, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(components, analyzer);\n    boolean storePayloads = components.getPhraseHelper().hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    memIndexLeafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(components, multiTermQueryRewrite);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(UHComponents,Analyzer).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(UHComponents,Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":"  public MemoryIndexOffsetStrategy(UHComponents components, Analyzer analyzer) {\n    super(components, analyzer);\n    boolean storePayloads = components.getPhraseHelper().hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    memIndexLeafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(components);\n  }\n\n","sourceOld":"  public MemoryIndexOffsetStrategy(UHComponents components, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(components, analyzer);\n    boolean storePayloads = components.getPhraseHelper().hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    memIndexLeafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(components, multiTermQueryRewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}