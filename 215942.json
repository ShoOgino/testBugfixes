{"path":"lucene/misc/src/test/org/apache/lucene/document/TestInetAddressPoint#testQueryEquals().mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestInetAddressPoint#testQueryEquals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testQueryEquals().mjava","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q1, q2;\n    q1 = InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    q2 = InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.7\"))));\n    assertFalse(q1.equals(InetAddressPoint.newRangeQuery(\"b\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"))));\n\n    q1 = InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), 16);\n    q2 = InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), 16);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.1.3.5\"), 16)));\n    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.5\"), 24)));\n\n    q1 = InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"));\n    q2 = InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.5\"))));\n\n    q1 = InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    q2 = InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.7\"))));\n  }\n\n","sourceOld":"  public void testQueryEquals() throws Exception {\n    Query q1, q2;\n    q1 = InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    q2 = InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.7\"))));\n    assertFalse(q1.equals(InetAddressPoint.newRangeQuery(\"b\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"))));\n\n    q1 = InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), 16);\n    q2 = InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), 16);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.1.3.5\"), 16)));\n    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.5\"), 24)));\n\n    q1 = InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"));\n    q2 = InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newExactQuery(\"a\", InetAddress.getByName(\"1.2.3.5\"))));\n\n    q1 = InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    q2 = InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.5\"));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(InetAddressPoint.newSetQuery(\"a\", InetAddress.getByName(\"1.2.3.3\"), InetAddress.getByName(\"1.2.3.7\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}