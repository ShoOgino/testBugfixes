{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    //Add sensible defaults\n\n    if(!params.containsKey(\"q\")) {\n      params.put(\"q\", \"*:*\");\n    }\n\n    if(!params.containsKey(\"fl\")) {\n      params.put(\"fl\", \"*\");\n    }\n\n    if(!params.containsKey(\"rows\")) {\n      params.put(\"rows\", \"500\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","sourceOld":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomFacadeStream#RandomFacadeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    //Add sensible defaults\n\n    if(!params.containsKey(\"q\")) {\n      params.put(\"q\", \"*:*\");\n    }\n\n    if(!params.containsKey(\"fl\")) {\n      params.put(\"fl\", \"*\");\n    }\n\n    if(!params.containsKey(\"rows\")) {\n      params.put(\"rows\", \"500\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","sourceOld":"  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    if(params.get(ROWS) != null) {\n      int rows = Integer.parseInt(params.get(ROWS));\n      if(rows >= 5000) {\n        DeepRandomStream deepRandomStream = new DeepRandomStream();\n        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));\n        this.innerStream = deepRandomStream;\n      } else {\n        RandomStream randomStream = new RandomStream();\n        randomStream.init(zkHost, collectionName, params);\n        this.innerStream = randomStream;\n      }\n    } else {\n      RandomStream randomStream = new RandomStream();\n      randomStream.init(zkHost, collectionName, params);\n      this.innerStream = randomStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["6fa0fff8102ba352427001188190711b7295a1c2"],"6fa0fff8102ba352427001188190711b7295a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7107555998ea86d6f61e2ad770687d674fa8e012":["6fa0fff8102ba352427001188190711b7295a1c2","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fa0fff8102ba352427001188190711b7295a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fa0fff8102ba352427001188190711b7295a1c2":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7107555998ea86d6f61e2ad770687d674fa8e012","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}