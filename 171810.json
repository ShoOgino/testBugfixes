{"path":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd9165e54429bb5c99e75d5cb1c926cc98772456","date":1337362687,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[String,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<String,TermsHashConsumerPerField> childFields = new HashMap<String,TermsHashConsumerPerField>();\n    Map<String,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<String,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<String,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[String,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<String,TermsHashConsumerPerField> childFields = new HashMap<String,TermsHashConsumerPerField>();\n    Map<String,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<String,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<String,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}