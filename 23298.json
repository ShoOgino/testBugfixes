{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","commits":[{"id":"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff","date":1471003412,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2010e2591e2d11678b59291d2ab31bd30e3ac7","date":1559150835,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","sourceNew":"  private void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","sourceNew":"  private void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":"  private static void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#waitFor(String,long,TimeUnit,Callable[Boolean]).mjava","sourceNew":"  private void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    \n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","sourceOld":"  private void waitFor(String message, long timeout, TimeUnit unit, Callable<Boolean> predicate)\n      throws InterruptedException, ExecutionException {\n    Future<Boolean> future = executor.submit(() -> {\n      try {\n        while (true) {\n          if (predicate.call())\n            return true;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n      }\n      catch (InterruptedException e) {\n        return false;\n      }\n    });\n    try {\n      if (future.get(timeout, unit) == true) {\n        return;\n      }\n    }\n    catch (TimeoutException e) {\n      // pass failure message on\n    }\n    future.cancel(true);\n    fail(message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7b366e7dd3172289251a86be96031af4002cd19c":["ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","ad2010e2591e2d11678b59291d2ab31bd30e3ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","7b366e7dd3172289251a86be96031af4002cd19c"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}