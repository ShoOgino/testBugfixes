{"path":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#waitingForReplicasNotLive(ZkStateReader,int,List[JettySolrRunner]).mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#waitingForReplicasNotLive(ZkStateReader,int,List[JettySolrRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitingForReplicasNotLive(ZkStateReader zkStateReader, int timeoutInMs, List<JettySolrRunner> jetties) {\n    Set<String> nodeNames = jetties.stream()\n        .filter(jetty -> jetty.getCoreContainer() != null)\n        .map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                if (nodeNames.contains(replica.getNodeName())) {\n                  boolean live = clusterState.liveNodesContain(replica\n                      .getNodeName());\n                  if (live) {\n                    success = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#waitingForReplicasNotLive(ZkStateReader,int,List[JettySolrRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitingForReplicasNotLive(ZkStateReader zkStateReader, int timeoutInMs, List<JettySolrRunner> jetties) {\n    Set<String> nodeNames = jetties.stream()\n        .filter(jetty -> jetty.getCoreContainer() != null)\n        .map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                if (nodeNames.contains(replica.getNodeName())) {\n                  boolean live = clusterState.liveNodesContain(replica\n                      .getNodeName());\n                  if (live) {\n                    success = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#waitingForReplicasNotLive(ZkStateReader,int,List[JettySolrRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitingForReplicasNotLive(ZkStateReader zkStateReader, int timeoutInMs, List<JettySolrRunner> jetties) {\n    Set<String> nodeNames = jetties.stream()\n        .filter(jetty -> jetty.getCoreContainer() != null)\n        .map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                if (nodeNames.contains(replica.getNodeName())) {\n                  boolean live = clusterState.liveNodesContain(replica\n                      .getNodeName());\n                  if (live) {\n                    success = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}