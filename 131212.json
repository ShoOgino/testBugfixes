{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect(long,TimeUnit).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, getClusterStateProvider());\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", getClusterStateProvider());\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, stateProvider);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", stateProvider);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect(long,TimeUnit).mjava","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, getClusterStateProvider());\n    }\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        if (log.isInfoEnabled()) {\n          log.info(\"Cluster at {} ready\", getClusterStateProvider());\n        }\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, getClusterStateProvider());\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", getClusterStateProvider());\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}