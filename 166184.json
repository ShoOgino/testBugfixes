{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","commits":[{"id":"0c13ac3312389224caec142b1fa4e837caa80ee0","date":1279383717,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","pathOld":"/dev/null","sourceNew":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = (long) random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","pathOld":"/dev/null","sourceNew":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = (long) random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","sourceNew":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","sourceOld":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = (long) random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","sourceNew":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","sourceOld":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = (long) random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#executeOneRandomSplit(Random).mjava","sourceNew":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","sourceOld":"  private void executeOneRandomSplit(final Random random) throws Exception {\n    long lower = randomLong(random);\n    long len = random.nextInt(16384*1024); // not too large bitsets, else OOME!\n    while (lower + len < lower) { // overflow\n      lower >>= 1;\n    }\n    assertLongRangeSplit(lower, lower + len, random.nextInt(64) + 1, true, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c13ac3312389224caec142b1fa4e837caa80ee0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","0c13ac3312389224caec142b1fa4e837caa80ee0"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}