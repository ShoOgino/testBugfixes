{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(SolrParams,SolrParams).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(SolrParams,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given some query params, executes the request against the cloudClient and \n   * then walks the pivot facet values in the response, treating each one as a \n   * filter query to assert the pivot counts are correct.\n   */\n  private void assertPivotCountsAreCorrect(SolrParams baseParams, \n                                           SolrParams pivotParams) \n    throws SolrServerException {\n    \n    SolrParams initParams = SolrParams.wrapAppended(pivotParams, baseParams);\n\n    log.info(\"Doing full run: {}\", initParams);\n    countNumFoundChecks = 0;\n\n    NamedList<List<PivotField>> pivots = null;\n    try {\n      QueryResponse initResponse = cloudClient.query(initParams);\n      pivots = initResponse.getFacetPivot();\n      assertNotNull(initParams + \" has null pivots?\", pivots);\n      assertEquals(initParams + \" num pivots\", \n                   initParams.getParams(\"facet.pivot\").length, pivots.size());\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      for (Map.Entry<String,List<PivotField>> pivot : pivots) {\n        final String pivotKey = pivot.getKey();\n        // :HACK: for counting the max possible pivot depth\n        final int maxDepth = 1 + pivotKey.length() - pivotKey.replace(\",\",\"\").length();\n\n        assertTraceOk(pivotKey, baseParams, pivot.getValue());\n\n        // NOTE: we can't make any assumptions/assertions about the number of\n        // constraints here because of the random data - which means if pivotting is\n        // completely broken and there are no constrains this loop could be a No-Op\n        // but in that case we just have to trust that DistributedFacetPivotTest\n        // will catch it.\n        for (PivotField constraint : pivot.getValue()) {\n          int depth = assertPivotCountsAreCorrect(pivotKey, baseParams, constraint);\n          \n          // we can't assert that the depth reached is the same as the depth requested\n          // because the fq and/or mincount may have pruned the tree too much\n          assertTrue(\"went too deep: \"+depth+\": \" + pivotKey + \" ==> \" + pivot,\n                     depth <= maxDepth);\n\n        }\n      }\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ==> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run (countNumFoundChecks={}): {}\", \n               countNumFoundChecks, initParams);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}