{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericField.DataType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericField.DataType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericField.DataType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericField.DataType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericField.DataType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericField.DataType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericField.DataType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericField.DataType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericField.DataType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericField.DataType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericField.DataType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericField.DataType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericField.DataType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericField.DataType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericField.DataType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericField.DataType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericField.DataType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericField.DataType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericField.DataType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericField.DataType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","bugFix":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}