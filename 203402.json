{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf","date":1402500925,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case BLOCK_COMPRESSED:\n          case GCD_COMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        entry.packedIntsVersion = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(fieldNumber,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case BLOCK_COMPRESSED:\n          case GCD_COMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        entry.packedIntsVersion = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(fieldNumber,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case BLOCK_COMPRESSED:\n          case GCD_COMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        entry.packedIntsVersion = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.missingOffset = meta.readLong();\n        if (entry.missingOffset != -1) {\n          entry.missingBytes = meta.readLong();\n        } else {\n          entry.missingBytes = 0;\n        }\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(info.name, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(info.name,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", fieldName=\" + info.name + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(fieldNumber,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(info.name, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(info.name,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", fieldName=\" + info.name, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(info.name, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(info.name,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", fieldName=\" + info.name + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","bugFix":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(info.name, readBinaryEntry(meta));\n      } else if (fieldType == FST) {\n        fsts.put(info.name,readFSTEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = false;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = new SortedSetEntry();\n        entry.singleton = true;\n        sortedSets.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = false;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.addressOffset = meta.readLong();\n        entry.valueCount = meta.readLong();\n        sortedNumerics.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = new SortedNumericEntry();\n        entry.singleton = true;\n        sortedNumerics.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", fieldName=\" + info.name, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0936055c0eed56be3e4ae5c9db5b0e355390736a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}