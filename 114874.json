{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(LightAutomaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72","date":1427479616,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix, which can be an empty (length 0) String (never null)\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix, which can be an empty (length 0) String (never null)\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c84485629d80d203608e8975a1139de9933cc38","b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"],"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}