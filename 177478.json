{"path":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTf) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (this.storeTermVector != storeTermVector) {\n      this.storeTermVector = true;                // once vector, always vector\n    }\n    if (this.storePositionWithTermVector != storePositionWithTermVector) {\n      this.storePositionWithTermVector = true;                // once vector, always vector\n    }\n    if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n      this.storeOffsetWithTermVector = true;                // once vector, always vector\n    }\n    if (this.omitNorms != omitNorms) {\n      this.omitNorms = false;                // once norms are stored, always store\n    }\n    if (this.omitTf != omitTf) {\n      this.omitTf = true;                // if one require omitTf at least once, it remains off for life\n    }\n    if (this.storePayloads != storePayloads) {\n      this.storePayloads = true;\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (this.storeTermVector != storeTermVector) {\n      this.storeTermVector = true;                // once vector, always vector\n    }\n    if (this.storePositionWithTermVector != storePositionWithTermVector) {\n      this.storePositionWithTermVector = true;                // once vector, always vector\n    }\n    if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n      this.storeOffsetWithTermVector = true;                // once vector, always vector\n    }\n    if (this.omitNorms != omitNorms) {\n      this.omitNorms = false;                // once norms are stored, always store\n    }\n    if (this.storePayloads != storePayloads) {\n      this.storePayloads = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (this.storeTermVector != storeTermVector) {\n      this.storeTermVector = true;                // once vector, always vector\n    }\n    if (this.storePositionWithTermVector != storePositionWithTermVector) {\n      this.storePositionWithTermVector = true;                // once vector, always vector\n    }\n    if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n      this.storeOffsetWithTermVector = true;                // once vector, always vector\n    }\n    if (this.omitNorms != omitNorms) {\n      this.omitNorms = false;                // once norms are stored, always store\n    }\n    if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n      this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n    }\n    if (this.storePayloads != storePayloads) {\n      this.storePayloads = true;\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTf) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (this.storeTermVector != storeTermVector) {\n      this.storeTermVector = true;                // once vector, always vector\n    }\n    if (this.storePositionWithTermVector != storePositionWithTermVector) {\n      this.storePositionWithTermVector = true;                // once vector, always vector\n    }\n    if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n      this.storeOffsetWithTermVector = true;                // once vector, always vector\n    }\n    if (this.omitNorms != omitNorms) {\n      this.omitNorms = false;                // once norms are stored, always store\n    }\n    if (this.omitTf != omitTf) {\n      this.omitTf = true;                // if one require omitTf at least once, it remains off for life\n    }\n    if (this.storePayloads != storePayloads) {\n      this.storePayloads = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (this.storeTermVector != storeTermVector) {\n      this.storeTermVector = true;                // once vector, always vector\n    }\n    if (this.storePositionWithTermVector != storePositionWithTermVector) {\n      this.storePositionWithTermVector = true;                // once vector, always vector\n    }\n    if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n      this.storeOffsetWithTermVector = true;                // once vector, always vector\n    }\n    if (this.omitNorms != omitNorms) {\n      this.omitNorms = false;                // once norms are stored, always store\n    }\n    if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n      this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n    }\n    if (this.storePayloads != storePayloads) {\n      this.storePayloads = true;\n    }\n  }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474","902ba79f4590a41c663c447756d2e5041cbbdda9","066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"]},"commit2Childs":{"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}