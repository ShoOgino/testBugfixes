{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest#testGetServiceSkeletonInvoker().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest#testGetServiceSkeletonInvoker().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest#testGetServiceSkeletonInvoker().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProviderImpl.getServiceSkeletonInvoker(HttpServletRequest)'\n     */\n    public void testGetServiceSkeletonInvoker() {\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathSuccess);\n        this.mockControl.replay();\n        assertNotNull(this.provider\n                .getServiceSkeletonInvoker(this.mockedRequest));\n        this.mockControl.verify();\n        this.mockControl.reset();\n\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathFail);\n        this.mockControl.replay();\n        try {\n            assertNotNull(this.provider\n                    .getServiceSkeletonInvoker(this.mockedRequest));\n            fail(\"Service should not be found\");\n        } catch (NoSuchServiceException e) {\n            //\n        }\n        this.mockControl.verify();\n        this.mockControl.reset();\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProviderImpl.getServiceSkeletonInvoker(HttpServletRequest)'\n     */\n    public void testGetServiceSkeletonInvoker() {\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathSuccess);\n        this.mockControl.replay();\n        assertNotNull(this.provider\n                .getServiceSkeletonInvoker(this.mockedRequest));\n        this.mockControl.verify();\n        this.mockControl.reset();\n\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathFail);\n        this.mockControl.replay();\n        try {\n            assertNotNull(this.provider\n                    .getServiceSkeletonInvoker(this.mockedRequest));\n            fail(\"Service should not be found\");\n        } catch (NoSuchServiceException e) {\n            //\n        }\n        this.mockControl.verify();\n        this.mockControl.reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba03885267df05f9d7b278c8170dbf46fe161f10","date":1166013436,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest#testGetServiceSkeletonInvoker().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProviderImpl.getServiceSkeletonInvoker(HttpServletRequest)'\n     */\n    public void testGetServiceSkeletonInvoker() {\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathSuccess);\n        this.mockControl.replay();\n        assertNotNull(this.provider\n                .getServiceSkeletonInvoker(this.mockedRequest));\n        this.mockControl.verify();\n        this.mockControl.reset();\n\n        this.mockControl.expectAndDefaultReturn(this.mockedRequest\n                .getPathInfo(), testPathFail);\n        this.mockControl.replay();\n        try {\n            assertNotNull(this.provider\n                    .getServiceSkeletonInvoker(this.mockedRequest));\n            fail(\"Service should not be found\");\n        } catch (NoSuchServiceException e) {\n            //\n        }\n        this.mockControl.verify();\n        this.mockControl.reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba03885267df05f9d7b278c8170dbf46fe161f10":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba03885267df05f9d7b278c8170dbf46fe161f10"]},"commit2Childs":{"ba03885267df05f9d7b278c8170dbf46fe161f10":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["ba03885267df05f9d7b278c8170dbf46fe161f10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}