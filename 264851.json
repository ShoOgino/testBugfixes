{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, TermContext termStates)\n        throws IOException {\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,int,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, int postingsFlags, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.postingsFlags = postingsFlags;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,int,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, int postingsFlags, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.postingsFlags = postingsFlags;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"721230395a78975958098de53098f4520729619d","date":1432106709,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      \n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      this.stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(term.field()),\n          searcher.termStatistics(term, termStates));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a677e88529303e630fb314d1506ea0cdb40f00","date":1432211402,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      \n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      \n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      \n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(getBoost(), collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":null,"sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      // checked with a real exception in TermQuery constructor\n      assert termStates.hasOnlyRealTerms();\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["485545da3b4429d6f138b4baac573a97820ee93b"],"485545da3b4429d6f138b4baac573a97820ee93b":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["17a677e88529303e630fb314d1506ea0cdb40f00"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["2dfdf766e55e943d942055d7de53c7ad6bc45283","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"17a677e88529303e630fb314d1506ea0cdb40f00":["721230395a78975958098de53098f4520729619d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"721230395a78975958098de53098f4520729619d":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["721230395a78975958098de53098f4520729619d"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"485545da3b4429d6f138b4baac573a97820ee93b":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["485545da3b4429d6f138b4baac573a97820ee93b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17a677e88529303e630fb314d1506ea0cdb40f00":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"721230395a78975958098de53098f4520729619d":["17a677e88529303e630fb314d1506ea0cdb40f00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}