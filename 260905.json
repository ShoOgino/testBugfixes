{"path":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653128722fb3b4713ac331c621491a93f34a4a22","date":1479841816,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#mergeNormsField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","sourceOld":"  /**\n   * Merges the norms from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNormsField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNormsField(final FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    // TODO: try to share code with default merge of DVConsumer by passing MatchAllBits ?\n    addNormsField(mergeFieldInfo,\n                  new NormsProducer() {\n                    @Override\n                    public NumericDocValues getNorms(FieldInfo fieldInfo) throws IOException {\n                      if (fieldInfo != mergeFieldInfo) {\n                        throw new IllegalArgumentException(\"wrong fieldInfo\");\n                      }\n\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == mergeState.docValuesProducers.length;\n                        for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                          NumericDocValues norms = null;\n                          NormsProducer normsProducer = mergeState.normsProducers[i];\n                          if (normsProducer != null) {\n                            FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                            if (readerFieldInfo != null && readerFieldInfo.hasNorms()) {\n                              norms = normsProducer.getNorms(readerFieldInfo);\n                            }\n                          }\n\n                          if (norms != null) {\n                            subs.add(new NumericDocValuesSub(mergeState.docMaps[i], norms));\n                          }\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                        return new NumericDocValues() {\n                          private int docID = -1;\n                          private NumericDocValuesSub current;\n\n                          @Override\n                          public int docID() {\n                            return docID;\n                          }\n\n                          @Override\n                          public int nextDoc() throws IOException {\n                            current = docIDMerger.next();\n                            if (current == null) {\n                              docID = NO_MORE_DOCS;\n                            } else {\n                              docID = current.mappedDocID;\n                            }\n                            return docID;\n                          }\n\n                          @Override\n                          public int advance(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public boolean advanceExact(int target) throws IOException {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public long cost() {\n                            return 0;\n                          }\n\n                          @Override\n                          public long longValue() throws IOException {\n                            return current.values.longValue();\n                          }\n                        };\n                    }\n                    \n                    @Override\n                    public void checkIntegrity() {\n                    }\n\n                    @Override\n                    public void close() {\n                    }\n\n                    @Override\n                    public long ramBytesUsed() {\n                      return 0;\n                    }\n                  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["653128722fb3b4713ac331c621491a93f34a4a22"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d217880fb207e1a26143863d06cf461c7cabeec"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","d85b6e22926e7564c040d2a864f4887f6c59fa92"],"727bb765ff2542275f6d31f67be18d7104bae148":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["5d217880fb207e1a26143863d06cf461c7cabeec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"653128722fb3b4713ac331c621491a93f34a4a22":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["5d217880fb207e1a26143863d06cf461c7cabeec","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["727bb765ff2542275f6d31f67be18d7104bae148"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"653128722fb3b4713ac331c621491a93f34a4a22":["d85b6e22926e7564c040d2a864f4887f6c59fa92","727bb765ff2542275f6d31f67be18d7104bae148"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}