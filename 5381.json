{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate.TimSort#nextRun().mjava","commits":[{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate.TimSort#nextRun().mjava","pathOld":"/dev/null","sourceNew":"    /** Compute the length of the next run, make the run sorted and return its\n     *  length. */\n    int nextRun() {\n      final int runBase = runEnd(0);\n      if (runBase == hi) {\n        return 1;\n      }\n      int l = 1; // length of the run\n      if (compare(runBase, runBase+1) > 0) {\n        // run must be strictly descending\n        while (runBase + l <= hi && compare(runBase + l - 1, runBase + l) > 0) {\n          ++l;\n        }\n        if (l < minRun && runBase + l <= hi) {\n          l = Math.min(hi - runBase + 1, minRun);\n          binarySort(runBase, runBase + l - 1);\n        } else {\n          // revert\n          for (int i = 0, halfL = l >>> 1; i < halfL; ++i) {\n            swap(runBase + i, runBase + l - i - 1);\n          }\n        }\n      } else {\n        // run must be non-descending\n        while (runBase + l <= hi && compare(runBase + l - 1, runBase + l) <= 0) {\n          ++l;\n        }\n        if (l < minRun && runBase + l <= hi) {\n          l = Math.min(hi - runBase + 1, minRun);\n          binarySort(runBase, runBase + l - 1);\n        } // else nothing to do, the run is already sorted\n      }\n      return l;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate.TimSort#nextRun().mjava","sourceNew":null,"sourceOld":"    /** Compute the length of the next run, make the run sorted and return its\n     *  length. */\n    int nextRun() {\n      final int runBase = runEnd(0);\n      if (runBase == hi) {\n        return 1;\n      }\n      int l = 1; // length of the run\n      if (compare(runBase, runBase+1) > 0) {\n        // run must be strictly descending\n        while (runBase + l <= hi && compare(runBase + l - 1, runBase + l) > 0) {\n          ++l;\n        }\n        if (l < minRun && runBase + l <= hi) {\n          l = Math.min(hi - runBase + 1, minRun);\n          binarySort(runBase, runBase + l - 1);\n        } else {\n          // revert\n          for (int i = 0, halfL = l >>> 1; i < halfL; ++i) {\n            swap(runBase + i, runBase + l - i - 1);\n          }\n        }\n      } else {\n        // run must be non-descending\n        while (runBase + l <= hi && compare(runBase + l - 1, runBase + l) <= 0) {\n          ++l;\n        }\n        if (l < minRun && runBase + l <= hi) {\n          l = Math.min(hi - runBase + 1, minRun);\n          binarySort(runBase, runBase + l - 1);\n        } // else nothing to do, the run is already sorted\n      }\n      return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}