{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","sourceNew":"  /**\n   * Reads an automaton from a file. \n   */\n  public static <T> FST<T> read(File file, Outputs<T> outputs) throws IOException {\n    InputStream is = new BufferedInputStream(new FileInputStream(file));\n    boolean success = false;\n    try {\n      FST<T> fst = new FST<T>(new InputStreamDataInput(is), outputs);\n      success = true;\n      return fst;\n    } finally {\n      if (success) { \n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is); \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads an automaton from a file. \n   */\n  public static <T> FST<T> read(File file, Outputs<T> outputs) throws IOException {\n    InputStream is = new BufferedInputStream(new FileInputStream(file));\n    boolean success = false;\n    try {\n      FST<T> fst = new FST<T>(new InputStreamDataInput(is), outputs);\n      success = true;\n      return fst;\n    } finally {\n      if (success) { \n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","sourceNew":"  /**\n   * Reads an automaton from a file. \n   */\n  public static <T> FST<T> read(File file, Outputs<T> outputs) throws IOException {\n    InputStream is = new BufferedInputStream(new FileInputStream(file));\n    boolean success = false;\n    try {\n      FST<T> fst = new FST<>(new InputStreamDataInput(is), outputs);\n      success = true;\n      return fst;\n    } finally {\n      if (success) { \n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is); \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads an automaton from a file. \n   */\n  public static <T> FST<T> read(File file, Outputs<T> outputs) throws IOException {\n    InputStream is = new BufferedInputStream(new FileInputStream(file));\n    boolean success = false;\n    try {\n      FST<T> fst = new FST<T>(new InputStreamDataInput(is), outputs);\n      success = true;\n      return fst;\n    } finally {\n      if (success) { \n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#[T]_read(File,Outputs[T]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads an automaton from a file. \n   */\n  public static <T> FST<T> read(File file, Outputs<T> outputs) throws IOException {\n    InputStream is = new BufferedInputStream(new FileInputStream(file));\n    boolean success = false;\n    try {\n      FST<T> fst = new FST<>(new InputStreamDataInput(is), outputs);\n      success = true;\n      return fst;\n    } finally {\n      if (success) { \n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f4abec28b874149a7223e32cc7a01704c27790de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}