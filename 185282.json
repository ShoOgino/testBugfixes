{"path":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}