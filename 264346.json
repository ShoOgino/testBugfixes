{"path":"lucene/backwards/src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List[Term[]],List[Term[]]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List[Term[]],List[Term[]]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List[Term[]],List[Term[]]).mjava","sourceNew":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List<Term[]> termArrays1, List<Term[]> termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator<Term[]> iterator1 = termArrays1.listIterator();\n    ListIterator<Term[]> iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = iterator1.next();\n      Term[] termArray2 = iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List<Term[]> termArrays1, List<Term[]> termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator<Term[]> iterator1 = termArrays1.listIterator();\n    ListIterator<Term[]> iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = iterator1.next();\n      Term[] termArray2 = iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List[Term[]],List[Term[]]).mjava","sourceNew":null,"sourceOld":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List<Term[]> termArrays1, List<Term[]> termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator<Term[]> iterator1 = termArrays1.listIterator();\n    ListIterator<Term[]> iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = iterator1.next();\n      Term[] termArray2 = iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}