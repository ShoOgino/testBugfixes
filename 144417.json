{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","commits":[{"id":"b10ab715806383f3d7f9eece13c26772a9116022","date":1517176579,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","pathOld":"/dev/null","sourceNew":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesHolder = zkStateReader.aliasesHolder;\n\n    aliasesHolder.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","sourceNew":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesManager = zkStateReader.aliasesManager;\n\n    aliasesManager.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","sourceOld":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesHolder = zkStateReader.aliasesHolder;\n\n    aliasesHolder.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","sourceNew":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1meta\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2meta\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesManager = zkStateReader.aliasesManager;\n\n    aliasesManager.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","sourceOld":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesManager = zkStateReader.aliasesManager;\n\n    aliasesManager.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","bugFix":["b10ab715806383f3d7f9eece13c26772a9116022"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#createColectionsAndAlias(String).mjava","sourceNew":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"collection1meta\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2meta\", 1, 1);\n\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesManager = zkStateReader.aliasesManager;\n\n    aliasesManager.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","sourceOld":"  private ZkStateReader createColectionsAndAlias(String aliasName) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(\"collection1meta\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2meta\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1meta\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2meta\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1meta\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2meta\", clusterShape(1, 1));\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.createClusterStateWatchersAndUpdate();\n    List<String> aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(1, aliases.size());\n    assertEquals(aliasName, aliases.get(0));\n    UnaryOperator<Aliases> op6 = a -> a.cloneWithCollectionAlias(aliasName, \"collection1meta,collection2meta\");\n    final ZkStateReader.AliasesManager aliasesManager = zkStateReader.aliasesManager;\n\n    aliasesManager.applyModificationAndExportToZk(op6);\n    aliases = zkStateReader.getAliases().resolveAliases(aliasName);\n    assertEquals(2, aliases.size());\n    assertEquals(\"collection1meta\", aliases.get(0));\n    assertEquals(\"collection2meta\", aliases.get(1));\n    return zkStateReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["b10ab715806383f3d7f9eece13c26772a9116022"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b10ab715806383f3d7f9eece13c26772a9116022":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b10ab715806383f3d7f9eece13c26772a9116022"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b10ab715806383f3d7f9eece13c26772a9116022":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}