{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#sortTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception { \n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n    \n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n    \n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n    \n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception { \n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n    \n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n    \n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n    \n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception {\n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n\n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n\n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n\n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception { \n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n    \n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n    \n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n    \n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#sortTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception {\n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n\n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n\n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n\n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void sortTest() throws Exception { \n    Collection<Double> lon = getDoubleList(\"sr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    ArrayList<Double> longTest = calculateNumberStat(intLongTestStart, \"mean\");\n    Collections.sort(longTest);\n    assertEquals(getRawResponse(), longTest,lon);\n    \n    Collection<Double> flo = getDoubleList(\"sr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    ArrayList<Double> floatTest = calculateNumberStat(intFloatTestStart, \"median\");\n    Collections.sort(floatTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), floatTest,flo);\n    \n    Collection<Long> doub = getLongList(\"sr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> doubleTest = (ArrayList<Long>)calculateStat(intDoubleTestStart, \"count\");\n    Collections.sort(doubleTest);\n    assertEquals(getRawResponse(), doubleTest,doub);\n    \n    Collection<Integer> string = getIntegerList(\"sr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    ArrayList<Integer> stringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    Collections.sort(stringTest,Collections.reverseOrder());\n    assertEquals(getRawResponse(), stringTest,string);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}