{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","commits":[{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffixesReader.skipBytes(code >>> 1);\n        if ((code & 1) != 0) {\n          final long subCode = suffixesReader.readVLong();\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n        }\n      } else {\n        int flag = code & 3;\n        suffixesReader.skipBytes(code >>> 2);\n        //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n        if (flag == 1) {\n          // Sub-block\n          final long subCode = suffixesReader.readVLong();\n          //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n          if (flag == 2 || flag == 3) {\n            // Floor'd prefix term\n            suffixesReader.readByte();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffixesReader.skipBytes(code >>> 1);\n        if ((code & 1) != 0) {\n          final long subCode = suffixesReader.readVLong();\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n        }\n      } else {\n        int flag = code & 3;\n        suffixesReader.skipBytes(code >>> 2);\n        //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n        if (flag == 1) {\n          // Sub-block\n          final long subCode = suffixesReader.readVLong();\n          //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n          if (flag == 2 || flag == 3) {\n            // Floor'd prefix term\n            suffixesReader.readByte();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5","date":1488285484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(code >>> 1);\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffixesReader.skipBytes(code >>> 1);\n        if ((code & 1) != 0) {\n          final long subCode = suffixesReader.readVLong();\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n        }\n      } else {\n        int flag = code & 3;\n        suffixesReader.skipBytes(code >>> 2);\n        //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n        if (flag == 1) {\n          // Sub-block\n          final long subCode = suffixesReader.readVLong();\n          //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n          if (flag == 2 || flag == 3) {\n            // Floor'd prefix term\n            suffixesReader.readByte();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixLengthsReader.readVInt();\n      suffixesReader.skipBytes(code >>> 1);\n      if ((code & 1) != 0) {\n        final long subCode = suffixLengthsReader.readVLong();\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(code >>> 1);\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"9407318969e8504257b4c5764c65755a043e5404":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["3e8715d826e588419327562287d5d6a8040d63d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}