{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    expectThrows(IllegalStateException.class, () -> {\n      sorter.add(new BytesRef(new byte [1]));\n    });\n\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7849935cc625c020857f3b29be91b5d4323d19aa","date":1458978426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    expectThrows(IllegalStateException.class, () -> {\n      sorter.add(new BytesRef(new byte [1]));\n    });\n\n    while (true) {\n      BytesRef spare1 = i1.next();\n      BytesRef spare2 = i2.next();\n      assertEquals(spare1, spare2);\n      if (spare1 == null) {\n        break;\n      }\n    }\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    expectThrows(IllegalStateException.class, () -> {\n      sorter.add(new BytesRef(new byte [1]));\n    });\n\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7849935cc625c020857f3b29be91b5d4323d19aa":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7849935cc625c020857f3b29be91b5d4323d19aa"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7849935cc625c020857f3b29be91b5d4323d19aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05fe562aa248790944d43cdd478f512572835ba0":["7849935cc625c020857f3b29be91b5d4323d19aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}