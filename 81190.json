{"path":"backwards/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","pathOld":"backwards/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","pathOld":"backwards/src/java/org/apache/lucene/messages/NLS#loadfieldValue(Field,boolean,Class[Object]).mjava","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<Object> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}