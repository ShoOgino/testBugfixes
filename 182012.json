{"path":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","commits":[{"id":"d79a074a316c6cd3908ca819cd98ad74d1e4dd30","date":1131491144,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new TestAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbfa5c2fb4f42edad7840dbcc987d1bf5cf5d64e","date":1131652192,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc10f21ee39e2c15d7a21300c0673e30e87dfd2f","date":1140028560,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc10f21ee39e2c15d7a21300c0673e30e87dfd2f":["dbfa5c2fb4f42edad7840dbcc987d1bf5cf5d64e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbfa5c2fb4f42edad7840dbcc987d1bf5cf5d64e":["d79a074a316c6cd3908ca819cd98ad74d1e4dd30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["fc10f21ee39e2c15d7a21300c0673e30e87dfd2f"],"d79a074a316c6cd3908ca819cd98ad74d1e4dd30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fc10f21ee39e2c15d7a21300c0673e30e87dfd2f":["ba1116b3450a9c1642c89445d131b37344055245"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d79a074a316c6cd3908ca819cd98ad74d1e4dd30"],"dbfa5c2fb4f42edad7840dbcc987d1bf5cf5d64e":["fc10f21ee39e2c15d7a21300c0673e30e87dfd2f"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"d79a074a316c6cd3908ca819cd98ad74d1e4dd30":["dbfa5c2fb4f42edad7840dbcc987d1bf5cf5d64e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}