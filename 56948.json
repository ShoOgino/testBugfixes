{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae46d105c94ea6ceb5201189bf9611bdef91b1b4","date":1310997409,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(reader, mlt.getFieldNames()[0]);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      rawMLTQuery = mlt.like(reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":["8d701c455e4783533e275f01bf3e813737b7e593"],"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4c215b0bf13f9a31643569e356468a5f1aee809","date":1401781915,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(mlt.getFieldNames()[0], reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(reader, mlt.getFieldNames()[0]);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c49644277f679076861896c254bd95b97909b74","date":1527241182,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // SOLR-5351: if only check against a single field, use the reader directly. Otherwise we\n      // repeat the stream's content for multiple fields so that query terms can be pulled from any\n      // of those fields.\n      String [] fields = mlt.getFieldNames();\n      if (fields.length == 1) {\n        rawMLTQuery = mlt.like(fields[0], reader);\n      } else {\n        CharsRefBuilder buffered = new CharsRefBuilder();\n        char [] chunk = new char [1024];\n        int len;\n        while ((len = reader.read(chunk)) >= 0) {\n          buffered.append(chunk, 0, len);\n        }\n\n        Collection<Object> streamValue = Collections.singleton(buffered.get().toString());\n        Map<String, Collection<Object>> multifieldDoc = new HashMap<>(fields.length);\n        for (String field : fields) {\n          multifieldDoc.put(field, streamValue);\n        }\n\n        rawMLTQuery = mlt.like(multifieldDoc);\n      }\n\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if (terms != null) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(mlt.getFieldNames()[0], reader);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet( boostedMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList( boostedMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4","c4c215b0bf13f9a31643569e356468a5f1aee809","fa96fdb58cefcada21fc51faf37114033f044f3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c49644277f679076861896c254bd95b97909b74":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c49644277f679076861896c254bd95b97909b74"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["0c49644277f679076861896c254bd95b97909b74"],"0c49644277f679076861896c254bd95b97909b74":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}