{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler#compile().mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler#compile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> compile() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler#compile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> compile() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}