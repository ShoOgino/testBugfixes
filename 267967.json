{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","commits":[{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"/dev/null","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Request says it is coming from leader, but we are the leader\");\n    }\n\n    if (DistribPhase.FROMLEADER == phase && from != null) { // from will be null on log replay\n     \n      ZkCoreNodeProps clusterStateLeader = new ZkCoreNodeProps(zkController\n          .getClusterState().getLeader(collection, shardId));\n    \n      if (clusterStateLeader.getNodeProps() == null\n          || !clusterStateLeader.getCoreUrl().equals(from)) {\n        String coreUrl = null;\n        if (clusterStateLeader.getNodeProps() != null) {\n          coreUrl = clusterStateLeader.getCoreUrl();\n        }\n        log.error(\"We got a request from the leader, but it's not who our cluster state says is the leader :\"\n            + req.getParamString()\n            + \" : \"\n            + coreUrl);\n\n        new SolrException(ErrorCode.BAD_REQUEST, \"We got a request from the leader, but it's not who our cluster state says is the leader.\");\n      }\n \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6776b3c3ed554ace17893a807da5b7a0a6d364c8","6776b3c3ed554ace17893a807da5b7a0a6d364c8","a6378064655e76cd7b908b1cab4ce425b384b508","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"/dev/null","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Request says it is coming from leader, but we are the leader\");\n    }\n\n    if (DistribPhase.FROMLEADER == phase && from != null) { // from will be null on log replay\n     \n      ZkCoreNodeProps clusterStateLeader = new ZkCoreNodeProps(zkController\n          .getClusterState().getLeader(collection, shardId));\n    \n      if (clusterStateLeader.getNodeProps() == null\n          || !clusterStateLeader.getCoreUrl().equals(from)) {\n        String coreUrl = null;\n        if (clusterStateLeader.getNodeProps() != null) {\n          coreUrl = clusterStateLeader.getCoreUrl();\n        }\n        log.error(\"We got a request from the leader, but it's not who our cluster state says is the leader :\"\n            + req.getParamString()\n            + \" : \"\n            + coreUrl);\n\n        new SolrException(ErrorCode.BAD_REQUEST, \"We got a request from the leader, but it's not who our cluster state says is the leader.\");\n      }\n \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","date":1346817835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n\n    // this is too restrictive - cluster state can be stale - can cause shard inconsistency\n//    if (DistribPhase.FROMLEADER == phase && from != null) { // from will be null on log replay\n//     \n//      ZkCoreNodeProps clusterStateLeader = new ZkCoreNodeProps(zkController\n//          .getClusterState().getLeader(collection, shardId));\n//    \n//      if (clusterStateLeader.getNodeProps() == null\n//          || !clusterStateLeader.getCoreUrl().equals(from)) {\n//        String coreUrl = null;\n//        if (clusterStateLeader.getNodeProps() != null) {\n//          coreUrl = clusterStateLeader.getCoreUrl();\n//        }\n//        log.error(\"We got a request from the leader, but it's not who our cluster state says is the leader :\"\n//            + req.getParamString()\n//            + \" : \"\n//            + coreUrl);\n//\n//        new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"We got a request from the leader, but it's not who our cluster state says is the leader.\");\n//      }\n// \n//    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Request says it is coming from leader, but we are the leader\");\n    }\n\n    if (DistribPhase.FROMLEADER == phase && from != null) { // from will be null on log replay\n     \n      ZkCoreNodeProps clusterStateLeader = new ZkCoreNodeProps(zkController\n          .getClusterState().getLeader(collection, shardId));\n    \n      if (clusterStateLeader.getNodeProps() == null\n          || !clusterStateLeader.getCoreUrl().equals(from)) {\n        String coreUrl = null;\n        if (clusterStateLeader.getNodeProps() != null) {\n          coreUrl = clusterStateLeader.getCoreUrl();\n        }\n        log.error(\"We got a request from the leader, but it's not who our cluster state says is the leader :\"\n            + req.getParamString()\n            + \" : \"\n            + coreUrl);\n\n        new SolrException(ErrorCode.BAD_REQUEST, \"We got a request from the leader, but it's not who our cluster state says is the leader.\");\n      }\n \n    }\n  }\n\n","bugFix":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":["6776b3c3ed554ace17893a807da5b7a0a6d364c8","6776b3c3ed554ace17893a807da5b7a0a6d364c8","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean logReplay = req.getParams().getBool(LOG_REPLAY, false);\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (!logReplay && DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n\n    // this is too restrictive - cluster state can be stale - can cause shard inconsistency\n//    if (DistribPhase.FROMLEADER == phase && from != null) { // from will be null on log replay\n//     \n//      ZkCoreNodeProps clusterStateLeader = new ZkCoreNodeProps(zkController\n//          .getClusterState().getLeader(collection, shardId));\n//    \n//      if (clusterStateLeader.getNodeProps() == null\n//          || !clusterStateLeader.getCoreUrl().equals(from)) {\n//        String coreUrl = null;\n//        if (clusterStateLeader.getNodeProps() != null) {\n//          coreUrl = clusterStateLeader.getCoreUrl();\n//        }\n//        log.error(\"We got a request from the leader, but it's not who our cluster state says is the leader :\"\n//            + req.getParamString()\n//            + \" : \"\n//            + coreUrl);\n//\n//        new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"We got a request from the leader, but it's not who our cluster state says is the leader.\");\n//      }\n// \n//    }\n  }\n\n","bugFix":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":["6776b3c3ed554ace17893a807da5b7a0a6d364c8","6776b3c3ed554ace17893a807da5b7a0a6d364c8","3d7c0c8a97beb56d2e168604f9928de17981eabe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d7c0c8a97beb56d2e168604f9928de17981eabe","date":1357257676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean logReplay = req.getParams().getBool(LOG_REPLAY, false);\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (!logReplay && DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    String from = req.getParams().get(\"distrib.from\");\n    boolean logReplay = req.getParams().getBool(LOG_REPLAY, false);\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (!logReplay && DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c228eadc8ab12c4b442521f5890283801a6cab5","date":1358509063,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doDefensiveChecks(String,DistribPhase).mjava","sourceNew":"  private void doDefensiveChecks(DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","sourceOld":"  private void doDefensiveChecks(String shardId, DistribPhase phase) {\n    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.REPLAY)) != 0;\n    if (isReplayOrPeersync) return;\n\n    String from = req.getParams().get(\"distrib.from\");\n    boolean localIsLeader = req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();\n    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay\n      log.error(\"Request says it is coming from leader, but we are the leader: \" + req.getParamString());\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Request says it is coming from leader, but we are the leader\");\n    }\n    \n    if (isLeader && !localIsLeader) {\n      log.error(\"ClusterState says we are the leader, but locally we don't think so\");\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"ClusterState says we are the leader, but locally we don't think so\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c228eadc8ab12c4b442521f5890283801a6cab5":["3d7c0c8a97beb56d2e168604f9928de17981eabe"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","3d7c0c8a97beb56d2e168604f9928de17981eabe"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c228eadc8ab12c4b442521f5890283801a6cab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d7c0c8a97beb56d2e168604f9928de17981eabe":["a6378064655e76cd7b908b1cab4ce425b384b508"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c228eadc8ab12c4b442521f5890283801a6cab5"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c228eadc8ab12c4b442521f5890283801a6cab5":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3d7c0c8a97beb56d2e168604f9928de17981eabe"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"3d7c0c8a97beb56d2e168604f9928de17981eabe":["6c228eadc8ab12c4b442521f5890283801a6cab5","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["a6378064655e76cd7b908b1cab4ce425b384b508"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}