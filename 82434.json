{"path":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY.mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY.mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    SolrCore core = h.getCore();\n    SolrRequestHandler handler = core.getRequestHandler( \"mock\" );\n    assertEquals(\"Incorrect init count\",\n                 1, handler.getStatistics().get(\"initCount\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY./mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY.mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY./mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY.mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY./mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY.mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RequestHandlersTest#testInitCount().mjava","sourceNew":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    @SuppressWarnings({\"unchecked\"})\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY./mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testInitCount() {\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Gauge<Number> g = (Gauge<Number>)manager.registry(registry).getMetrics().get(\"QUERY./mock.initCount\");\n    assertEquals(\"Incorrect init count\",\n                 1, g.getValue().intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"816521ebaad5add9cb96bb88c577394e2938c40b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"30c8e5574b55d57947e989443dfde611646530ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","e98520789adb1d5ad05afb4956eca0944a929688"],"816521ebaad5add9cb96bb88c577394e2938c40b":["28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}