{"path":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","sourceOld":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","sourceOld":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","sourceOld":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","sourceOld":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNotBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","sourceOld":"  protected static int andNotBinarySearch(int a[], int lena, int b[], int lenb, int[] target) {\n   int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int count = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    outer:\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          low = mid+1;  // found it, so start at next element\n          continue outer;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n      target[count++] = doca;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}