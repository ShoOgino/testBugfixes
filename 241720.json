{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d","date":1394988844,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    expectThrows(Throwable.class, () -> {\n      qp.parse(qString);\n    });\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(inOrder);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":["0107b7f49bcfde8f333685f53b37608815ca889b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}