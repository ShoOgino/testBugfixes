{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupCollection(HashSet[Pair[String,String]]).mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupCollection(HashSet[Pair[String,String]]).mjava","pathOld":"/dev/null","sourceNew":"  private void setupCollection(HashSet<Pair<String, String>> collectionShardPairs) {\n    ClusterStateProvider stateProvider = session.cloudManager.getClusterStateProvider();\n    for (Pair<String, String> shard : collectionShardPairs) {\n      // if this is not a known collection from the existing clusterstate,\n      // then add it\n      if (session.matrix.stream().noneMatch(row -> row.collectionVsShardVsReplicas.containsKey(shard.first()))) {\n        session.addClausesForCollection(stateProvider, shard.first());\n      }\n      for (Row row : session.matrix) {\n        Map<String, List<ReplicaInfo>> shardInfo = row.collectionVsShardVsReplicas.computeIfAbsent(shard.first(), it -> new HashMap<>());\n        if (shard.second() != null) shardInfo.computeIfAbsent(shard.second(), it -> new ArrayList<>());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupCollection(HashSet[Pair[String,String]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupCollection(HashSet[Pair[String,String]]).mjava","sourceNew":"  private void setupCollection(HashSet<Pair<String, String>> collectionShardPairs) {\n    ClusterStateProvider stateProvider = session.cloudManager.getClusterStateProvider();\n    for (Pair<String, String> shard : collectionShardPairs) {\n      // if this is not a known collection from the existing clusterstate,\n      // then add it\n      if (session.matrix.stream().noneMatch(row -> row.hasColl(shard.first()))) {\n        session.addClausesForCollection(stateProvider, shard.first());\n      }\n      for (Row row : session.matrix) row.createCollShard(shard);\n    }\n  }\n\n","sourceOld":"  private void setupCollection(HashSet<Pair<String, String>> collectionShardPairs) {\n    ClusterStateProvider stateProvider = session.cloudManager.getClusterStateProvider();\n    for (Pair<String, String> shard : collectionShardPairs) {\n      // if this is not a known collection from the existing clusterstate,\n      // then add it\n      if (session.matrix.stream().noneMatch(row -> row.collectionVsShardVsReplicas.containsKey(shard.first()))) {\n        session.addClausesForCollection(stateProvider, shard.first());\n      }\n      for (Row row : session.matrix) {\n        Map<String, List<ReplicaInfo>> shardInfo = row.collectionVsShardVsReplicas.computeIfAbsent(shard.first(), it -> new HashMap<>());\n        if (shard.second() != null) shardInfo.computeIfAbsent(shard.second(), it -> new ArrayList<>());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupCollection(HashSet[Pair[String,String]]).mjava","sourceNew":null,"sourceOld":"  private void setupCollection(HashSet<Pair<String, String>> collectionShardPairs) {\n    ClusterStateProvider stateProvider = session.cloudManager.getClusterStateProvider();\n    for (Pair<String, String> shard : collectionShardPairs) {\n      // if this is not a known collection from the existing clusterstate,\n      // then add it\n      if (session.matrix.stream().noneMatch(row -> row.hasColl(shard.first()))) {\n        session.addClausesForCollection(stateProvider, shard.first());\n      }\n      for (Row row : session.matrix) row.createCollShard(shard);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["27639bb5e041490ce599065875dd2f6d8beef62a"],"3f504512a03d978990cbff30db0522b354e846db":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}