{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81","date":1440796598,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["97d4692d0c601ff773f0a2231967312428a904e4"],"f7558b5077dd4abd457be151475f13b541f4f13e":["a80db2a1f5390c08a8cc54ee082ae2bc24f42c81"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"20e94e61fe5291647346b70437617e6b6c370408":["f7558b5077dd4abd457be151475f13b541f4f13e"],"97d4692d0c601ff773f0a2231967312428a904e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20e94e61fe5291647346b70437617e6b6c370408"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a80db2a1f5390c08a8cc54ee082ae2bc24f42c81","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["a80db2a1f5390c08a8cc54ee082ae2bc24f42c81"],"f7558b5077dd4abd457be151475f13b541f4f13e":["20e94e61fe5291647346b70437617e6b6c370408","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["97d4692d0c601ff773f0a2231967312428a904e4"],"a80db2a1f5390c08a8cc54ee082ae2bc24f42c81":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97d4692d0c601ff773f0a2231967312428a904e4":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}