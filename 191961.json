{"path":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}