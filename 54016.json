{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n        \t  return getKey()+\"=\"+getValue();\n          }\n\n    \t\t  public T setValue(T value) {\n            return list.setVal(index, value);\n    \t\t  }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  @Override\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      @Override\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          @Override\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @Override\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          @Override\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  @Override\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      @Override\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          @Override\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @Override\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          @Override\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cb84e8f7cc3f05b42efa917e6377e8909c74b5","date":1369035595,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#iterator().mjava","sourceNew":"  /**\n   * Support the Iterable interface\n   */\n  @Override\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      @Override\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          @Override\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @Override\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString() {\n            return getKey()+\"=\"+getValue();\n          }\n\n          @Override\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","sourceOld":"  /**\n   * Support the Iterable interface\n   */\n  @Override\n  public Iterator<Map.Entry<String,T>> iterator() {\n\n    final NamedList<T> list = this;\n\n    Iterator<Map.Entry<String,T>> iter = new Iterator<Map.Entry<String,T>>() {\n\n      int idx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return idx < list.size();\n      }\n\n      @Override\n      public Map.Entry<String,T> next() {\n        final int index = idx++;\n        Map.Entry<String,T> nv = new Map.Entry<String,T>() {\n          @Override\n          public String getKey() {\n            return list.getName( index );\n          }\n\n          @Override\n          @SuppressWarnings(\"unchecked\")\n          public T getValue() {\n            return list.getVal( index );\n          }\n\n          @Override\n          public String toString()\n          {\n            return getKey()+\"=\"+getValue();\n          }\n\n          @Override\n          public T setValue(T value) {\n            return list.setVal(index, value);\n          }\n        };\n        return nv;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n    return iter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}