{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","commits":[{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator;\n    try {\n      fieldComparator = sortField.getComparator(0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to get FieldComparator for sortField \" + sortField);\n    }\n\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    @SuppressWarnings({\"rawtypes\"})\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba8995e4d085569e201ecf8bf75d1cb02fa74bf","date":1592955411,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#comparatorFieldComparator(SortField).mjava","sourceNew":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    @SuppressWarnings({\"rawtypes\"})\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","sourceOld":"  Comparator<ShardDoc> comparatorFieldComparator(SortField sortField) {\n    @SuppressWarnings({\"rawtypes\"})\n    final FieldComparator fieldComparator = sortField.getComparator(0, 0);\n    return new ShardComparator(sortField) {\n      // Since the PriorityQueue keeps the biggest elements by default,\n      // we need to reverse the field compare ordering so that the\n      // smallest elements are kept instead of the largest... hence\n      // the negative sign.\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public int compare(final ShardDoc o1, final ShardDoc o2) {\n        //noinspection unchecked\n        return -fieldComparator.compareValues(sortVal(o1), sortVal(o2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e38c6374c23083c93e212a9498ff0a9c255476":["35d59689803f4ad27f96148bb7c7167e373c6770"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d59689803f4ad27f96148bb7c7167e373c6770"],"eba8995e4d085569e201ecf8bf75d1cb02fa74bf":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"35d59689803f4ad27f96148bb7c7167e373c6770":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["35d59689803f4ad27f96148bb7c7167e373c6770","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eba8995e4d085569e201ecf8bf75d1cb02fa74bf"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["03e38c6374c23083c93e212a9498ff0a9c255476"]},"commit2Childs":{"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"eba8995e4d085569e201ecf8bf75d1cb02fa74bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35d59689803f4ad27f96148bb7c7167e373c6770":["03e38c6374c23083c93e212a9498ff0a9c255476","1e6acbaae7af722f17204ceccf0f7db5753eccf3","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["eba8995e4d085569e201ecf8bf75d1cb02fa74bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}