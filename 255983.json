{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9079f3378157b171c153a86c5b1171afd7e82bbb","date":1271323730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n      FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    for (int i=0; i<3*_TestUtil.getRandomMultiplier(); i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(r, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = newDirectory(r);\n      Directory dir2 = newDirectory(r);\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(r, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(r, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(random, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = newDirectory(r);\n      Directory dir2 = newDirectory(r);\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(r, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(random, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(random, docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    r = newRandom();\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      boolean doReaderPooling = r.nextBoolean();\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(5)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      //System.out.println(\"TEST: index serial\");\n      indexSerial(docs, dir2);\n      //System.out.println(\"TEST: verify\");\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"9079f3378157b171c153a86c5b1171afd7e82bbb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"2aafd88401639311b0404e67c94e829e123a0e45":["9079f3378157b171c153a86c5b1171afd7e82bbb"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["2aafd88401639311b0404e67c94e829e123a0e45"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f83af14a2a8131b14d7aee6274c740334e0363d3"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9079f3378157b171c153a86c5b1171afd7e82bbb":["2aafd88401639311b0404e67c94e829e123a0e45"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9079f3378157b171c153a86c5b1171afd7e82bbb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}