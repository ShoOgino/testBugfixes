{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b11c8a388c6bc44e8a0e12c4f0597bf0134b344a","date":1270030038,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"064fca6c24f8c0608a9c2ba2688c31d244c9f262","date":1283790365,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92","9b87acd61509ed222a7ae58c584568eca5a6243e","b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n\n      @Override\n      public void postSoftCommit() {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b11c8a388c6bc44e8a0e12c4f0597bf0134b344a":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b11c8a388c6bc44e8a0e12c4f0597bf0134b344a","064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"064fca6c24f8c0608a9c2ba2688c31d244c9f262":["b11c8a388c6bc44e8a0e12c4f0597bf0134b344a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b11c8a388c6bc44e8a0e12c4f0597bf0134b344a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["b11c8a388c6bc44e8a0e12c4f0597bf0134b344a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"064fca6c24f8c0608a9c2ba2688c31d244c9f262":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}