{"path":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","pathOld":"/dev/null","sourceNew":"    public ByteBuffer getFileContent(String entryName) throws IOException {\n      ByteArrayInputStream zipContents=new ByteArrayInputStream(buffer.array(),buffer.arrayOffset(),buffer.limit());\n      ZipInputStream zis=new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry=zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out=new SimplePostTool.BAOS();\n            byte[] buffer=new byte[2048];\n            int size;\n            while ((size=zis.read(buffer,0,buffer.length)) != -1) {\n              out.write(buffer,0,size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26","date":1419094190,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","sourceNew":"    public ByteBuffer getFileContent(String entryName) throws IOException {\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buffer.array(), buffer.arrayOffset(), buffer.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":"    public ByteBuffer getFileContent(String entryName) throws IOException {\n      ByteArrayInputStream zipContents=new ByteArrayInputStream(buffer.array(),buffer.arrayOffset(),buffer.limit());\n      ZipInputStream zis=new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry=zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out=new SimplePostTool.BAOS();\n            byte[] buffer=new byte[2048];\n            int size;\n            while ((size=zis.read(buffer,0,buffer.length)) != -1) {\n              out.write(buffer,0,size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","sourceNew":null,"sourceOld":"    public ByteBuffer getFileContent(String entryName) throws IOException {\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buffer.array(), buffer.arrayOffset(), buffer.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository.JarContent#getFileContent(String).mjava","sourceNew":null,"sourceOld":"    public ByteBuffer getFileContent(String entryName) throws IOException {\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buffer.array(), buffer.arrayOffset(), buffer.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}