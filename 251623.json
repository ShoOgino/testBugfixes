{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n\n    TestSpans.tstNextSpans(span, 0,0,1);\n    TestSpans.tstNextSpans(span, 1,1,2);\n    TestSpans.tstNextSpans(span, 2,0,1);\n    TestSpans.tstNextSpans(span, 2,2,3);\n    TestSpans.tstNextSpans(span, 3,0,1);\n    TestSpans.tstEndSpans(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n\n    TestSpans.tstNextSpans(span, 0,0,1);\n    TestSpans.tstNextSpans(span, 1,1,2);\n    TestSpans.tstNextSpans(span, 2,0,1);\n    TestSpans.tstNextSpans(span, 2,2,3);\n    TestSpans.tstNextSpans(span, 3,0,1);\n    TestSpans.tstEndSpans(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n\n    TestSpans.tstNextSpans(span, 0,0,1);\n    TestSpans.tstNextSpans(span, 1,1,2);\n    TestSpans.tstNextSpans(span, 2,0,1);\n    TestSpans.tstNextSpans(span, 2,2,3);\n    TestSpans.tstNextSpans(span, 3,0,1);\n    TestSpans.tstEndSpans(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\",\n        searcher.getSimilarity(true) instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertNext(span, 0,0,1);\n    assertNext(span, 1,1,2);\n    assertNext(span, 2,0,1);\n    assertNext(span, 2,2,3);\n    assertNext(span, 3,0,1);\n    assertFinished(span);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"485545da3b4429d6f138b4baac573a97820ee93b":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["485545da3b4429d6f138b4baac573a97820ee93b"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["417142ff08fda9cf0b72d5133e63097a166c6458"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"485545da3b4429d6f138b4baac573a97820ee93b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["485545da3b4429d6f138b4baac573a97820ee93b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}