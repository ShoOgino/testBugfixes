{"path":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","commits":[{"id":"b28ad83652f81775fa37359636d0bfe523590199","date":1490892787,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    TokenStream tokenStream = analyzer.tokenStream(analyzerField, value);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    List<String> tokens = new ArrayList();\n    while (tokenStream.incrementToken()) {\n      tokens.add(termAtt.toString());\n    }\n\n    tokenStream.end();\n    tokenStream.close();\n\n    return tokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c3f4197ce8687fa9dc92965c98136ebbc430430","date":1490968656,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    TokenStream tokenStream = analyzer.tokenStream(analyzerField, value);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    List<String> tokens = new ArrayList();\n    while (tokenStream.incrementToken()) {\n      tokens.add(termAtt.toString());\n    }\n\n    tokenStream.end();\n    tokenStream.close();\n\n    return tokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aee63d763ab3b7b7fbad2f9d347aea1a5f75269","date":1491266377,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    TokenStream tokenStream = analyzer.tokenStream(analyzerField, value);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    List<String> tokens = new ArrayList();\n    while (tokenStream.incrementToken()) {\n      tokens.add(termAtt.toString());\n    }\n\n    tokenStream.end();\n    tokenStream.close();\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0b92e5f318f736ae54c8aea1ad5168d7e7f1b9a","date":1491296430,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    TokenStream tokenStream = analyzer.tokenStream(analyzerField, value);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    List<String> tokens = new ArrayList();\n    while (tokenStream.incrementToken()) {\n      tokens.add(termAtt.toString());\n    }\n\n    tokenStream.end();\n    tokenStream.close();\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66beae193a521beb699f71e74c08813ac4a76916","date":1496947308,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = null;\n    Object obj = tuple.get(fieldName);\n\n    if(obj == null) {\n      value = fieldName;\n    } else {\n      value = obj.toString();\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = null;\n    Object obj = tuple.get(fieldName);\n\n    if(obj == null) {\n      value = fieldName;\n    } else {\n      value = obj.toString();\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = null;\n    Object obj = tuple.get(fieldName);\n\n    if(obj == null) {\n      value = fieldName;\n    } else {\n      value = obj.toString();\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = tuple.getString(fieldName);\n    if(value == null) {\n      return null;\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalyzeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = null;\n    Object obj = tuple.get(fieldName);\n\n    if(obj == null) {\n      value = fieldName;\n    } else {\n      value = obj.toString();\n    }\n\n    List<String> tokens = new ArrayList<>();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    String value = null;\n    Object obj = tuple.get(fieldName);\n\n    if(obj == null) {\n      value = fieldName;\n    } else {\n      value = obj.toString();\n    }\n\n    List<String> tokens = new ArrayList();\n\n    try(TokenStream tokenStream = analyzer.tokenStream(analyzerField, value)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        tokens.add(termAtt.toString());\n      }\n      tokenStream.end();\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c3f4197ce8687fa9dc92965c98136ebbc430430":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66beae193a521beb699f71e74c08813ac4a76916":["7aee63d763ab3b7b7fbad2f9d347aea1a5f75269"],"e0b92e5f318f736ae54c8aea1ad5168d7e7f1b9a":["6c3f4197ce8687fa9dc92965c98136ebbc430430"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["28288370235ed02234a64753cdbf0c6ec096304a"],"b28ad83652f81775fa37359636d0bfe523590199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7aee63d763ab3b7b7fbad2f9d347aea1a5f75269":["b28ad83652f81775fa37359636d0bfe523590199"],"28288370235ed02234a64753cdbf0c6ec096304a":["7aee63d763ab3b7b7fbad2f9d347aea1a5f75269","66beae193a521beb699f71e74c08813ac4a76916"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e0b92e5f318f736ae54c8aea1ad5168d7e7f1b9a","66beae193a521beb699f71e74c08813ac4a76916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"6c3f4197ce8687fa9dc92965c98136ebbc430430":["e0b92e5f318f736ae54c8aea1ad5168d7e7f1b9a"],"66beae193a521beb699f71e74c08813ac4a76916":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e0b92e5f318f736ae54c8aea1ad5168d7e7f1b9a":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c3f4197ce8687fa9dc92965c98136ebbc430430","b28ad83652f81775fa37359636d0bfe523590199"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b28ad83652f81775fa37359636d0bfe523590199":["7aee63d763ab3b7b7fbad2f9d347aea1a5f75269"],"7aee63d763ab3b7b7fbad2f9d347aea1a5f75269":["66beae193a521beb699f71e74c08813ac4a76916","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}