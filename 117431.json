{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","commits":[{"id":"0713b289be914e52cc2ec942aeb7306f0593a787","date":1361852996,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"/dev/null","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = ((HttpSolrServer) clients.get(0)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(0)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fail\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    final String baseUrl2 = ((HttpSolrServer) clients.get(1)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(1)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8a716b6566cb30c11c6c121726c2905738388d8","date":1362950064,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = ((HttpSolrServer) clients.get(0)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(0)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fail\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    final String baseUrl2 = ((HttpSolrServer) clients.get(1)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(1)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00f55fb62c56038c1b72b24b8b1e38f807fec3e3","date":1363742841,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cd8705b01a2d68942cfe7966e20a1db8f81a3b","date":1363910737,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION);\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108a890321e59d70c58d42b1a3fd696037547447","date":1385308380,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(random().nextInt(clients.size())));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b","date":1385313290,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(random().nextInt(clients.size())));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, \"shard1\", 30000);\n    \n    final String baseUrl2 = getBaseUrl((HttpSolrServer) clients.get(1));\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl2 + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"2\");\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(2, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).getAbsolutePath()));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).getAbsolutePath()));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n          + ONE_NODE_COLLECTION));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).getAbsolutePath()));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n      HttpSolrClient client = new HttpSolrClient(baseUrl);\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n      client.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n      HttpSolrServer server = new HttpSolrServer(baseUrl);\n      server.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      server.request(createCmd);\n      server.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrServer client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception,\n      SolrServerException, IOException {\n    try {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n      HttpSolrClient client = new HttpSolrClient(baseUrl);\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n      client.shutdown();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(baseUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testNodeWithoutCollectionForwarding().mjava","sourceNew":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(ONE_NODE_COLLECTION, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest\n        .addReplicaToShard(ONE_NODE_COLLECTION, \"shard1\")\n        .setCoreName(ONE_NODE_COLLECTION + \"core\")\n        .process(cloudClient).isSuccess());\n\n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","sourceOld":"  private void testNodeWithoutCollectionForwarding() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      client.setConnectionTimeout(30000);\n      Create createCmd = new Create();\n      createCmd.setRoles(\"none\");\n      createCmd.setCoreName(ONE_NODE_COLLECTION + \"core\");\n      createCmd.setCollection(ONE_NODE_COLLECTION);\n      createCmd.setNumShards(1);\n      createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n    \n    waitForCollection(cloudClient.getZkStateReader(), ONE_NODE_COLLECTION, 1);\n    waitForRecoveriesToFinish(ONE_NODE_COLLECTION, cloudClient.getZkStateReader(), false);\n    \n    cloudClient.getZkStateReader().getLeaderRetry(ONE_NODE_COLLECTION, SHARD1, 30000);\n    \n    int docs = 2;\n    for (SolrClient client : clients) {\n      final String clientUrl = getBaseUrl((HttpSolrClient) client);\n      addAndQueryDocs(clientUrl, docs);\n      docs += 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["57cd8705b01a2d68942cfe7966e20a1db8f81a3b","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"108a890321e59d70c58d42b1a3fd696037547447":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"00f55fb62c56038c1b72b24b8b1e38f807fec3e3":["b8a716b6566cb30c11c6c121726c2905738388d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0713b289be914e52cc2ec942aeb7306f0593a787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","197bbedf08450ade98a11f4a0001448059666bec"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["57cd8705b01a2d68942cfe7966e20a1db8f81a3b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a3c3e46d3417c353d7be14509cfab11b315927fe","8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"57cd8705b01a2d68942cfe7966e20a1db8f81a3b":["00f55fb62c56038c1b72b24b8b1e38f807fec3e3"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["108a890321e59d70c58d42b1a3fd696037547447"],"b8a716b6566cb30c11c6c121726c2905738388d8":["0713b289be914e52cc2ec942aeb7306f0593a787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"108a890321e59d70c58d42b1a3fd696037547447":["8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"00f55fb62c56038c1b72b24b8b1e38f807fec3e3":["57cd8705b01a2d68942cfe7966e20a1db8f81a3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0713b289be914e52cc2ec942aeb7306f0593a787"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"0713b289be914e52cc2ec942aeb7306f0593a787":["b8a716b6566cb30c11c6c121726c2905738388d8"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["108a890321e59d70c58d42b1a3fd696037547447","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c3e46d3417c353d7be14509cfab11b315927fe"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"57cd8705b01a2d68942cfe7966e20a1db8f81a3b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b8a716b6566cb30c11c6c121726c2905738388d8":["00f55fb62c56038c1b72b24b8b1e38f807fec3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}