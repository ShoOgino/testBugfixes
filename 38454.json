{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.emptyList();\n    //build a map with alias/name as the key\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.emptyList() : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the leader. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from leader\n   *\n   * @return a list of configuration files which have changed on the leader and need to be downloaded.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.emptyList();\n    //build a map with alias/name as the key\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the follower\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.emptyList() : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.emptyList();\n    //build a map with alias/name as the key\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.emptyList() : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["3adc4d119a7deba35b2721853853464857d9d0a9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3adc4d119a7deba35b2721853853464857d9d0a9":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3adc4d119a7deba35b2721853853464857d9d0a9":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["3adc4d119a7deba35b2721853853464857d9d0a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}