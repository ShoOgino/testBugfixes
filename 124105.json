{"path":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","commits":[{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createFile(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name.\n      Returns a stream writing this file. */\n  public final IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile();\n    files.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name.\n      Returns a stream writing this file. */\n  public final OutputStream createFile(String name) {\n    RAMFile file = new RAMFile();\n    files.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public final IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name.\n      Returns a stream writing this file. */\n  public final IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile();\n    files.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public final IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":["67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedba8c41772c90fab237170d639e910d36f7755","date":1259780364,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes.addAndGet(existing.sizeInBytes);\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":["abd3e06c097b98f3456f75480bc686c205cacab1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abd3e06c097b98f3456f75480bc686c205cacab1","date":1259780940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes.addAndGet(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes.addAndGet(existing.sizeInBytes);\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":["bedba8c41772c90fab237170d639e910d36f7755"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#createOutput(String).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes.addAndGet(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name) throws IOException {\n    ensureOpen();\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes.addAndGet(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["eeefd99c477417e5c7c574228461ebafe92469d4"],"eeefd99c477417e5c7c574228461ebafe92469d4":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["67006a60923e2124212d3baa0d29b444bcbd8373"],"67006a60923e2124212d3baa0d29b444bcbd8373":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abd3e06c097b98f3456f75480bc686c205cacab1":["bedba8c41772c90fab237170d639e910d36f7755"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"bedba8c41772c90fab237170d639e910d36f7755":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["abd3e06c097b98f3456f75480bc686c205cacab1"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["67006a60923e2124212d3baa0d29b444bcbd8373"],"eeefd99c477417e5c7c574228461ebafe92469d4":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"8a9e385641d717e641408d8fbbc62be8fc766357":["bedba8c41772c90fab237170d639e910d36f7755"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"67006a60923e2124212d3baa0d29b444bcbd8373":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"abd3e06c097b98f3456f75480bc686c205cacab1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bedba8c41772c90fab237170d639e910d36f7755":["abd3e06c097b98f3456f75480bc686c205cacab1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}