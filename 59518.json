{"path":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","commits":[{"id":"3f2cc4cc34bb16ef750f9e4be14637706977993e","date":1455320490,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","date":1481746736,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(KEY_FIELD +\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(KEY_FIELD)));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(KEY_FIELD +\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(KEY_FIELD)));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(KEY_FIELD +\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(KEY_FIELD)));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(KEY_FIELD +\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(KEY_FIELD)));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(KEY_FIELD +\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(KEY_FIELD)));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestMiniSolrCloudCluster.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestMiniSolrCloudCluster.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = (long) (maxTimestampDocKeys.iterator().next().intValue() % 2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : rand.nextBoolean());\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = (long) (maxTimestampDocKeys.iterator().next().intValue() % 2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : rand.nextBoolean());\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = (long) (maxTimestampDocKeys.iterator().next().intValue() % 2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : rand.nextBoolean());\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestSegmentSorting.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestSegmentSorting.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(ODD_FIELD +\":\"+oddFieldValue);\n    query.setSort(TIMESTAMP_FIELD, SolrQuery.ORDER.desc);\n    query.setFields(KEY_FIELD, ODD_FIELD, TIMESTAMP_FIELD);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (rand.nextBoolean() ? null : new Boolean(rand.nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestSegmentSorting.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestSegmentSorting.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      final Integer idAsInt = Integer.parseInt(solrDocument0.getFieldValue(KEY_FIELD).toString());\n      TestSegmentSorting.assertTrue\n        (KEY_FIELD +\"=\"+idAsInt+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n         maxTimestampDocKeys.contains(idAsInt));\n      TestSegmentSorting.assertEquals(ODD_FIELD, oddFieldValue, rsp.getResults().get(0).getFieldValue(ODD_FIELD));\n    }\n    // check segmentTerminatedEarly flag\n    TestSegmentSorting.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestSegmentSorting.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestSegmentSorting.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestSegmentSorting.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestSegmentSorting.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["a52341299179de5479672f7cf518bf4b173f34b3"],"5de502b5478255493125e7e801411ba17a6682ec":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5de502b5478255493125e7e801411ba17a6682ec"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["28288370235ed02234a64753cdbf0c6ec096304a"],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a71f63026529f3c1f03cfdd664910873ab2369ae"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["a52341299179de5479672f7cf518bf4b173f34b3","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a52341299179de5479672f7cf518bf4b173f34b3","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["3f2cc4cc34bb16ef750f9e4be14637706977993e","a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"5de502b5478255493125e7e801411ba17a6682ec":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","9856095f7afb5a607bf5e65077615ed91273508c"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","9856095f7afb5a607bf5e65077615ed91273508c"],"28288370235ed02234a64753cdbf0c6ec096304a":["5719bfb2650ba43855e20564d39873bbbdc7f02c","a52341299179de5479672f7cf518bf4b173f34b3"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}