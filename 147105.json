{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","commits":[{"id":"3d4f1fefe3eaa4cd554cb6ad51a31ef844f15b94","date":1399476468,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testManyThreadsClose() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.setDoRandomForceMerge(false);\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(new TextField(\"field\", \"here is some text that is a bit longer than normal trivial text\", Field.Store.NO));\n              while (true) {\n                w.addDocument(doc);\n              }\n            } catch (AlreadyClosedException ace) {\n              // ok\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    Thread.sleep(100);\n    w.close();\n    for(Thread t : threads) {\n      t.join();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","sourceNew":"  public void testManyThreadsClose() throws Exception {\n    Directory dir = newDirectory();\n    Random r = random();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, new MockAnalyzer(r));\n    iwc.setCommitOnClose(false);\n    final RandomIndexWriter w = new RandomIndexWriter(r, dir, iwc);\n    w.setDoRandomForceMerge(false);\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(new TextField(\"field\", \"here is some text that is a bit longer than normal trivial text\", Field.Store.NO));\n              while (true) {\n                w.addDocument(doc);\n              }\n            } catch (AlreadyClosedException ace) {\n              // ok\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    Thread.sleep(100);\n    w.close();\n    for(Thread t : threads) {\n      t.join();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testManyThreadsClose() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.setDoRandomForceMerge(false);\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(new TextField(\"field\", \"here is some text that is a bit longer than normal trivial text\", Field.Store.NO));\n              while (true) {\n                w.addDocument(doc);\n              }\n            } catch (AlreadyClosedException ace) {\n              // ok\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    Thread.sleep(100);\n    w.close();\n    for(Thread t : threads) {\n      t.join();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e963b815e505e8632dd877cde9e5ed8f07e14514","date":1408052679,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testManyThreadsClose().mjava","sourceNew":"  public void testManyThreadsClose() throws Exception {\n    Directory dir = newDirectory();\n    Random r = random();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, new MockAnalyzer(r));\n    iwc.setCommitOnClose(false);\n    final RandomIndexWriter w = new RandomIndexWriter(r, dir, iwc);\n    w.setDoRandomForceMerge(false);\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(new TextField(\"field\", \"here is some text that is a bit longer than normal trivial text\", Field.Store.NO));\n              for(int j=0;j<1000;j++) {\n                w.addDocument(doc);\n              }\n            } catch (AlreadyClosedException ace) {\n              // ok\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    Thread.sleep(100);\n    try {\n      w.close();\n    } catch (IllegalStateException ise) {\n      // OK but not required\n    }\n    for(Thread t : threads) {\n      t.join();\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testManyThreadsClose() throws Exception {\n    Directory dir = newDirectory();\n    Random r = random();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, new MockAnalyzer(r));\n    iwc.setCommitOnClose(false);\n    final RandomIndexWriter w = new RandomIndexWriter(r, dir, iwc);\n    w.setDoRandomForceMerge(false);\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(new TextField(\"field\", \"here is some text that is a bit longer than normal trivial text\", Field.Store.NO));\n              while (true) {\n                w.addDocument(doc);\n              }\n            } catch (AlreadyClosedException ace) {\n              // ok\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    Thread.sleep(100);\n    w.close();\n    for(Thread t : threads) {\n      t.join();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3d4f1fefe3eaa4cd554cb6ad51a31ef844f15b94"],"e963b815e505e8632dd877cde9e5ed8f07e14514":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3d4f1fefe3eaa4cd554cb6ad51a31ef844f15b94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e963b815e505e8632dd877cde9e5ed8f07e14514"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d4f1fefe3eaa4cd554cb6ad51a31ef844f15b94"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e963b815e505e8632dd877cde9e5ed8f07e14514"],"3d4f1fefe3eaa4cd554cb6ad51a31ef844f15b94":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e963b815e505e8632dd877cde9e5ed8f07e14514":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}