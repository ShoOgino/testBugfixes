{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","commits":[{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          input = dir.openInput(IndexFileNames.segmentFileName(\n              IndexFileNames.stripExtension(name), \"\",\n              IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION),\n              IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.closeSafely(true, input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      IOUtils.closeSafely(!success, stream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"733b83db0afdfe169b80c8580043ceca57967b19","date":1314458101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.closeSafely(false, input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      IOUtils.closeSafely(!success, stream);\n    }\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          input = dir.openInput(IndexFileNames.segmentFileName(\n              IndexFileNames.stripExtension(name), \"\",\n              IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION),\n              IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.closeSafely(true, input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      IOUtils.closeSafely(!success, stream);\n    }\n  }\n\n","bugFix":["67aadace85f701c87a4e0721eedcda25d8415a70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.close(input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      if (success) {\n        IOUtils.close(stream);\n      } else {\n        IOUtils.closeWhileHandlingException(stream);\n      }\n    }\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.closeSafely(false, input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      IOUtils.closeSafely(!success, stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            final String id = input.readString();\n            assert !mapping.containsKey(id): \"id=\" + id + \" was written multiple times in the CFS\";\n            mapping.put(id, fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.close(input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      if (success) {\n        IOUtils.close(stream);\n      } else {\n        IOUtils.closeWhileHandlingException(stream);\n      }\n    }\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            mapping.put(input.readString(), fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.close(input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      if (success) {\n        IOUtils.close(stream);\n      } else {\n        IOUtils.closeWhileHandlingException(stream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readEntries(IndexInputSlicer,Directory,String).mjava","sourceNew":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            final String id = input.readString();\n            assert !mapping.containsKey(id): \"id=\" + id + \" was written multiple times in the CFS\";\n            mapping.put(id, fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.close(input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      if (success) {\n        IOUtils.close(stream);\n      } else {\n        IOUtils.closeWhileHandlingException(stream);\n      }\n    }\n  }\n\n","sourceOld":"  /** Helper method that reads CFS entries from an input stream */\n  private static final Map<String, FileEntry> readEntries(\n      IndexInputSlicer handle, Directory dir, String name) throws IOException {\n    // read the first VInt. If it is negative, it's the version number\n    // otherwise it's the count (pre-3.1 indexes)\n    final IndexInput stream = handle.openFullSlice();\n    final Map<String, FileEntry> mapping;\n    boolean success = false;\n    try {\n      final int firstInt = stream.readVInt();\n      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {\n        IndexInput input = null;\n        try {\n          final String entriesFileName = IndexFileNames.segmentFileName(\n                                                IndexFileNames.stripExtension(name), \"\",\n                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n          input = dir.openInput(entriesFileName, IOContext.READONCE);\n          final int readInt = input.readInt(); // unused right now\n          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;\n          final int numEntries = input.readVInt();\n          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(\n              numEntries);\n          for (int i = 0; i < numEntries; i++) {\n            final FileEntry fileEntry = new FileEntry();\n            final String id = input.readString();\n            assert !mapping.containsKey(id): \"id=\" + id + \" was written multiple times in the CFS\";\n            mapping.put(id, fileEntry);\n            fileEntry.offset = input.readLong();\n            fileEntry.length = input.readLong();\n          }\n          return mapping;\n        } finally {\n          IOUtils.close(input);\n        }\n      } else {\n        // TODO remove once 3.x is not supported anymore\n        mapping = readLegacyEntries(stream, firstInt);\n      }\n      success = true;\n      return mapping;\n    } finally {\n      if (success) {\n        IOUtils.close(stream);\n      } else {\n        IOUtils.closeWhileHandlingException(stream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["733b83db0afdfe169b80c8580043ceca57967b19"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"67aadace85f701c87a4e0721eedcda25d8415a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"733b83db0afdfe169b80c8580043ceca57967b19":["67aadace85f701c87a4e0721eedcda25d8415a70"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"67aadace85f701c87a4e0721eedcda25d8415a70":["733b83db0afdfe169b80c8580043ceca57967b19"],"733b83db0afdfe169b80c8580043ceca57967b19":["24230fe54121f9be9d85f2c2067536296785e421"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67aadace85f701c87a4e0721eedcda25d8415a70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}