{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","commits":[{"id":"577e41641d2fc8a834d2709dc76cc424b2936e19","date":1373292023,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\",,,\\\"}\",\n        \"/error/msg==\\\"Invalid copyFields for field: fieldB\\\"\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"some_nonexistent_field\\\"}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83bac20359319a14056acb3dd1a8529cef04a3f1","date":1373399434,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\",,,\\\"}\",\n        \"/error/msg==\\\"Invalid copyFields for field: fieldB\\\"\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"some_nonexistent_field_ignore_exception\\\"}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\",,,\\\"}\",\n        \"/error/msg==\\\"Invalid copyFields for field: fieldB\\\"\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"some_nonexistent_field\\\"}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33d016ca76018790ad668b7a61f7fdf21daeb0a","date":1373453738,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"fieldA\\\"]}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[]}\",\n        \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"some_nonexistent_field_ignore_exception\\\"]}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\",,,\\\"}\",\n        \"/error/msg==\\\"Invalid copyFields for field: fieldB\\\"\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"some_nonexistent_field_ignore_exception\\\"}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404e1b657c8a29a6ad3d35391e2d9fd847c4c632","date":1373556718,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"fieldA\\\"]}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldC\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[]}\",\n        \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldF\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"some_nonexistent_field_ignore_exception\\\"]}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"fieldA\\\"]}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[]}\",\n        \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"some_nonexistent_field_ignore_exception\\\"]}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"fieldA\\\"]}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldC\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[]}\",\n        \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldF\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"some_nonexistent_field_ignore_exception\\\"]}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d2b6e7e5c0569efc1d4cac630d4075d46c6432e","date":1383208237,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\", \n               json(\"{'type':'text','stored':false}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n               json(\"{'type':'text','stored':false, 'copyFields':['fieldA']}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldC\",\n               json(\"{'type':'text','stored':false, 'copyFields':'fieldA'}\"),\n               \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldC\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n               json(\"{'type':'text','stored':false, 'copyFields':[]}\"),\n               \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldF\",\n               json(\"{'type':'text','stored':false, 'copyFields':['some_nonexistent_field_ignore_exception']}\"),\n               \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"fieldA\\\"]}\",\n        \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldC\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":\\\"fieldA\\\"}\",\n        \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldC\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[]}\",\n        \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldF\",\n        \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\", \\\"copyFields\\\":[\\\"some_nonexistent_field_ignore_exception\\\"]}\",\n        \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldResource#testAddCopyField().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/fields/newfield2?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/fields/fieldA\", \n               json(\"{'type':'text','stored':false}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldB\",\n               json(\"{'type':'text','stored':false, 'copyFields':['fieldA']}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/fields/fieldC\",\n               json(\"{'type':'text','stored':false, 'copyFields':'fieldA'}\"),\n               \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/fields/fieldB?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldB\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=fieldC\",\n        \"count(/response/arr[@name='copyFields']/lst) = 1\"\n    );\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/fields/fieldD\",\n               json(\"{'type':'text','stored':false, 'copyFields':[]}\"),\n               \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/fields/fieldF\",\n               json(\"{'type':'text','stored':false, 'copyFields':['some_nonexistent_field_ignore_exception']}\"),\n               \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_field_ignore_exception\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d2b6e7e5c0569efc1d4cac630d4075d46c6432e":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01257aab3074127b72c3b53a508f396bb968019c":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"83bac20359319a14056acb3dd1a8529cef04a3f1":["01257aab3074127b72c3b53a508f396bb968019c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"f494bc636a1302995e4930fdccd371eeda452f87":["4d2b6e7e5c0569efc1d4cac630d4075d46c6432e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["83bac20359319a14056acb3dd1a8529cef04a3f1"]},"commit2Childs":{"4d2b6e7e5c0569efc1d4cac630d4075d46c6432e":["f494bc636a1302995e4930fdccd371eeda452f87"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["83bac20359319a14056acb3dd1a8529cef04a3f1"],"83bac20359319a14056acb3dd1a8529cef04a3f1":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["577e41641d2fc8a834d2709dc76cc424b2936e19","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["4d2b6e7e5c0569efc1d4cac630d4075d46c6432e","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}