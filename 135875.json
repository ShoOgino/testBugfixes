{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","commits":[{"id":"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a","date":1478684774,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304ef848381e39ff6cf3e7af6127733a6f4db389","date":1482353305,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c99b4c76a5295b578ef0f73f93244c59d6800ea3","date":1487772940,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2576170b353998ba9157b6d148ebfde21138316","date":1523488980,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    ZkController zkController = req.getCore().getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, req,\n          defaultRltFactory, randomRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.sortRules == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, req, randomRltFactory);\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    ZkController zkController = req.getCore().getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, req,\n          defaultRltFactory, randomRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.sortRules == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, req, randomRltFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#getReplicaListTransformer(SolrQueryRequest).mjava","sourceNew":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n\n","sourceOld":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c99b4c76a5295b578ef0f73f93244c59d6800ea3"],"c99b4c76a5295b578ef0f73f93244c59d6800ea3":["304ef848381e39ff6cf3e7af6127733a6f4db389"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"a2576170b353998ba9157b6d148ebfde21138316":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["c99b4c76a5295b578ef0f73f93244c59d6800ea3"],"033183e9e2da4609614733f0226a38c88c49ed36":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","304ef848381e39ff6cf3e7af6127733a6f4db389"],"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","a2576170b353998ba9157b6d148ebfde21138316"],"ba055e19afc289adcb5bedaf68513793a7254012":["833432c363468a5df50f87446a68015404b1fbcf"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["033183e9e2da4609614733f0226a38c88c49ed36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c99b4c76a5295b578ef0f73f93244c59d6800ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["199dfa410f1fdbfd3294106b04096cce5ed34b21","304ef848381e39ff6cf3e7af6127733a6f4db389"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["c99b4c76a5295b578ef0f73f93244c59d6800ea3","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a2576170b353998ba9157b6d148ebfde21138316":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a2576170b353998ba9157b6d148ebfde21138316","1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"033183e9e2da4609614733f0226a38c88c49ed36":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"833432c363468a5df50f87446a68015404b1fbcf":["ba055e19afc289adcb5bedaf68513793a7254012"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["033183e9e2da4609614733f0226a38c88c49ed36"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}