{"path":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","commits":[{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","sourceOld":"  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa5fbf72a0758904a5c1227477ad805c090b665","date":1539701531,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage(), exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0e1082d83694987da89930efc13b63eb39b139c","date":1539701571,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/ShardParamsTest#testGetShardsTolerantAsBool().mjava","sourceNew":"  @Test\n  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage(), exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetShardsTolerantAsBool() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // shards.tolerant param is not set; default should be false\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // shards.tolerant boolean true param should return true\n    for (String trueValue : new String[] { \"true\", \"yes\", \"on\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, trueValue);\n      assertTrue(ShardParams.getShardsTolerantAsBool(params));\n    }\n\n    // shards.tolerant boolean false param should return false\n    for (String falseValue : new String[] { \"false\", \"no\", \"off\"}) {\n      params.set(ShardParams.SHARDS_TOLERANT, falseValue);\n      assertFalse(ShardParams.getShardsTolerantAsBool(params));\n    }\n    \n    // shards.tolerant=requireZkConnected should return false\n    params.set(ShardParams.SHARDS_TOLERANT, ShardParams.REQUIRE_ZK_CONNECTED);\n    assertFalse(ShardParams.getShardsTolerantAsBool(params));\n\n    // values that aren't \"requireZkConnected\" or boolean should throw an exception\n    params.set(ShardParams.SHARDS_TOLERANT, \"bogusValue\");\n    Exception exception = expectThrows(SolrException.class, () -> ShardParams.getShardsTolerantAsBool(params));\n    assertTrue(exception.getMessage(), exception.getMessage().startsWith(\"invalid boolean value: \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd22dcd3ba035a1626face7319c94be45ae07172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["bd22dcd3ba035a1626face7319c94be45ae07172"],"b0e1082d83694987da89930efc13b63eb39b139c":["0fa5fbf72a0758904a5c1227477ad805c090b665"],"0fa5fbf72a0758904a5c1227477ad805c090b665":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0e1082d83694987da89930efc13b63eb39b139c"]},"commit2Childs":{"bd22dcd3ba035a1626face7319c94be45ae07172":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd22dcd3ba035a1626face7319c94be45ae07172"],"4cba13865da71de3b9b0937fcbc66d726089356d":["0fa5fbf72a0758904a5c1227477ad805c090b665"],"b0e1082d83694987da89930efc13b63eb39b139c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fa5fbf72a0758904a5c1227477ad805c090b665":["b0e1082d83694987da89930efc13b63eb39b139c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}