{"path":"src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","commits":[{"id":"196a576c5807672fc9ec3fd6db6311bf919bab9c","date":1171834203,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Check what Solr replied to a POST, and complain if it's not what we expected.\n   *  TODO: parse the response and check it XMLwise, here we just check it as an unparsed String  \n   */\n  static void warnIfNotExpectedResponse(String actual,String expected) {\n    if(!actual.equals(expected)) {\n      warn(\"Unexpected response from Solr: '\" + actual + \"', expected '\" + expected + \"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc8c0001d63aceba4db5451caa22039fd3a10fa","date":1177910931,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","sourceNew":"  /** Check what Solr replied to a POST, and complain if it's not what we expected.\n   *  TODO: parse the response and check it XMLwise, here we just check it as an unparsed String  \n   */\n  static void warnIfNotExpectedResponse(String actual,String expected) {\n    if(actual.indexOf(expected) < 0) {\n      warn(\"Unexpected response from Solr: '\" + actual + \"' does not contain '\" + expected + \"'\");\n    }\n  }\n\n","sourceOld":"  /** Check what Solr replied to a POST, and complain if it's not what we expected.\n   *  TODO: parse the response and check it XMLwise, here we just check it as an unparsed String  \n   */\n  static void warnIfNotExpectedResponse(String actual,String expected) {\n    if(!actual.equals(expected)) {\n      warn(\"Unexpected response from Solr: '\" + actual + \"', expected '\" + expected + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#warnIfNotExpectedResponse(String,String).mjava","sourceNew":"  /** Check what Solr replied to a POST, and complain if it's not what we expected.\n   *  TODO: parse the response and check it XMLwise, here we just check it as an unparsed String  \n   */\n  static void warnIfNotExpectedResponse(String actual,String expected) {\n    if(actual.indexOf(expected) < 0) {\n      warn(\"Unexpected response from Solr: '\" + actual + \"' does not contain '\" + expected + \"'\");\n    }\n  }\n\n","sourceOld":"  /** Check what Solr replied to a POST, and complain if it's not what we expected.\n   *  TODO: parse the response and check it XMLwise, here we just check it as an unparsed String  \n   */\n  static void warnIfNotExpectedResponse(String actual,String expected) {\n    if(actual.indexOf(expected) < 0) {\n      warn(\"Unexpected response from Solr: '\" + actual + \"' does not contain '\" + expected + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["196a576c5807672fc9ec3fd6db6311bf919bab9c"]},"commit2Childs":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}