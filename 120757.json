{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState().equals(Slice.ACTIVE)) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState().equals(Slice.ACTIVE)) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState().equals(Slice.ACTIVE)) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                String state = replica.getStr(ZkStateReader.STATE_PROP);\n                if (!live || !state.equals(ZkStateReader.ACTIVE)) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["a219f1dcad1700e84807666bdbd2b573e8de7021","0c924d4069ef5a5bc479a493befe0121aada6896"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}