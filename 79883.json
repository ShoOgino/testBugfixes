{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi;\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      fi = holder.get().getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\");\n    } finally {\n      holder.decref();\n    }\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi;\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      fi = holder.get().getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\");\n    } finally {\n      holder.decref();\n    }\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","sourceNew":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi = h.getCore().withSearcher(searcher ->\n        searcher.getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\"));\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","sourceOld":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi;\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      fi = holder.get().getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\");\n    } finally {\n      holder.decref();\n    }\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdateOfNonExistentDVsShouldNotFail().mjava","sourceNew":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi = h.getCore().withSearcher(searcher ->\n        searcher.getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\"));\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","sourceOld":"  @Test\n  public void testUpdateOfNonExistentDVsShouldNotFail() throws Exception {\n    // schema sanity check: assert that the nonexistent_field_i_dvo doesn't exist already\n    FieldInfo fi;\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      fi = holder.get().getSlowAtomicReader().getFieldInfos().fieldInfo(\"nonexistent_field_i_dvo\");\n    } finally {\n      holder.decref();\n    }\n    assertNull(fi);\n\n    // Partial update\n    addAndGetVersion(sdoc(\"id\", \"0\", \"nonexistent_field_i_dvo\", map(\"set\", \"42\")), null);\n\n    addAndGetVersion(sdoc(\"id\", \"1\"), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n    addAndGetVersion(sdoc(\"id\", \"1\", \"nonexistent_field_i_dvo\", map(\"inc\", \"1\")), null);\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='2']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:42\"), \"//*[@numFound='1']\");    \n    assertQ(req(\"q\", \"nonexistent_field_i_dvo:2\"), \"//*[@numFound='1']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ab833f2b623042c834458d4cbcad05073a93793":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["415bbbe7da8065dd3c477bdc3c703c6425622998","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}