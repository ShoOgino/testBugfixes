{"path":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#SnapshotDeletionPolicy(IndexDeletionPolicy,Map[String,String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#SnapshotDeletionPolicy(IndexDeletionPolicy,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#SnapshotDeletionPolicy(IndexDeletionPolicy,Map[String,String]).mjava","sourceNew":"  /**\n   * {@link SnapshotDeletionPolicy} wraps another {@link IndexDeletionPolicy} to\n   * enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, are not deleted until explicitly\n   *          released via {@link #release(String)}\n   * @param snapshotsInfo\n   *          A mapping of snapshot ID to the segments filename that is being\n   *          snapshotted. The expected input would be the output of\n   *          {@link #getSnapshots()}. A null value signals that there are no\n   *          initial snapshots to maintain.\n   */\n  public SnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Map<String, String> snapshotsInfo) {\n    this(primary);\n\n    if (snapshotsInfo != null) {\n      // Add the ID->segmentIDs here - the actual IndexCommits will be\n      // reconciled on the call to onInit()\n      for (Entry<String, String> e : snapshotsInfo.entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link SnapshotDeletionPolicy} wraps another {@link IndexDeletionPolicy} to\n   * enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, are not deleted until explicitly\n   *          released via {@link #release(String)}\n   * @param snapshotsInfo\n   *          A mapping of snapshot ID to the segments filename that is being\n   *          snapshotted. The expected input would be the output of\n   *          {@link #getSnapshots()}. A null value signals that there are no\n   *          initial snapshots to maintain.\n   */\n  public SnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Map<String, String> snapshotsInfo) {\n    this(primary);\n\n    if (snapshotsInfo != null) {\n      // Add the ID->segmentIDs here - the actual IndexCommits will be\n      // reconciled on the call to onInit()\n      for (Entry<String, String> e : snapshotsInfo.entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#SnapshotDeletionPolicy(IndexDeletionPolicy,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@link SnapshotDeletionPolicy} wraps another {@link IndexDeletionPolicy} to\n   * enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, are not deleted until explicitly\n   *          released via {@link #release(String)}\n   * @param snapshotsInfo\n   *          A mapping of snapshot ID to the segments filename that is being\n   *          snapshotted. The expected input would be the output of\n   *          {@link #getSnapshots()}. A null value signals that there are no\n   *          initial snapshots to maintain.\n   */\n  public SnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Map<String, String> snapshotsInfo) {\n    this(primary);\n\n    if (snapshotsInfo != null) {\n      // Add the ID->segmentIDs here - the actual IndexCommits will be\n      // reconciled on the call to onInit()\n      for (Entry<String, String> e : snapshotsInfo.entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a207624ce3e468bca1819861084438d936e3b1c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a207624ce3e468bca1819861084438d936e3b1c"]},"commit2Childs":{"8a207624ce3e468bca1819861084438d936e3b1c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8a207624ce3e468bca1819861084438d936e3b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}