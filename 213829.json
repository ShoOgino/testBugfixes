{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}