{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}