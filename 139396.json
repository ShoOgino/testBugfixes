{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","commits":[{"id":"3e1de378515e2ab9bcfd5b80901238a3f9078a7c","date":1385904665,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(r, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"3e1de378515e2ab9bcfd5b80901238a3f9078a7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e1de378515e2ab9bcfd5b80901238a3f9078a7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"3e1de378515e2ab9bcfd5b80901238a3f9078a7c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}