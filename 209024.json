{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc2b6d7a57a856c487f4394618e4742bfa38c500","date":1320707541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192f28916e749c4a857bd4e135a84523234ad354","date":1320945822,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        assert pos < fos.size();\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = start + fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        assert pos < fos.size();\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        assert pos < fos.size();\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#write(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public long write(AddUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (fos) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n        if (pos == 0) { // TODO: needs to be changed if we start writing a header first\n          addGlobalStrings(sdoc.getFieldNames());\n          pos = fos.size();\n        }\n\n        /***\n        System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n          throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n        }\n         ***/\n\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(0);  // the version... should also just be one byte if 0\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n        // fos.flushBuffer();  // flush later\n\n        assert pos < fos.size();\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["192f28916e749c4a857bd4e135a84523234ad354","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"192f28916e749c4a857bd4e135a84523234ad354":["bc2b6d7a57a856c487f4394618e4742bfa38c500"],"bc2b6d7a57a856c487f4394618e4742bfa38c500":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["192f28916e749c4a857bd4e135a84523234ad354","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["192f28916e749c4a857bd4e135a84523234ad354"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["bc2b6d7a57a856c487f4394618e4742bfa38c500"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"192f28916e749c4a857bd4e135a84523234ad354":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bc2b6d7a57a856c487f4394618e4742bfa38c500":["192f28916e749c4a857bd4e135a84523234ad354"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}