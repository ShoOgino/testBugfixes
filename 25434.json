{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","sourceNew":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","sourceOld":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","sourceNew":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","sourceOld":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","sourceNew":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","sourceOld":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testNFA().mjava","sourceNew":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","sourceOld":"  /**\n   * Test that a nondeterministic automaton works correctly. (It should will be\n   * determinized)\n   */\n  public void testNFA() throws IOException {\n    // accept this or three, the union is an NFA (two transitions for 't' from\n    // initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    assertAutomatonHits(2, nfa);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}