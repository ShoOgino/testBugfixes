{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff15521f008e581324bc43e2016b77659639e3da","date":1327850735,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff15521f008e581324bc43e2016b77659639e3da":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["251550f5d19b526a76f8c5126ae7bb2d22cf8935","ff15521f008e581324bc43e2016b77659639e3da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["ff15521f008e581324bc43e2016b77659639e3da","5cab9a86bd67202d20b6adc463008c8e982b070a"],"ff15521f008e581324bc43e2016b77659639e3da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}