{"path":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a BitSet with true for documents which should be permitted in\n    search results, and false for those that should not. */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null)\n\treturn bits;\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n\ttermDocs.seek(enumerator.term());\n\ttry {\n\t  while (termDocs.next())\n\t    bits.set(termDocs.doc());\n\t} finally {\n\t  termDocs.close();\n\t}\n\tif (!enumerator.next()) {\n\t  break;\n\t}\n      }\n    } finally {\n      enumerator.close();\n    }\n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab720568e61dbbfcc27a68f7b67647b3f19ddec","date":1063449864,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","sourceNew":"    /**\n     * Returns a BitSet with true for documents which should be\n     * permitted in search results, and false for those that should\n     * not.\n     */\n    public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bits = new BitSet(reader.maxDoc());\n        TermEnum enumerator = reader.terms(new Term(field, start));\n        TermDocs termDocs = reader.termDocs();\n        if (enumerator.term() == null) {\n            return bits;\n        }\n\n        try {\n            Term stop = new Term(field, end);\n            while (enumerator.term().compareTo(stop) <= 0) {\n                termDocs.seek(enumerator.term());\n                try {\n                    while (termDocs.next()) {\n                        bits.set(termDocs.doc());\n                    }\n                } finally {\n                    termDocs.close();\n                }\n                if (!enumerator.next()) {\n                    break;\n                }\n            }\n        } finally {\n            enumerator.close();\n        }\n        return bits;\n    }\n\n","sourceOld":"  /** Returns a BitSet with true for documents which should be permitted in\n    search results, and false for those that should not. */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null)\n\treturn bits;\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n\ttermDocs.seek(enumerator.term());\n\ttry {\n\t  while (termDocs.next())\n\t    bits.set(termDocs.doc());\n\t} finally {\n\t  termDocs.close();\n\t}\n\tif (!enumerator.next()) {\n\t  break;\n\t}\n      }\n    } finally {\n      enumerator.close();\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09801d5e36f040f424c56c388007a47a95d36d46","date":1063496429,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * Returns a BitSet with true for documents which should be\n   * permitted in search results, and false for those that should\n   * not.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null) {\n      return bits;\n    }\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n        termDocs.seek(enumerator.term());\n        try {\n          while (termDocs.next()) {\n            bits.set(termDocs.doc());\n          }\n        } finally {\n          termDocs.close();\n        }\n        if (!enumerator.next()) {\n          break;\n        }\n      }\n    } finally {\n      enumerator.close();\n    }\n    return bits;\n  }\n\n","sourceOld":"    /**\n     * Returns a BitSet with true for documents which should be\n     * permitted in search results, and false for those that should\n     * not.\n     */\n    public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bits = new BitSet(reader.maxDoc());\n        TermEnum enumerator = reader.terms(new Term(field, start));\n        TermDocs termDocs = reader.termDocs();\n        if (enumerator.term() == null) {\n            return bits;\n        }\n\n        try {\n            Term stop = new Term(field, end);\n            while (enumerator.term().compareTo(stop) <= 0) {\n                termDocs.seek(enumerator.term());\n                try {\n                    while (termDocs.next()) {\n                        bits.set(termDocs.doc());\n                    }\n                } finally {\n                    termDocs.close();\n                }\n                if (!enumerator.next()) {\n                    break;\n                }\n            }\n        } finally {\n            enumerator.close();\n        }\n        return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ff99825905196490e3d8d38452733b9fa6b6dd0","date":1065879951,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * Returns a BitSet with true for documents which should be\n   * permitted in search results, and false for those that should\n   * not.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null) {\n      return bits;\n    }\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n        termDocs.seek(enumerator.term());\n        while (termDocs.next()) {\n          bits.set(termDocs.doc());\n        }\n        if (!enumerator.next()) {\n          break;\n        }\n      }\n    } finally {\n      enumerator.close();\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * Returns a BitSet with true for documents which should be\n   * permitted in search results, and false for those that should\n   * not.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null) {\n      return bits;\n    }\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n        termDocs.seek(enumerator.term());\n        try {\n          while (termDocs.next()) {\n            bits.set(termDocs.doc());\n          }\n        } finally {\n          termDocs.close();\n        }\n        if (!enumerator.next()) {\n          break;\n        }\n      }\n    } finally {\n      enumerator.close();\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DateFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a BitSet with true for documents which should be\n   * permitted in search results, and false for those that should\n   * not.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    BitSet bits = new BitSet(reader.maxDoc());\n    TermEnum enumerator = reader.terms(new Term(field, start));\n    TermDocs termDocs = reader.termDocs();\n    if (enumerator.term() == null) {\n      return bits;\n    }\n\n    try {\n      Term stop = new Term(field, end);\n      while (enumerator.term().compareTo(stop) <= 0) {\n        termDocs.seek(enumerator.term());\n        while (termDocs.next()) {\n          bits.set(termDocs.doc());\n        }\n        if (!enumerator.next()) {\n          break;\n        }\n      }\n    } finally {\n      enumerator.close();\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["7ff99825905196490e3d8d38452733b9fa6b6dd0"],"7ff99825905196490e3d8d38452733b9fa6b6dd0":["09801d5e36f040f424c56c388007a47a95d36d46"],"fab720568e61dbbfcc27a68f7b67647b3f19ddec":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09801d5e36f040f424c56c388007a47a95d36d46":["fab720568e61dbbfcc27a68f7b67647b3f19ddec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["fab720568e61dbbfcc27a68f7b67647b3f19ddec"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ff99825905196490e3d8d38452733b9fa6b6dd0":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"fab720568e61dbbfcc27a68f7b67647b3f19ddec":["09801d5e36f040f424c56c388007a47a95d36d46"],"09801d5e36f040f424c56c388007a47a95d36d46":["7ff99825905196490e3d8d38452733b9fa6b6dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}