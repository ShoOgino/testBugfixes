{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"/dev/null","sourceNew":"  private void initXpathReader() {\n    boolean useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                  .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0428b9e5eb6ff76866de67d9bb57efef95ef23ef","0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d902f463d0a39aa9fc43326e245a5e5c94295d68","date":1217857015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n        .getEntityAttribute(STREAM));\n    if(context.getEntityAttribute(\"batchSize\") != null){\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                  .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    boolean useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                  .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                          .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n        .getEntityAttribute(STREAM));\n    if(context.getEntityAttribute(\"batchSize\") != null){\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                  .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e886fb6afe33a296f3d21a4c18694ecb64545fab","date":1226485789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                          .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                          .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n\n    List<String> l = TemplateString.getVariables(context\n            .getEntityAttribute(URL));\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb","date":1233863590,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH),\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH), Boolean.parseBoolean(field\n                          .get(DataImporter.MULTI_VALUED)));\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a3faa44846c111182250b817637e5f84bb74d76","date":1251436928,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = resolver.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  field.get(XPATH),\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b5d20090448d280035afb31f1fd2e67ff43336b","date":1258790174,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = resolver.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getEntityAttribute(\"batchSize\") != null) {\n      batchSz = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = resolver.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","d902f463d0a39aa9fc43326e245a5e5c94295d68"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = resolver.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = resolver.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4a3faa44846c111182250b817637e5f84bb74d76":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["4a3faa44846c111182250b817637e5f84bb74d76"],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a3faa44846c111182250b817637e5f84bb74d76":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["153cc06382fdc94d0ea3db127eab860ae4310525"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["4a3faa44846c111182250b817637e5f84bb74d76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}