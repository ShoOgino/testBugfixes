{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadInvalid1().mjava","commits":[{"id":"bd1eeead920e82d87bc0f8ff7d2d5353aba27842","date":1565751892,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadInvalid1().mjava","pathOld":"/dev/null","sourceNew":"  @Test(expected = RuntimeException.class)\n  public void testReadInvalid1() throws IOException {\n    // the concatenated segment must be the same as the surface form\n    String invalidEntry = \"日経新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\";\n    UserDictionary dictionary = UserDictionary.open(new StringReader(invalidEntry));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb","date":1565753242,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadInvalid1().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadInvalid1().mjava","sourceNew":"  @Test\n  public void testReadInvalid1() throws IOException {\n    // the concatenated segment must be the same as the surface form\n    String invalidEntry = \"日経新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\";\n    RuntimeException e = expectThrows(RuntimeException.class,\n        \"RuntimeException should be thrown when passed an invalid dictionary entry.\",\n        () -> UserDictionary.open(new StringReader(invalidEntry)));\n    assertTrue(e.getMessage().contains(\"does not match the surface form\"));\n  }\n\n","sourceOld":"  @Test(expected = RuntimeException.class)\n  public void testReadInvalid1() throws IOException {\n    // the concatenated segment must be the same as the surface form\n    String invalidEntry = \"日経新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\";\n    UserDictionary dictionary = UserDictionary.open(new StringReader(invalidEntry));\n  }\n\n","bugFix":["bd1eeead920e82d87bc0f8ff7d2d5353aba27842"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb":["bd1eeead920e82d87bc0f8ff7d2d5353aba27842"],"bd1eeead920e82d87bc0f8ff7d2d5353aba27842":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd1eeead920e82d87bc0f8ff7d2d5353aba27842"],"4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd1eeead920e82d87bc0f8ff7d2d5353aba27842":["4ec96c0d56278a6d85e1f04ce5642b1b0c9a98fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}