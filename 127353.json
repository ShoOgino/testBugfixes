{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64ffebe62143a8d4c37d99b6ece6d430d948ebc","date":1408382164,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.maxDoc(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.maxDoc(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.maxDoc(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc","b0267c69e2456a3477a1ad785723f2135da3117e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0267c69e2456a3477a1ad785723f2135da3117e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}