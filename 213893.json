{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"/dev/null","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.createURI(sourceDir.getPath(), file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af3193c66df8e8324d4bce9f66df967af9e8c602"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.createURI(sourceDir.getPath(), file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","bugFix":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.createURI(sourceDir.getPath(), file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.createURI(sourceDir.getPath(), file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.createURI(sourceDir.getPath(), file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"/dev/null","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadToZk(SolrZkClient,URI,String).mjava","sourceNew":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(SolrZkClient.checkInterrupted(e));\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  private void uploadToZk(SolrZkClient zkClient, URI sourceDir, String destZkPath) throws IOException {\n    Preconditions.checkArgument(repository.exists(sourceDir), \"Path {} does not exist\", sourceDir);\n    Preconditions.checkArgument(repository.getPathType(sourceDir) == PathType.DIRECTORY,\n        \"Path {} is not a directory\", sourceDir);\n\n    for (String file : repository.listAll(sourceDir)) {\n      String zkNodePath = destZkPath + \"/\" + file;\n      URI path = repository.resolve(sourceDir, file);\n      PathType t = repository.getPathType(path);\n      switch (t) {\n        case FILE: {\n          try (IndexInput is = repository.openInput(sourceDir, file, IOContext.DEFAULT)) {\n            byte[] arr = new byte[(int) is.length()]; // probably ok since the config file should be small.\n            is.readBytes(arr, 0, (int) is.length());\n            zkClient.makePath(zkNodePath, arr, true);\n          } catch (KeeperException | InterruptedException e) {\n            throw new IOException(e);\n          }\n          break;\n        }\n\n        case DIRECTORY: {\n          if (!file.startsWith(\".\")) {\n            uploadToZk(zkClient, path, zkNodePath);\n          }\n          break;\n        }\n        default:\n          throw new IllegalStateException(\"Unknown path type \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["4c623a7f72be34d6c45bee682028c50327d9e4b7","af3193c66df8e8324d4bce9f66df967af9e8c602"],"de3459a54b4c8751d9ef19b035577e2418064be7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bc8f206328a706450934717bec7ccc22ad166fc0":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de3459a54b4c8751d9ef19b035577e2418064be7"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"de3459a54b4c8751d9ef19b035577e2418064be7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["de3459a54b4c8751d9ef19b035577e2418064be7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}