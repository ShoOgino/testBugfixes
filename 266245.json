{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    for (int i = 0; i < sortedSubReaders.length; i++) { // search each subreader\n      collector.setNextReader(sortedSubReaders[i], sortedStarts[i]);\n      doSearch(sortedSubReaders[i], weight, filter, collector);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    for (int i = 0; i < subReaders.length; i++) { // search each subreader\n      collector.setNextReader(subReaders[i], docStarts[i]);\n      doSearch(subReaders[i], weight, filter, collector);\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    for (int i = 0; i < sortedSubReaders.length; i++) { // search each subreader\n      collector.setNextReader(sortedSubReaders[i], sortedStarts[i]);\n      doSearch(sortedSubReaders[i], weight, filter, collector);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    for (int i = 0; i < subReaders.length; i++) { // search each subreader\n      collector.setNextReader(subReaders[i], docStarts[i]);\n      doSearch(subReaders[i], weight, filter, collector);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","sourceNew":"  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  public void search(QueryWeight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fe941135bdfc28c81e20b4d21422f8726af34925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["052fac7830290bd38a04cddee1a121ee07656b56"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe941135bdfc28c81e20b4d21422f8726af34925":["8a9e385641d717e641408d8fbbc62be8fc766357"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}