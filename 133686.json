{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":null,"sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":null,"sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6c7b564e6275fb0c0e137d84fda55b447c19d9c","date":1286438356,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocsInRAM++;\n    state.isIdle = false;\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads) {\n          minThreadState = ts;\n        }\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0) {\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        }\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    if (segment == null) {\n      segment = writer.newSegmentName();\n      assert numDocs == 0;\n    }\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocs++;\n    state.isIdle = false;\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocsInRAM++;\n    state.isIdle = false;\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads) {\n          minThreadState = ts;\n        }\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0) {\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        }\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    if (segment == null) {\n      segment = writer.newSegmentName();\n      assert numDocs == 0;\n    }\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocs++;\n    state.isIdle = false;\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":null,"sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads) {\n          minThreadState = ts;\n        }\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0) {\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        }\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    if (segment == null) {\n      segment = writer.newSegmentName();\n      assert numDocs == 0;\n    }\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocs++;\n    state.isIdle = false;\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":null,"sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads) {\n          minThreadState = ts;\n        }\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0) {\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        }\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    if (segment == null) {\n      segment = writer.newSegmentName();\n      assert numDocs == 0;\n    }\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocs++;\n    state.isIdle = false;\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":null,"sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    final Thread currentThread = Thread.currentThread();\n    assert !Thread.holdsLock(writer);\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(currentThread);\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads) {\n          minThreadState = ts;\n        }\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= maxThreadStates)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0) {\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        }\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(currentThread, state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads), and no flush/abort\n    // pending \n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    if (segment == null) {\n      segment = writer.newSegmentName();\n      assert numDocs == 0;\n    }\n\n    state.docState.docID = nextDocID++;\n\n    if (delTerm != null) {\n      pendingDeletes.addTerm(delTerm, state.docState.docID);\n    }\n\n    numDocs++;\n    state.isIdle = false;\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"a6c7b564e6275fb0c0e137d84fda55b447c19d9c":["334c1175813aea771a71728cd2c4ee4754fd0603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"334c1175813aea771a71728cd2c4ee4754fd0603":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"a6c7b564e6275fb0c0e137d84fda55b447c19d9c":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}