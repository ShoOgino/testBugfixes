{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldsEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredFields(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that stored fields of all documents are the same \n   */\n  public void assertStoredFieldsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      StoredDocument leftDoc = leftReader.document(i);\n      StoredDocument rightDoc = rightReader.document(i);\n      \n      // TODO: I think this is bogus because we don't document what the order should be\n      // from these iterators, etc. I think the codec/IndexReader should be free to order this stuff\n      // in whatever way it wants (e.g. maybe it packs related fields together or something)\n      // To fix this, we sort the fields in both documents by name, but\n      // we still assume that all instances with same name are in order:\n      Comparator<StorableField> comp = new Comparator<StorableField>() {\n        @Override\n        public int compare(StorableField arg0, StorableField arg1) {\n          return arg0.name().compareTo(arg1.name());\n        }        \n      };\n      Collections.sort(leftDoc.getFields(), comp);\n      Collections.sort(rightDoc.getFields(), comp);\n\n      Iterator<StorableField> leftIterator = leftDoc.iterator();\n      Iterator<StorableField> rightIterator = rightDoc.iterator();\n      while (leftIterator.hasNext()) {\n        assertTrue(info, rightIterator.hasNext());\n        assertStoredFieldEquals(info, leftIterator.next(), rightIterator.next());\n      }\n      assertFalse(info, rightIterator.hasNext());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that stored fields of all documents are the same \n   */\n  public void assertStoredFields(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      StoredDocument leftDoc = leftReader.document(i);\n      StoredDocument rightDoc = rightReader.document(i);\n      \n      // TODO: I think this is bogus because we don't document what the order should be\n      // from these iterators, etc. I think the codec/IndexReader should be free to order this stuff\n      // in whatever way it wants (e.g. maybe it packs related fields together or something)\n      // To fix this, we sort the fields in both documents by name, but\n      // we still assume that all instances with same name are in order:\n      Comparator<StorableField> comp = new Comparator<StorableField>() {\n        @Override\n        public int compare(StorableField arg0, StorableField arg1) {\n          return arg0.name().compareTo(arg1.name());\n        }        \n      };\n      Collections.sort(leftDoc.getFields(), comp);\n      Collections.sort(rightDoc.getFields(), comp);\n\n      Iterator<StorableField> leftIterator = leftDoc.iterator();\n      Iterator<StorableField> rightIterator = rightDoc.iterator();\n      while (leftIterator.hasNext()) {\n        assertTrue(info, rightIterator.hasNext());\n        assertStoredField(leftIterator.next(), rightIterator.next());\n      }\n      assertFalse(info, rightIterator.hasNext());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that stored fields of all documents are the same \n   */\n  public void assertStoredFieldsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      Document leftDoc = leftReader.document(i);\n      Document rightDoc = rightReader.document(i);\n      \n      // TODO: I think this is bogus because we don't document what the order should be\n      // from these iterators, etc. I think the codec/IndexReader should be free to order this stuff\n      // in whatever way it wants (e.g. maybe it packs related fields together or something)\n      // To fix this, we sort the fields in both documents by name, but\n      // we still assume that all instances with same name are in order:\n      Comparator<IndexableField> comp = new Comparator<IndexableField>() {\n        @Override\n        public int compare(IndexableField arg0, IndexableField arg1) {\n          return arg0.name().compareTo(arg1.name());\n        }        \n      };\n      List<IndexableField> leftFields = new ArrayList<>(leftDoc.getFields());\n      List<IndexableField> rightFields = new ArrayList<>(rightDoc.getFields());\n      Collections.sort(leftFields, comp);\n      Collections.sort(rightFields, comp);\n\n      Iterator<IndexableField> leftIterator = leftFields.iterator();\n      Iterator<IndexableField> rightIterator = rightFields.iterator();\n      while (leftIterator.hasNext()) {\n        assertTrue(info, rightIterator.hasNext());\n        assertStoredFieldEquals(info, leftIterator.next(), rightIterator.next());\n      }\n      assertFalse(info, rightIterator.hasNext());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that stored fields of all documents are the same \n   */\n  public void assertStoredFieldsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      StoredDocument leftDoc = leftReader.document(i);\n      StoredDocument rightDoc = rightReader.document(i);\n      \n      // TODO: I think this is bogus because we don't document what the order should be\n      // from these iterators, etc. I think the codec/IndexReader should be free to order this stuff\n      // in whatever way it wants (e.g. maybe it packs related fields together or something)\n      // To fix this, we sort the fields in both documents by name, but\n      // we still assume that all instances with same name are in order:\n      Comparator<StorableField> comp = new Comparator<StorableField>() {\n        @Override\n        public int compare(StorableField arg0, StorableField arg1) {\n          return arg0.name().compareTo(arg1.name());\n        }        \n      };\n      Collections.sort(leftDoc.getFields(), comp);\n      Collections.sort(rightDoc.getFields(), comp);\n\n      Iterator<StorableField> leftIterator = leftDoc.iterator();\n      Iterator<StorableField> rightIterator = rightDoc.iterator();\n      while (leftIterator.hasNext()) {\n        assertTrue(info, rightIterator.hasNext());\n        assertStoredFieldEquals(info, leftIterator.next(), rightIterator.next());\n      }\n      assertFalse(info, rightIterator.hasNext());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}