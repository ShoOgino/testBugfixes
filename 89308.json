{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","commits":[{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void xxxtestAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void xxxtestAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2586f96f60332eb97ecd2934b0763791462568b2"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"2586f96f60332eb97ecd2934b0763791462568b2":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"09c482d1e63332617181729a225b215c452d8a79":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}