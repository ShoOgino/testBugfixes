{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.byteAt(position) & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.setByteAt(position, (byte) nextChar);\n        seekBytesRef.setLength(position+1);\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":["705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return {@code position >= 0} if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.byteAt(position) & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.setByteAt(position, (byte) nextChar);\n        seekBytesRef.setLength(position+1);\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.byteAt(position) & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.setByteAt(position, (byte) nextChar);\n        seekBytesRef.setLength(position+1);\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return {@code position >= 0} if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.byteAt(position) & 0xff;\n      // if a character is 0xff it's a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.setByteAt(position, (byte) nextChar);\n        seekBytesRef.setLength(position+1);\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return {@code position >= 0} if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.byteAt(position) & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.setByteAt(position, (byte) nextChar);\n        seekBytesRef.setLength(position+1);\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}