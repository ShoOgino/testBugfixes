{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","commits":[{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","sourceNew":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","sourceOld":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}