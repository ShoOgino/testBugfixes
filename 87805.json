{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,CharSequence,int).mjava","commits":[{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,CharSequence,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,String,int).mjava","sourceNew":"  /**\n   * Auto-completes a given prefix query using Depth-First Search with the end\n   * of prefix as source node each time finding a new leaf to get a complete key\n   * to be added in the suggest list.\n   * \n   * @param root\n   *          a reference to root node of TST.\n   * @param s\n   *          prefix query to be auto-completed.\n   * @param x\n   *          index of current character to be searched while traversing through\n   *          the prefix in TST.\n   * @return suggest list of auto-completed keys for the given prefix query.\n   */\n  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,\n          CharSequence s, int x) {\n\n    TernaryTreeNode p = root;\n    ArrayList<TernaryTreeNode> suggest = new ArrayList<TernaryTreeNode>();\n\n    while (p != null) {\n      if (s.charAt(x) < p.splitchar) {\n        p = p.loKid;\n      } else if (s.charAt(x) == p.splitchar) {\n        if (x == s.length() - 1) {\n          break;\n        } else {\n          x++;\n        }\n        p = p.eqKid;\n      } else {\n        p = p.hiKid;\n      }\n    }\n\n    if (p == null) return suggest;\n    if (p.eqKid == null && p.token == null) return suggest;\n    if (p.eqKid == null && p.token != null) {\n      suggest.add(p);\n      return suggest;\n    }\n\n    if (p.token != null) {\n      suggest.add(p);\n    }\n    p = p.eqKid;\n\n    Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();\n    st.push(p);\n    while (!st.empty()) {\n      TernaryTreeNode top = st.peek();\n      st.pop();\n      if (top.token != null) {\n        suggest.add(top);\n      }\n      if (top.eqKid != null) {\n        st.push(top.eqKid);\n      }\n      if (top.loKid != null) {\n        st.push(top.loKid);\n      }\n      if (top.hiKid != null) {\n        st.push(top.hiKid);\n      }\n    }\n    return suggest;\n  }\n\n","sourceOld":"  /**\n   * Auto-completes a given prefix query using Depth-First Search with the end\n   * of prefix as source node each time finding a new leaf to get a complete key\n   * to be added in the suggest list.\n   * \n   * @param root\n   *          a reference to root node of TST.\n   * @param s\n   *          prefix query to be auto-completed.\n   * @param x\n   *          index of current character to be searched while traversing through\n   *          the prefix in TST.\n   * @return suggest list of auto-completed keys for the given prefix query.\n   */\n  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,\n          String s, int x) {\n\n    TernaryTreeNode p = root;\n    ArrayList<TernaryTreeNode> suggest = new ArrayList<TernaryTreeNode>();\n\n    while (p != null) {\n      if (s.charAt(x) < p.splitchar) {\n        p = p.loKid;\n      } else if (s.charAt(x) == p.splitchar) {\n        if (x == s.length() - 1) {\n          break;\n        } else {\n          x++;\n        }\n        p = p.eqKid;\n      } else {\n        p = p.hiKid;\n      }\n    }\n\n    if (p == null) return suggest;\n    if (p.eqKid == null && p.token == null) return suggest;\n    if (p.eqKid == null && p.token != null) {\n      suggest.add(p);\n      return suggest;\n    }\n\n    if (p.token != null) {\n      suggest.add(p);\n    }\n    p = p.eqKid;\n\n    Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();\n    st.push(p);\n    while (!st.empty()) {\n      TernaryTreeNode top = st.peek();\n      st.pop();\n      if (top.token != null) {\n        suggest.add(top);\n      }\n      if (top.eqKid != null) {\n        st.push(top.eqKid);\n      }\n      if (top.loKid != null) {\n        st.push(top.loKid);\n      }\n      if (top.hiKid != null) {\n        st.push(top.hiKid);\n      }\n    }\n    return suggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,CharSequence,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Auto-completes a given prefix query using Depth-First Search with the end\n   * of prefix as source node each time finding a new leaf to get a complete key\n   * to be added in the suggest list.\n   * \n   * @param root\n   *          a reference to root node of TST.\n   * @param s\n   *          prefix query to be auto-completed.\n   * @param x\n   *          index of current character to be searched while traversing through\n   *          the prefix in TST.\n   * @return suggest list of auto-completed keys for the given prefix query.\n   */\n  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,\n          CharSequence s, int x) {\n\n    TernaryTreeNode p = root;\n    ArrayList<TernaryTreeNode> suggest = new ArrayList<TernaryTreeNode>();\n\n    while (p != null) {\n      if (s.charAt(x) < p.splitchar) {\n        p = p.loKid;\n      } else if (s.charAt(x) == p.splitchar) {\n        if (x == s.length() - 1) {\n          break;\n        } else {\n          x++;\n        }\n        p = p.eqKid;\n      } else {\n        p = p.hiKid;\n      }\n    }\n\n    if (p == null) return suggest;\n    if (p.eqKid == null && p.token == null) return suggest;\n    if (p.eqKid == null && p.token != null) {\n      suggest.add(p);\n      return suggest;\n    }\n\n    if (p.token != null) {\n      suggest.add(p);\n    }\n    p = p.eqKid;\n\n    Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();\n    st.push(p);\n    while (!st.empty()) {\n      TernaryTreeNode top = st.peek();\n      st.pop();\n      if (top.token != null) {\n        suggest.add(top);\n      }\n      if (top.eqKid != null) {\n        st.push(top.eqKid);\n      }\n      if (top.loKid != null) {\n        st.push(top.loKid);\n      }\n      if (top.hiKid != null) {\n        st.push(top.hiKid);\n      }\n    }\n    return suggest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,CharSequence,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#prefixCompletion(TernaryTreeNode,CharSequence,int).mjava","sourceNew":"  /**\n   * Auto-completes a given prefix query using Depth-First Search with the end\n   * of prefix as source node each time finding a new leaf to get a complete key\n   * to be added in the suggest list.\n   * \n   * @param root\n   *          a reference to root node of TST.\n   * @param s\n   *          prefix query to be auto-completed.\n   * @param x\n   *          index of current character to be searched while traversing through\n   *          the prefix in TST.\n   * @return suggest list of auto-completed keys for the given prefix query.\n   */\n  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,\n          CharSequence s, int x) {\n\n    TernaryTreeNode p = root;\n    ArrayList<TernaryTreeNode> suggest = new ArrayList<TernaryTreeNode>();\n\n    while (p != null) {\n      if (s.charAt(x) < p.splitchar) {\n        p = p.loKid;\n      } else if (s.charAt(x) == p.splitchar) {\n        if (x == s.length() - 1) {\n          break;\n        } else {\n          x++;\n        }\n        p = p.eqKid;\n      } else {\n        p = p.hiKid;\n      }\n    }\n\n    if (p == null) return suggest;\n    if (p.eqKid == null && p.token == null) return suggest;\n    if (p.eqKid == null && p.token != null) {\n      suggest.add(p);\n      return suggest;\n    }\n\n    if (p.token != null) {\n      suggest.add(p);\n    }\n    p = p.eqKid;\n\n    Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();\n    st.push(p);\n    while (!st.empty()) {\n      TernaryTreeNode top = st.peek();\n      st.pop();\n      if (top.token != null) {\n        suggest.add(top);\n      }\n      if (top.eqKid != null) {\n        st.push(top.eqKid);\n      }\n      if (top.loKid != null) {\n        st.push(top.loKid);\n      }\n      if (top.hiKid != null) {\n        st.push(top.hiKid);\n      }\n    }\n    return suggest;\n  }\n\n","sourceOld":"  /**\n   * Auto-completes a given prefix query using Depth-First Search with the end\n   * of prefix as source node each time finding a new leaf to get a complete key\n   * to be added in the suggest list.\n   * \n   * @param root\n   *          a reference to root node of TST.\n   * @param s\n   *          prefix query to be auto-completed.\n   * @param x\n   *          index of current character to be searched while traversing through\n   *          the prefix in TST.\n   * @return suggest list of auto-completed keys for the given prefix query.\n   */\n  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,\n          CharSequence s, int x) {\n\n    TernaryTreeNode p = root;\n    ArrayList<TernaryTreeNode> suggest = new ArrayList<TernaryTreeNode>();\n\n    while (p != null) {\n      if (s.charAt(x) < p.splitchar) {\n        p = p.loKid;\n      } else if (s.charAt(x) == p.splitchar) {\n        if (x == s.length() - 1) {\n          break;\n        } else {\n          x++;\n        }\n        p = p.eqKid;\n      } else {\n        p = p.hiKid;\n      }\n    }\n\n    if (p == null) return suggest;\n    if (p.eqKid == null && p.token == null) return suggest;\n    if (p.eqKid == null && p.token != null) {\n      suggest.add(p);\n      return suggest;\n    }\n\n    if (p.token != null) {\n      suggest.add(p);\n    }\n    p = p.eqKid;\n\n    Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();\n    st.push(p);\n    while (!st.empty()) {\n      TernaryTreeNode top = st.peek();\n      st.pop();\n      if (top.token != null) {\n        suggest.add(top);\n      }\n      if (top.eqKid != null) {\n        st.push(top.eqKid);\n      }\n      if (top.loKid != null) {\n        st.push(top.loKid);\n      }\n      if (top.hiKid != null) {\n        st.push(top.hiKid);\n      }\n    }\n    return suggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ecc52400551de6a7d8daf646be839487911627c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}