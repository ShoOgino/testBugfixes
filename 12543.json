{"path":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(),\n        tag, true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(),\n        tag, true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(),\n        tag, true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(),\n        tag, true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(),\n        tag, true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(),\n        tag, true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(),\n        tag, true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(),\n        tag, true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(), true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(), true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(), true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(), true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedPoolingHttpClientConnectionManager#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    manager.registerGauge(null, registry, () -> getTotalStats().getAvailable(),\n        tag, true, SolrMetricManager.mkName(\"availableConnections\", scope));\n    // this acquires a lock on the connection pool; remove if contention sucks\n    manager.registerGauge(null, registry, () -> getTotalStats().getLeased(),\n        tag, true, SolrMetricManager.mkName(\"leasedConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getMax(),\n        tag, true, SolrMetricManager.mkName(\"maxConnections\", scope));\n    manager.registerGauge(null, registry, () -> getTotalStats().getPending(),\n        tag, true, SolrMetricManager.mkName(\"pendingConnections\", scope));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}