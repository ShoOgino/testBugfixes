{"path":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final IntValues vals = cache.getInts(reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IntFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IntValues vals = cache.getInts(readerContext.reader, field, creator);\n    final int[] arr = vals.values;\n    final Bits valid = vals.valid;\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(arr[doc]);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        int lower,upper;\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lowerVal==null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          lower = Integer.parseInt(lowerVal);\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n         if (upperVal==null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          upper = Integer.parseInt(upperVal);\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr[doc];\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final int[] intArr = arr;\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c220849f876de24a79f756f65b3eb045db59f63f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"c220849f876de24a79f756f65b3eb045db59f63f":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}