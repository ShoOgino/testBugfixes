{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","sourceNew":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","sourceOld":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}