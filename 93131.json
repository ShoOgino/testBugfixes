{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","commits":[{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","sourceNew":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","sourceNew":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","sourceNew":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    Path zkDir = createTempDir(\"testCollectionStateWatcherCaching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    String zkDir = createTempDir(\"testCollectionStateWatcherCaching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testCollectionStateWatcherCaching().mjava","sourceNew":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    Path zkDir = createTempDir(\"testCollectionStateWatcherCaching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0);\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0);\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testCollectionStateWatcherCaching() throws Exception  {\n    Path zkDir = createTempDir(\"testCollectionStateWatcherCaching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n      DocCollection state = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      ZkWriteCommand wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n      assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true));\n      reader.waitForState(\"c1\", 1, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState != null);\n\n      state = new DocCollection(\"c1\", new HashMap<>(), Collections.singletonMap(\"x\", \"y\"), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE + \"/c1/state.json\");\n      wc = new ZkWriteCommand(\"c1\", state);\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(wc), null);\n      writer.writePendingUpdates();\n\n      boolean found = false;\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (!timeOut.hasTimedOut())  {\n        DocCollection c1 = reader.getClusterState().getCollection(\"c1\");\n        if (\"y\".equals(c1.getStr(\"x\"))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"Could not find updated property in collection c1 even after 5 seconds\", found);\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}