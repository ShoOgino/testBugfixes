{"path":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ada808d1fd6b1afb13af55a1dee4c15527af578","date":1337156389,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumerHolder docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerHolder docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerHolder(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumerAndDocID;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumerHolder docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerHolder docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    docValuesConsumerAndDocID = new DocValuesConsumerHolder(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumerAndDocID;\n  }\n\n","sourceOld":"  DocValuesConsumerHolder docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerHolder docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerHolder(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumerAndDocID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":null,"sourceOld":"  DocValuesConsumerHolder docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerHolder docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    docValuesConsumerAndDocID = new DocValuesConsumerHolder(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumerAndDocID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":null,"sourceOld":"  DocValuesConsumerHolder docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerHolder docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n      if (perDocConsumer == null) {\n        throw new IllegalStateException(\"codec=\" +  docState.docWriter.codec + \" does not support docValues: from docValuesFormat().docsConsumer(...) returned null; field=\" + fieldInfo.name);\n      }\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    assert fieldInfo.getDocValuesType() == null || fieldInfo.getDocValuesType() == valueType;\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerHolder(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumerAndDocID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b7523dd562634d9145b67eb4c8b3b3db2340532b","2ada808d1fd6b1afb13af55a1dee4c15527af578"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","0837ab0472feecb3a54260729d845f839e1cbd72"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"0837ab0472feecb3a54260729d845f839e1cbd72":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["d4d69c535930b5cce125cff868d40f6373dc27d4","30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2ada808d1fd6b1afb13af55a1dee4c15527af578"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}