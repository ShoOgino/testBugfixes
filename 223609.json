{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#lockForSplit(SolrCloudManager,String,String).mjava","commits":[{"id":"ae70f2df00762dfce0455c0e39381848762662e5","date":1539113410,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#lockForSplit(SolrCloudManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean lockForSplit(SolrCloudManager cloudManager, String collection, String shard) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/\" + shard + \"-splitting\";\n    if (cloudManager.getDistribStateManager().hasData(path)) {\n      return false;\n    }\n    Map<String, Object> map = new HashMap<>();\n    map.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n    byte[] data = Utils.toJSON(map);\n    try {\n      cloudManager.getDistribStateManager().makePath(path, data, CreateMode.EPHEMERAL, true);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n          collection + \"/\" + shard, e);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#lockForSplit(SolrCloudManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#lockForSplit(SolrCloudManager,String,String).mjava","sourceNew":"  public static boolean lockForSplit(SolrCloudManager cloudManager, String collection, String shard) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/\" + shard + \"-splitting\";\n    final DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    synchronized (stateManager) {\n      if (stateManager.hasData(path)) {\n        VersionedData vd = stateManager.getData(path);\n        return false;\n      }\n      Map<String, Object> map = new HashMap<>();\n      map.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      byte[] data = Utils.toJSON(map);\n      try {\n        cloudManager.getDistribStateManager().makePath(path, data, CreateMode.EPHEMERAL, true);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collection + \"/\" + shard, e);\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public static boolean lockForSplit(SolrCloudManager cloudManager, String collection, String shard) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/\" + shard + \"-splitting\";\n    if (cloudManager.getDistribStateManager().hasData(path)) {\n      return false;\n    }\n    Map<String, Object> map = new HashMap<>();\n    map.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n    byte[] data = Utils.toJSON(map);\n    try {\n      cloudManager.getDistribStateManager().makePath(path, data, CreateMode.EPHEMERAL, true);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n          collection + \"/\" + shard, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cac1f2920f8057198f04505797cbabf74dd9a97":["ae70f2df00762dfce0455c0e39381848762662e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"ae70f2df00762dfce0455c0e39381848762662e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7cac1f2920f8057198f04505797cbabf74dd9a97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae70f2df00762dfce0455c0e39381848762662e5"],"ae70f2df00762dfce0455c0e39381848762662e5":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}