{"path":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","commits":[{"id":"f225b9b576dc345ee8c27f91147b4afc0350511c","date":1373552135,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2901fdf41816ed0ac227f1c2245c963778fb2074","date":1375381090,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Exception e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#getNode(String,Document,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,Document,boolean).mjava","sourceNew":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Exception e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, Document doc, boolean errIfMissing) {\n    XPath xpath = xpathFactory.newXPath();\n    String xstr = normalize(path);\n\n    try {\n      NodeList nodes = (NodeList)xpath.evaluate(xstr, doc, \n                                                XPathConstants.NODESET);\n      if (nodes==null || 0 == nodes.getLength() ) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n      if ( 1 < nodes.getLength() ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                                 name + \" contains more than one value for config path: \" + path);\n      }\n      Node nd = nodes.item(0);\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Exception e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2901fdf41816ed0ac227f1c2245c963778fb2074"],"2901fdf41816ed0ac227f1c2245c963778fb2074":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f225b9b576dc345ee8c27f91147b4afc0350511c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f225b9b576dc345ee8c27f91147b4afc0350511c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["2901fdf41816ed0ac227f1c2245c963778fb2074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2901fdf41816ed0ac227f1c2245c963778fb2074":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f225b9b576dc345ee8c27f91147b4afc0350511c"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["2901fdf41816ed0ac227f1c2245c963778fb2074","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}