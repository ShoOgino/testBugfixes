{"path":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf","date":1190224983,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLInputFactory inputFactory = BaseXMLInputFactory.newInstance();\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d251a92048ac6223541a40d02ce1d472d7c3659","date":1190230853,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLInputFactory inputFactory = BaseXMLInputFactory.newInstance();\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"5d251a92048ac6223541a40d02ce1d472d7c3659":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":[],"5d251a92048ac6223541a40d02ce1d472d7c3659":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}