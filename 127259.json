{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","commits":[{"id":"09c24344d8c547da8d804ff8a4cdb9ef0decf980","date":1302800830,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemmer#unpalatalize(char[],int).mjava","sourceNew":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Most cases are handled except for the ambiguous ones:\n   * <ul>\n   *  <li> s -> š\n   *  <li> t -> š\n   *  <li> d -> ž\n   *  <li> z -> ž\n   * </ul>\n   */\n  private int unpalatalize(char s[], int len) {\n    // we check the character removed: if its -u then \n    // its 2,5, or 6 gen pl., and these two can only apply then.\n    if (s[len] == 'u') {\n      // kš -> kst\n      if (endsWith(s, len, \"kš\")) {\n        len++;\n        s[len-2] = 's';\n        s[len-1] = 't';\n        return len;\n      }\n      // ņņ -> nn\n      if (endsWith(s, len, \"ņņ\")) {\n        s[len-2] = 'n';\n        s[len-1] = 'n';\n        return len;\n      }\n    }\n    \n    // otherwise all other rules\n    if (endsWith(s, len, \"pj\") || endsWith(s, len, \"bj\") \n        || endsWith(s, len, \"mj\") || endsWith(s, len, \"vj\")) {\n      // labial consonant\n      return len-1;\n    } else if (endsWith(s, len, \"šņ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"žņ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"šļ\")) {\n      s[len-2] = 's';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"žļ\")) {\n      s[len-2] = 'z';\n      s[len-1] = 'l';\n      return len;\n    } else if (endsWith(s, len, \"ļņ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'n';\n      return len;\n    } else if (endsWith(s, len, \"ļļ\")) {\n      s[len-2] = 'l';\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'č') {\n      s[len-1] = 'c';\n      return len;\n    } else if (s[len-1] == 'ļ') {\n      s[len-1] = 'l';\n      return len;\n    } else if (s[len-1] == 'ņ') {\n      s[len-1] = 'n';\n      return len;\n    }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"09c24344d8c547da8d804ff8a4cdb9ef0decf980":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09c24344d8c547da8d804ff8a4cdb9ef0decf980":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c24344d8c547da8d804ff8a4cdb9ef0decf980","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}