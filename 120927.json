{"path":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","commits":[{"id":"601d9833fde808908a07757f62455c31acfa0d03","date":1124626980,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().delete(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["336014c3ea4eb3050435c39b80da64b0b9df2052"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().delete(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","bugFix":null,"bugIntro":["336014c3ea4eb3050435c39b80da64b0b9df2052"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    ScoreDoc[] hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    Hits hits = is.search(new MatchAllDocsQuery());\n    assertEquals(3, hits.length());\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(3, hits.length());\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq);\n    assertEquals(1, hits.length());\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery());\n    assertEquals(2, hits.length());\n    \n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    ScoreDoc[] hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    ScoreDoc[] hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caac0f1ac2f26209f8a5a2eeb0e97ff0e8a71a54","date":1237473655,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw);\n    addDoc(\"two\", iw);\n    addDoc(\"three four\", iw);\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(dir);\n    ScoreDoc[] hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"336014c3ea4eb3050435c39b80da64b0b9df2052","date":1250636958,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["601d9833fde808908a07757f62455c31acfa0d03","0018e7a0579df5d3de71d0bd878322a7abef04d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a1aa47f77d2b78da54b65c3686e8d230617ae3b","date":1254585188,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(\"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"0a046c0c310bc77931fc8441bd920053b607dd14":["336014c3ea4eb3050435c39b80da64b0b9df2052","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"ba1116b3450a9c1642c89445d131b37344055245":["0a1aa47f77d2b78da54b65c3686e8d230617ae3b"],"0a1aa47f77d2b78da54b65c3686e8d230617ae3b":["0a046c0c310bc77931fc8441bd920053b607dd14"],"336014c3ea4eb3050435c39b80da64b0b9df2052":["caac0f1ac2f26209f8a5a2eeb0e97ff0e8a71a54"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"caac0f1ac2f26209f8a5a2eeb0e97ff0e8a71a54":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"601d9833fde808908a07757f62455c31acfa0d03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["336014c3ea4eb3050435c39b80da64b0b9df2052"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["601d9833fde808908a07757f62455c31acfa0d03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0a1aa47f77d2b78da54b65c3686e8d230617ae3b"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"336014c3ea4eb3050435c39b80da64b0b9df2052":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0a1aa47f77d2b78da54b65c3686e8d230617ae3b":["ba1116b3450a9c1642c89445d131b37344055245"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["caac0f1ac2f26209f8a5a2eeb0e97ff0e8a71a54"],"caac0f1ac2f26209f8a5a2eeb0e97ff0e8a71a54":["336014c3ea4eb3050435c39b80da64b0b9df2052"],"601d9833fde808908a07757f62455c31acfa0d03":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["601d9833fde808908a07757f62455c31acfa0d03"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}