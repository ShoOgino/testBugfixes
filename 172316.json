{"path":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}