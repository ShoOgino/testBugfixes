{"path":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","commits":[{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"    CacheInfo(CacheConfig cfg, SolrCore core) {\n      this.core = core;\n      this.cfg = cfg;\n      pkg = cfg.args.get(CommonParams.PACKAGE);\n      ResourceLoader loader = pkg == null ? core.getResourceLoader() :\n          core.getCoreContainer().getPackageManager().getResourceLoader(pkg);\n\n      try {\n        cache = loader.findClass(cfg.cacheImpl, SolrCache.class).getConstructor().newInstance();\n        regen = null;\n        if (cfg.regenImpl != null) {\n          regen = loader.findClass(cfg.regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + cfg.jsonStr(), e);\n      }\n      if (regen == null && cfg.defRegen != null) regen = cfg.defRegen;\n      cfg.persistence[0] = cache.init(cfg.args, cfg.persistence[0], regen);\n      if (loader instanceof MemClassLoader) {\n        MemClassLoader memClassLoader = (MemClassLoader) loader;\n        znodeVersion = memClassLoader.getZnodeVersion();\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","sourceNew":"    CacheInfo(CacheConfig cfg, SolrCore core) {\n      this.core = core;\n      this.cfg = cfg;\n      pkg = cfg.args.attributes.get(CommonParams.PACKAGE);\n      ResourceLoader loader = pkg == null ? core.getResourceLoader() :\n          core.getCoreContainer().getPackageManager().getResourceLoader(pkg);\n\n      try {\n        cache = loader.findClass(cfg.cacheImpl, SolrCache.class).getConstructor().newInstance();\n        regen = null;\n        if (cfg.regenImpl != null) {\n          regen = loader.findClass(cfg.regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + cfg.jsonStr(), e);\n      }\n      if (regen == null && cfg.defRegen != null) regen = cfg.defRegen;\n      cfg.persistence[0] = cache.init(cfg.args.attributes, cfg.persistence[0], regen);\n      if (pkg!=null && loader instanceof MemClassLoader) {\n        MemClassLoader memClassLoader = (MemClassLoader) loader;\n        runtimeLib = core.getCoreContainer().getPackageManager().getLib(pkg);\n      }\n\n    }\n\n","sourceOld":"    CacheInfo(CacheConfig cfg, SolrCore core) {\n      this.core = core;\n      this.cfg = cfg;\n      pkg = cfg.args.get(CommonParams.PACKAGE);\n      ResourceLoader loader = pkg == null ? core.getResourceLoader() :\n          core.getCoreContainer().getPackageManager().getResourceLoader(pkg);\n\n      try {\n        cache = loader.findClass(cfg.cacheImpl, SolrCache.class).getConstructor().newInstance();\n        regen = null;\n        if (cfg.regenImpl != null) {\n          regen = loader.findClass(cfg.regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + cfg.jsonStr(), e);\n      }\n      if (regen == null && cfg.defRegen != null) regen = cfg.defRegen;\n      cfg.persistence[0] = cache.init(cfg.args, cfg.persistence[0], regen);\n      if (loader instanceof MemClassLoader) {\n        MemClassLoader memClassLoader = (MemClassLoader) loader;\n        znodeVersion = memClassLoader.getZnodeVersion();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","sourceNew":null,"sourceOld":"    CacheInfo(CacheConfig cfg, SolrCore core) {\n      this.core = core;\n      this.cfg = cfg;\n      pkg = cfg.args.attributes.get(CommonParams.PACKAGE);\n      ResourceLoader loader = pkg == null ? core.getResourceLoader() :\n          core.getCoreContainer().getPackageManager().getResourceLoader(pkg);\n\n      try {\n        cache = loader.findClass(cfg.cacheImpl, SolrCache.class).getConstructor().newInstance();\n        regen = null;\n        if (cfg.regenImpl != null) {\n          regen = loader.findClass(cfg.regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + cfg.jsonStr(), e);\n      }\n      if (regen == null && cfg.defRegen != null) regen = cfg.defRegen;\n      cfg.persistence[0] = cache.init(cfg.args.attributes, cfg.persistence[0], regen);\n      if (pkg!=null && loader instanceof MemClassLoader) {\n        MemClassLoader memClassLoader = (MemClassLoader) loader;\n        runtimeLib = core.getCoreContainer().getPackageManager().getLib(pkg);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig.CacheInfo#CacheInfo(CacheConfig,SolrCore).mjava","sourceNew":null,"sourceOld":"    CacheInfo(CacheConfig cfg, SolrCore core) {\n      this.core = core;\n      this.cfg = cfg;\n      pkg = cfg.args.attributes.get(CommonParams.PACKAGE);\n      ResourceLoader loader = pkg == null ? core.getResourceLoader() :\n          core.getCoreContainer().getPackageManager().getResourceLoader(pkg);\n\n      try {\n        cache = loader.findClass(cfg.cacheImpl, SolrCache.class).getConstructor().newInstance();\n        regen = null;\n        if (cfg.regenImpl != null) {\n          regen = loader.findClass(cfg.regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + cfg.jsonStr(), e);\n      }\n      if (regen == null && cfg.defRegen != null) regen = cfg.defRegen;\n      cfg.persistence[0] = cache.init(cfg.args.attributes, cfg.persistence[0], regen);\n      if (pkg!=null && loader instanceof MemClassLoader) {\n        MemClassLoader memClassLoader = (MemClassLoader) loader;\n        runtimeLib = core.getCoreContainer().getPackageManager().getLib(pkg);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}