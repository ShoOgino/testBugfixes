{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"/dev/null","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}