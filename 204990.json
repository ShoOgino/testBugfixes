{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_UNSTORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newField(\"group\", groupValue.group.utf8ToString(), StringField.TYPE_UNSTORED));\n        }\n        doc.add(newField(\"sort1\", groupValue.sort1.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(newField(\"sort2\", groupValue.sort2.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"id\", groupValue.id));\n        doc.add(newField(\"content\", groupValue.content, TextField.TYPE_UNSTORED));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_UNSTORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newField(\"group\", groupValue.group.utf8ToString(), StringField.TYPE_UNSTORED));\n        }\n        doc.add(newField(\"sort1\", groupValue.sort1.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(newField(\"sort2\", groupValue.sort2.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"id\", groupValue.id));\n        doc.add(newField(\"content\", groupValue.content, TextField.TYPE_UNSTORED));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.NO));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_UNSTORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newField(\"group\", groupValue.group.utf8ToString(), StringField.TYPE_UNSTORED));\n        }\n        doc.add(newField(\"sort1\", groupValue.sort1.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(newField(\"sort2\", groupValue.sort2.utf8ToString(), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"id\", groupValue.id));\n        doc.add(newField(\"content\", groupValue.content, TextField.TYPE_UNSTORED));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","1509f151d7692d84fae414b2b799ac06ba60fcb4","7cb194976386e349893169fee3c2aa6de3a83fd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.NO));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.NO));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<BytesRef,List<GroupDoc>>();\n    final List<BytesRef> groupValues = new ArrayList<BytesRef>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<List<Document>>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<Document>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b36581872266f87caefe066d71f76c81cf1b636e","date":1399817565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                     new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getDocBlockReader(Directory,GroupDoc[]).mjava","sourceNew":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","sourceOld":"  private DirectoryReader getDocBlockReader(Directory dir, GroupDoc[] groupDocs) throws IOException {\n    // Coalesce by group, but in random order:\n    Collections.shuffle(Arrays.asList(groupDocs), random());\n    final Map<BytesRef,List<GroupDoc>> groupMap = new HashMap<>();\n    final List<BytesRef> groupValues = new ArrayList<>();\n\n    for(GroupDoc groupDoc : groupDocs) {\n      if (!groupMap.containsKey(groupDoc.group)) {\n        groupValues.add(groupDoc.group);\n        groupMap.put(groupDoc.group, new ArrayList<GroupDoc>());\n      }\n      groupMap.get(groupDoc.group).add(groupDoc);\n    }\n\n    RandomIndexWriter w = new RandomIndexWriter(\n                                                random(),\n                                                dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final List<List<Document>> updateDocs = new ArrayList<>();\n\n    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);\n    groupEndType.setIndexOptions(IndexOptions.DOCS);\n    groupEndType.setOmitNorms(true);\n\n    //System.out.println(\"TEST: index groups\");\n    for(BytesRef group : groupValues) {\n      final List<Document> docs = new ArrayList<>();\n      //System.out.println(\"TEST:   group=\" + (group == null ? \"null\" : group.utf8ToString()));\n      for(GroupDoc groupValue : groupMap.get(group)) {\n        Document doc = new Document();\n        docs.add(doc);\n        if (groupValue.group != null) {\n          doc.add(newStringField(\"group\", groupValue.group.utf8ToString(), Field.Store.YES));\n          doc.add(new SortedDocValuesField(\"group\", BytesRef.deepCopyOf(groupValue.group)));\n        }\n        doc.add(newStringField(\"sort1\", groupValue.sort1.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort1\", BytesRef.deepCopyOf(groupValue.sort1)));\n        doc.add(newStringField(\"sort2\", groupValue.sort2.utf8ToString(), Field.Store.NO));\n        doc.add(new SortedDocValuesField(\"sort2\", BytesRef.deepCopyOf(groupValue.sort2)));\n        doc.add(new IntField(\"id\", groupValue.id, Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"id\", groupValue.id));\n        doc.add(newTextField(\"content\", groupValue.content, Field.Store.NO));\n        //System.out.println(\"TEST:     doc content=\" + groupValue.content + \" group=\" + (groupValue.group == null ? \"null\" : groupValue.group.utf8ToString()) + \" sort1=\" + groupValue.sort1.utf8ToString() + \" id=\" + groupValue.id);\n      }\n      // So we can pull filter marking last doc in block:\n      final Field groupEnd = newField(\"groupend\", \"x\", groupEndType);\n      docs.get(docs.size()-1).add(groupEnd);\n      // Add as a doc block:\n      w.addDocuments(docs);\n      if (group != null && random().nextInt(7) == 4) {\n        updateDocs.add(docs);\n      }\n    }\n\n    for(List<Document> docs : updateDocs) {\n      // Just replaces docs w/ same docs:\n      w.updateDocuments(new Term(\"group\", docs.get(0).get(\"group\")), docs);\n    }\n\n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b36581872266f87caefe066d71f76c81cf1b636e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","409324b31a1419d7c05a38211168cf317e39be77"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b36581872266f87caefe066d71f76c81cf1b636e"],"97d4692d0c601ff773f0a2231967312428a904e4":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["97d4692d0c601ff773f0a2231967312428a904e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b36581872266f87caefe066d71f76c81cf1b636e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["770342641f7b505eaa8dccdc666158bff2419109"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"1d028314cced5858683a1bb4741423d0f934257b":["97d4692d0c601ff773f0a2231967312428a904e4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b36581872266f87caefe066d71f76c81cf1b636e","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}