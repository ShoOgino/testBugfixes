{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia#directory(int,File).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia#directory(int,File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia#directory(int,File).mjava","sourceNew":"  public File directory(int count, File directory) {\n    if (directory == null) {\n      directory = outputDir;\n    }\n    int base = BASE;\n    while (base <= count) {\n      base *= BASE;\n    }\n    if (count < BASE) {\n      return directory;\n    }\n    directory = new File(directory, (Integer.toString(base / BASE)));\n    directory = new File(directory, (Integer.toString(count / (base / BASE))));\n    return directory(count % (base / BASE), directory);\n  }\n\n","sourceOld":"  public File directory(int count, File directory) {\n    if (directory == null) {\n      directory = outputDir;\n    }\n    int base = BASE;\n    while (base <= count) {\n      base *= BASE;\n    }\n    if (count < BASE) {\n      return directory;\n    }\n    directory = new File(directory, (Integer.toString(base / BASE)));\n    directory = new File(directory, (Integer.toString(count / (base / BASE))));\n    return directory(count % (base / BASE), directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia#directory(int,Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia#directory(int,File).mjava","sourceNew":"  public Path directory(int count, Path directory) {\n    if (directory == null) {\n      directory = outputDir;\n    }\n    int base = BASE;\n    while (base <= count) {\n      base *= BASE;\n    }\n    if (count < BASE) {\n      return directory;\n    }\n    directory = directory.resolve(Integer.toString(base / BASE));\n    directory = directory.resolve(Integer.toString(count / (base / BASE)));\n    return directory(count % (base / BASE), directory);\n  }\n\n","sourceOld":"  public File directory(int count, File directory) {\n    if (directory == null) {\n      directory = outputDir;\n    }\n    int base = BASE;\n    while (base <= count) {\n      base *= BASE;\n    }\n    if (count < BASE) {\n      return directory;\n    }\n    directory = new File(directory, (Integer.toString(base / BASE)));\n    directory = new File(directory, (Integer.toString(count / (base / BASE))));\n    return directory(count % (base / BASE), directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}