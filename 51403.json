{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#pointOnBearingRAD(double,double,double,double,double[]).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#pointOnBearingRAD(double,double,double,double,double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   *\n   *\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distanceRAD The distance to travel along the bearing in radians.\n   * @param bearingRAD The bearing, in radians.  North is a 0, moving clockwise till radians(360).\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearingRAD(double startLat, double startLon, double distanceRAD, double bearingRAD, double[] result) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))\n\n     */\n    double cosAngDist = Math.cos(distanceRAD);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distanceRAD);\n    double sinStartLat = Math.sin(startLat);\n    double lat2 = Math.asin(sinStartLat * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearingRAD));\n\n    double lon2 = startLon + Math.atan2(Math.sin(bearingRAD) * sinAngDist * cosStartLat,\n            cosAngDist - sinStartLat * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize lon first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLngRAD(result);\n\n    // normalize lat - could flip poles\n    normLatRAD(result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#pointOnBearingRAD(double,double,double,double,double[]).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#pointOnBearingRAD(double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   *\n   *\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distanceRAD The distance to travel along the bearing in radians.\n   * @param bearingRAD The bearing, in radians.  North is a 0, moving clockwise till radians(360).\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearingRAD(double startLat, double startLon, double distanceRAD, double bearingRAD, double[] result) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))\n\n     */\n    double cosAngDist = Math.cos(distanceRAD);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distanceRAD);\n    double sinStartLat = Math.sin(startLat);\n    double lat2 = Math.asin(sinStartLat * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearingRAD));\n\n    double lon2 = startLon + Math.atan2(Math.sin(bearingRAD) * sinAngDist * cosStartLat,\n            cosAngDist - sinStartLat * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize lon first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLngRAD(result);\n\n    // normalize lat - could flip poles\n    normLatRAD(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Given a start point (startLat, startLon) and a bearing on a sphere of radius <i>sphereRadius</i>, return the destination point.\n   *\n   *\n   * @param startLat The starting point latitude, in radians\n   * @param startLon The starting point longitude, in radians\n   * @param distanceRAD The distance to travel along the bearing in radians.\n   * @param bearingRAD The bearing, in radians.  North is a 0, moving clockwise till radians(360).\n   * @param result A preallocated array to hold the results.  If null, a new one is constructed.\n   * @return The destination point, in radians.  First entry is latitude, second is longitude\n   */\n  public static double[] pointOnBearingRAD(double startLat, double startLon, double distanceRAD, double bearingRAD, double[] result) {\n    /*\n \tlat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(θ))\n  \tlon2 = lon1 + atan2(sin(θ)*sin(d/R)*cos(lat1), cos(d/R)−sin(lat1)*sin(lat2))\n\n     */\n    double cosAngDist = Math.cos(distanceRAD);\n    double cosStartLat = Math.cos(startLat);\n    double sinAngDist = Math.sin(distanceRAD);\n    double sinStartLat = Math.sin(startLat);\n    double lat2 = Math.asin(sinStartLat * cosAngDist +\n            cosStartLat * sinAngDist * Math.cos(bearingRAD));\n\n    double lon2 = startLon + Math.atan2(Math.sin(bearingRAD) * sinAngDist * cosStartLat,\n            cosAngDist - sinStartLat * Math.sin(lat2));\n\n    /*lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;*/\n    //From Lucene.  Move back to Lucene when synced\n    // normalize lon first\n    if (result == null || result.length != 2){\n      result = new double[2];\n    }\n    result[0] = lat2;\n    result[1] = lon2;\n    normLngRAD(result);\n\n    // normalize lat - could flip poles\n    normLatRAD(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}