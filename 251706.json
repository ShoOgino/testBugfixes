{"path":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"/dev/null","sourceNew":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":null,"sourceOld":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"/dev/null","sourceNew":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    CommitUpdateCommand cmd = new CommitUpdateCommand(false);\n    cmd.waitFlush = true;\n    cmd.waitSearcher = true;\n    solrCore.getUpdateHandler().commit(cmd);\n    if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n      LOG.info(\"Force open index writer to make sure older index files get deleted\");\n      DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n      handler.forceOpenWriter();\n      replicationHandler.refreshCommitpoint();\n    } else  {\n      LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n              \"ReplicationHandler may not be able to cleanup un-used index files.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n      cmd.waitFlush = true;\n      cmd.waitSearcher = true;\n      solrCore.getUpdateHandler().commit(cmd);\n      if (solrCore.getUpdateHandler() instanceof DirectUpdateHandler2) {\n        LOG.info(\"Force open index writer to make sure older index files get deleted\");\n        DirectUpdateHandler2 handler = (DirectUpdateHandler2) solrCore.getUpdateHandler();\n        handler.forceOpenWriter();\n        replicationHandler.refreshCommitpoint();\n      } else  {\n        LOG.warn(\"The update handler is not an instance or sub-class of DirectUpdateHandler2. \" +\n            \"ReplicationHandler may not be able to cleanup un-used index files.\");\n      }\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}