{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.write(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.write(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.write(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb27634f76319b68d6d8fd11a7104d20294722c5","date":1355210077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.getPosition();\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.getPosition()-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.getPosition() - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.getPosition()-upto-1];\n        bytes[writer.getPosition()-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.getPosition()-posSave);\n    writer.setPosition(posSave);\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.getPosition();\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.getPosition()-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.getPosition() - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.getPosition()-upto-1];\n        bytes[writer.getPosition()-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.getPosition()-posSave);\n    writer.setPosition(posSave);\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.posWrite;\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.posWrite-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.posWrite - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.posWrite-upto-1];\n        bytes[writer.posWrite-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.posWrite-posSave);\n    writer.posWrite = posSave;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09827d0d9c0291b55c1258295b29a4fe7f0a1f40","date":1357659901,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.getPosition();\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.getPosition()-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.getPosition() - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.getPosition()-upto-1];\n        bytes[writer.getPosition()-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.getPosition()-posSave);\n    writer.setPosition(posSave);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n\n    // TODO: this is messy -- replace with sillyBytesWriter; maybe make\n    // bytes private\n    final int posSave = writer.getPosition();\n    outputs.writeFinalOutput(emptyOutput, writer);\n    emptyOutputBytes = new byte[writer.getPosition()-posSave];\n\n    if (!packed) {\n      // reverse\n      final int stopAt = (writer.getPosition() - posSave)/2;\n      int upto = 0;\n      while(upto < stopAt) {\n        final byte b = bytes[posSave + upto];\n        bytes[posSave+upto] = bytes[writer.getPosition()-upto-1];\n        bytes[writer.getPosition()-upto-1] = b;\n        upto++;\n      }\n    }\n    System.arraycopy(bytes, posSave, emptyOutputBytes, 0, writer.getPosition()-posSave);\n    writer.setPosition(posSave);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#setEmptyOutput(T).mjava","sourceNew":"  void setEmptyOutput(T v) {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","sourceOld":"  void setEmptyOutput(T v) throws IOException {\n    if (emptyOutput != null) {\n      emptyOutput = outputs.merge(emptyOutput, v);\n    } else {\n      emptyOutput = v;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["09827d0d9c0291b55c1258295b29a4fe7f0a1f40"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","cb27634f76319b68d6d8fd11a7104d20294722c5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09827d0d9c0291b55c1258295b29a4fe7f0a1f40":["cb27634f76319b68d6d8fd11a7104d20294722c5"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["09827d0d9c0291b55c1258295b29a4fe7f0a1f40","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09827d0d9c0291b55c1258295b29a4fe7f0a1f40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cb27634f76319b68d6d8fd11a7104d20294722c5":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"09827d0d9c0291b55c1258295b29a4fe7f0a1f40":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb27634f76319b68d6d8fd11a7104d20294722c5"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cb27634f76319b68d6d8fd11a7104d20294722c5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09827d0d9c0291b55c1258295b29a4fe7f0a1f40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}