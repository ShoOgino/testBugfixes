{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","commits":[{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanFilter f = new BooleanFilter();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.MUST);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanFilter lonF = new BooleanFilter();\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.MUST);\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7e72caffc799b265e17158ff9b0aad014849ad8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e422c83fa76f222b42571ac39b5e38a721a6c032","date":1393005461,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanFilter f = new BooleanFilter();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.MUST);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanFilter lonF = new BooleanFilter();\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.MUST);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanFilter f = new BooleanFilter();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.MUST);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanFilter lonF = new BooleanFilter();\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.MUST);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanFilter f = new BooleanFilter();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.MUST);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanFilter lonF = new BooleanFilter();\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeFilter.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.MUST);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeFilter.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeFilter.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f.build());\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery f = new BooleanQuery();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery lonF = new BooleanQuery();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF, BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["099c774ddd27f4ad437ca5df14d153bab0a3affe","2713584a660051cd646423be682771e3bbd99985"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["e422c83fa76f222b42571ac39b5e38a721a6c032"],"2713584a660051cd646423be682771e3bbd99985":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40640359164f629dd440a47df2e145d084ce9645":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e422c83fa76f222b42571ac39b5e38a721a6c032":["40640359164f629dd440a47df2e145d084ce9645"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40640359164f629dd440a47df2e145d084ce9645"],"40640359164f629dd440a47df2e145d084ce9645":["e422c83fa76f222b42571ac39b5e38a721a6c032"],"e422c83fa76f222b42571ac39b5e38a721a6c032":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}