{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","commits":[{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","pathOld":"/dev/null","sourceNew":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    List<CopyFieldInfo> copyFields = new ArrayList<>();\n    \n    final String putFieldName = \"newfieldPut\";\n    final String postFieldName = \"newfieldPost\";\n\n    for (int i = 0; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n\n      int type = random().nextInt(3);\n      if (type == 0) { // send an add field via PUT\n        addFieldPut(publisher, putFieldName + numAddFieldPuts++);\n      }\n      else if (type == 1) { // send an add field via POST\n        addFieldPost(publisher, postFieldName + numAddFieldPosts++);\n      }\n      else if (type == 2) { // send a copy field\n        String sourceField = null;\n        String destField = null;\n\n        int sourceType = random().nextInt(3);\n        if (sourceType == 0) {  // existing\n          sourceField = \"name\";\n        } else if (sourceType == 1) { // newly created\n          sourceField = \"copySource\" + i;\n          addFieldPut(publisher, sourceField);\n        } else { // dynamic\n          sourceField = \"*_dynamicSource\" + i + \"_t\";\n          // * only supported if both src and dst use it\n          destField = \"*_dynamicDest\" + i + \"_t\";\n        }\n        \n        if (destField == null) {\n          int destType = random().nextInt(2);\n          if (destType == 0) {  // existing\n            destField = \"title\";\n          } else { // newly created\n            destField = \"copyDest\" + i;\n            addFieldPut(publisher, destField);\n          }\n        }\n        copyField(publisher, sourceField, destField);\n        copyFields.add(new CopyFieldInfo(sourceField, destField));\n      }\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, putFieldName,\n                                                           numAddFieldPosts, postFieldName);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(copyFields);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    List<CopyFieldInfo> copyFields = new ArrayList<>();\n    \n    final String putFieldName = \"newfieldPut\";\n    final String postFieldName = \"newfieldPost\";\n\n    for (int i = 0; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n\n      int type = random().nextInt(3);\n      if (type == 0) { // send an add field via PUT\n        addFieldPut(publisher, putFieldName + numAddFieldPuts++);\n      }\n      else if (type == 1) { // send an add field via POST\n        addFieldPost(publisher, postFieldName + numAddFieldPosts++);\n      }\n      else if (type == 2) { // send a copy field\n        String sourceField = null;\n        String destField = null;\n\n        int sourceType = random().nextInt(3);\n        if (sourceType == 0) {  // existing\n          sourceField = \"name\";\n        } else if (sourceType == 1) { // newly created\n          sourceField = \"copySource\" + i;\n          addFieldPut(publisher, sourceField);\n        } else { // dynamic\n          sourceField = \"*_dynamicSource\" + i + \"_t\";\n          // * only supported if both src and dst use it\n          destField = \"*_dynamicDest\" + i + \"_t\";\n        }\n        \n        if (destField == null) {\n          int destType = random().nextInt(2);\n          if (destType == 0) {  // existing\n            destField = \"title\";\n          } else { // newly created\n            destField = \"copyDest\" + i;\n            addFieldPut(publisher, destField);\n          }\n        }\n        copyField(publisher, sourceField, destField);\n        copyFields.add(new CopyFieldInfo(sourceField, destField));\n      }\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, putFieldName,\n                                                           numAddFieldPosts, postFieldName);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(copyFields);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8c645ec119d18a65174f4cbb1c927792ff814","date":1500897120,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":null,"sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":null,"sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":null,"sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","pathOld":"/dev/null","sourceNew":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c717efc76ccf2ea435c52fa36a4774056fe8b4d4","date":1501575440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#concurrentOperationsTest().mjava","sourceNew":null,"sourceOld":"  private void concurrentOperationsTest() throws Exception {\n    \n    // First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    Info info = new Info(\"\");\n\n    for (int fieldNum = 0; fieldNum <= numFields ; ++fieldNum) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      Operation.randomOperation().execute(publisher, fieldNum, info);\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(info);\n    String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(info);\n    String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldTypePuts and addFieldTypePosts\n        request = \"/schema/fieldtypes?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n        if (result != null) {\n          break;\n        }\n\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify addDynamicFieldPuts and addDynamicFieldPosts\n        request = \"/schema/dynamicfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a52341299179de5479672f7cf518bf4b173f34b3"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["344b0840364d990b29b97467bfcc766ff8325d11"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"344b0840364d990b29b97467bfcc766ff8325d11":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a52341299179de5479672f7cf518bf4b173f34b3","c3a8c645ec119d18a65174f4cbb1c927792ff814","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}