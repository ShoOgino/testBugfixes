{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits deletedDocs = MultiFields.getDeletedDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, deletedDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits deletedDocs = MultiFields.getDeletedDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, deletedDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in our cache, we can return the\n    // response directly from it:\n    int res = cache.get(categoryPath);\n    if (res >= 0) {\n      return res;\n    }\n    // If we know that the cache is complete, i.e., contains every category\n    // which exists, we can return -1 immediately. However, if the cache is\n    // not complete, we need to check the disk.\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as a \"online\n    // algorithm\".\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath);\n    }\n\n    // We need to get an answer from the on-disk index. If a reader\n    // is not yet open, do it now:\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    // Note: we do NOT add to the cache the fact that the category\n    // does not exist. The reason is that our only use for this\n    // method is just before we actually add this category. If\n    // in the future this usage changes, we should consider caching\n    // the fact that the category is not in the taxonomy.\n    addToCache(categoryPath, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}