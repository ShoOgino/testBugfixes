{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["86fff6c123a5a1d38adb665dd045347219798da9","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"86fff6c123a5a1d38adb665dd045347219798da9":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}