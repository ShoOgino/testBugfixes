{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#testLongCompressorMonkey().mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#testLongCompressorMonkey().mjava","pathOld":"/dev/null","sourceNew":"  // Simple money test that builds a collection of random longs, compresses them with LongCompressor and\n  // checks if all values from the compressed version are equal to the source\n  public void testLongCompressorMonkey() {\n    final int RUNS = 10;\n    final int[] MAX_SIZES = new int[]{0, 1, 10, 1000, 100_000};\n    final int[] MAX_VALUE = new int[]{0, 1, 10, 1000, 100_000};\n    for (int run = 0 ; run < RUNS ; run++) {\n      for (int maxSize: MAX_SIZES) {\n        int size = maxSize == 0 ? 0 : random().nextInt(maxSize);\n        for (int maxValue: MAX_VALUE) {\n          int minValue = maxValue == 0 ? 0 : random().nextInt(maxValue);\n          double minChance = random().nextDouble();\n          longCompressorMonkeyTest(run, size, minValue, maxValue, minChance, random().nextLong());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#testLongCompressorMonkey().mjava","sourceNew":null,"sourceOld":"  // Simple money test that builds a collection of random longs, compresses them with LongCompressor and\n  // checks if all values from the compressed version are equal to the source\n  public void testLongCompressorMonkey() {\n    final int RUNS = 10;\n    final int[] MAX_SIZES = new int[]{0, 1, 10, 1000, 100_000};\n    final int[] MAX_VALUE = new int[]{0, 1, 10, 1000, 100_000};\n    for (int run = 0 ; run < RUNS ; run++) {\n      for (int maxSize: MAX_SIZES) {\n        int size = maxSize == 0 ? 0 : random().nextInt(maxSize);\n        for (int maxValue: MAX_VALUE) {\n          int minValue = maxValue == 0 ? 0 : random().nextInt(maxValue);\n          double minChance = random().nextDouble();\n          longCompressorMonkeyTest(run, size, minValue, maxValue, minChance, random().nextLong());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#testLongCompressorMonkey().mjava","sourceNew":null,"sourceOld":"  // Simple money test that builds a collection of random longs, compresses them with LongCompressor and\n  // checks if all values from the compressed version are equal to the source\n  public void testLongCompressorMonkey() {\n    final int RUNS = 10;\n    final int[] MAX_SIZES = new int[]{0, 1, 10, 1000, 100_000};\n    final int[] MAX_VALUE = new int[]{0, 1, 10, 1000, 100_000};\n    for (int run = 0 ; run < RUNS ; run++) {\n      for (int maxSize: MAX_SIZES) {\n        int size = maxSize == 0 ? 0 : random().nextInt(maxSize);\n        for (int maxValue: MAX_VALUE) {\n          int minValue = maxValue == 0 ? 0 : random().nextInt(maxValue);\n          double minChance = random().nextDouble();\n          longCompressorMonkeyTest(run, size, minValue, maxValue, minChance, random().nextLong());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}