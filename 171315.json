{"path":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","sourceOld":"  public NearSpans(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n    this.inOrder = query.isInOrder();\n\n    SpanQuery[] clauses = query.getClauses();     // initialize spans & list\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =                            // construct clause spans\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);                          // add to ordered\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getPayloadSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getPayloadSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a3c9097762cec00567aff9ceae83842107c895","date":1249571658,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a3c9097762cec00567aff9ceae83842107c895":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["94a3c9097762cec00567aff9ceae83842107c895"]},"commit2Childs":{"94a3c9097762cec00567aff9ceae83842107c895":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["fd5947db4de866f035b932f219674c03562d904e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"fd5947db4de866f035b932f219674c03562d904e":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["94a3c9097762cec00567aff9ceae83842107c895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}