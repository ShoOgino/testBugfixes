{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testCreateCollection().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollection() throws Exception {\n    String prefix = \"testCreateCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNotNull(c1);\n    assertEquals(abc, c1.getStr(WITH_COLLECTION));\n    Replica replica = c1.getReplicas().get(0);\n    String nodeName = replica.getNodeName();\n\n    assertEquals(chosenNode, nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"27639bb5e041490ce599065875dd2f6d8beef62a":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}