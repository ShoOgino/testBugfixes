{"path":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f900103dae416923b0a8d02d51ca2798237b8807","date":1302794131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    int index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f900103dae416923b0a8d02d51ca2798237b8807"],"1eb46686a27187e42311e77666a2c7026f461ebc":["0f080986da691a3bba7b757f43ab72cdc82b57ce","f900103dae416923b0a8d02d51ca2798237b8807"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","f900103dae416923b0a8d02d51ca2798237b8807"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["0f080986da691a3bba7b757f43ab72cdc82b57ce","f900103dae416923b0a8d02d51ca2798237b8807"],"f900103dae416923b0a8d02d51ca2798237b8807":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"f900103dae416923b0a8d02d51ca2798237b8807":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","f900103dae416923b0a8d02d51ca2798237b8807"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}