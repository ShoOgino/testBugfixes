{"path":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","commits":[{"id":"ddc1ae5ff40afa2c5136ee382632ebe602e050e6","date":1474097671,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63a1a94d02abb8cde5dd6ea0defbbc751ce71603","date":1521902895,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58dba38d0c9777f300cca9dd3c150fe2d244742","date":1599661188,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RestoreCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(repoName);\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      // this core must be the only replica in its shard otherwise\n      // we cannot guarantee consistency between replicas because when we add data (or restore index) to this replica\n      Slice slice = zkController.getClusterState().getCollection(cd.getCollectionName()).getSlice(cd.getShardId());\n      if (slice.getReplicas().size() != 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to restore core=\" + core.getName() + \", the core must be the only replica in its shard\");\n      }\n      RestoreCore restoreCore = new RestoreCore(repository, core, locationUri, name);\n      boolean success = restoreCore.doRestore();\n      if (!success) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to restore core=\" + core.getName());\n      }\n      // other replicas to-be-created will know that they are out of date by\n      // looking at their term : 0 compare to term of this core : 1\n      zkController.getShardTerms(cd.getCollectionName(), cd.getShardId()).ensureHighestTermsAreNotZero();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"]},"commit2Childs":{"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}