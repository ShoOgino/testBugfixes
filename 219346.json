{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testLeftOpenRange(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\tint count=3000;\n\t\tlong upper=(count-1)*distance + 1234L;\n\t\tTrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n\t\tTopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n\t\tSystem.out.println(\"Found \"+q.getFilter().getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertNotNull(sd);\n\t\tassertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n\t\tdoc=searcher.doc(sd[sd.length-1].doc);\n\t\tassertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","sourceNew":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getFilter().getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","sourceOld":"\tprivate void testLeftOpenRange(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\tint count=3000;\n\t\tlong upper=(count-1)*distance + 1234L;\n\t\tTrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n\t\tTopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n\t\tSystem.out.println(\"Found \"+q.getFilter().getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertNotNull(sd);\n\t\tassertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n\t\tdoc=searcher.doc(sd[sd.length-1].doc);\n\t\tassertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3625d65a5c7432d40b215d134ec5fc874be6387","date":1231708524,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","sourceNew":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getFilter().getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","sourceNew":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), true, true, variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testLeftOpenRange(TrieUtils).mjava","sourceNew":null,"sourceOld":"  private void testLeftOpenRange(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    int count=3000;\n    long upper=(count-1)*distance + 1234L;\n    TrieRangeQuery q=new TrieRangeQuery(field, null, new Long(upper), true, true, variant);\n    TopDocs topDocs = searcher.search(q, null, 10000, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score docs must match \"+count+\" docs, found \"+sd.length+\" docs\", sd.length, count );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc should be 0\", variant.trieCodedToLong(doc.get(field)), 0L );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc should be \"+((count-1)*distance), variant.trieCodedToLong(doc.get(field)), (count-1)*distance );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["e91724d755098f0c856c612bf56d1edc31044a82"],"e91724d755098f0c856c612bf56d1edc31044a82":["b3625d65a5c7432d40b215d134ec5fc874be6387"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3625d65a5c7432d40b215d134ec5fc874be6387":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"b3625d65a5c7432d40b215d134ec5fc874be6387":["e91724d755098f0c856c612bf56d1edc31044a82"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["b3625d65a5c7432d40b215d134ec5fc874be6387"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}