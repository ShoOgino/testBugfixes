{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","commits":[{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      if (!perFieldMap.containsKey(name)) { // select a codec at random\n        setFieldCodec(name, codecs[random.nextInt(codecs.length)].name);\n      }\n      return super.getFieldCodec(name);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      if (!perFieldMap.containsKey(name)) { // select a codec at random\n        setFieldCodec(name, codecs[random.nextInt(codecs.length)].name);\n      }\n      return super.getFieldCodec(name);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(random.nextInt(knownCodecs.size()));\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab53d2675ddc15e06676aa22e06ab60d13cfcc03","date":1290945467,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(random.nextInt(knownCodecs.size()));\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"ab53d2675ddc15e06676aa22e06ab60d13cfcc03":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"ab53d2675ddc15e06676aa22e06ab60d13cfcc03":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","3bb13258feba31ab676502787ab2e1779f129b7a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","13452165d8bf3d45a72f572aaed3c679735d3af2","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}