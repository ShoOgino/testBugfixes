{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      Event.EventType eventType = event.getType();\n      // None events are ignored\n      // If latchEventType is not null, only fire if the type matches\n      if (eventType != Event.EventType.None && (latchEventType == null || eventType == latchEventType)) {\n        LOG.info(\"{} fired on path {} state {}\", eventType, event.getPath(), event.getState());\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      Event.EventType eventType = event.getType();\n      // None events are ignored\n      // If latchEventType is not null, only fire if the type matches\n      if (eventType != Event.EventType.None && (latchEventType == null || eventType == latchEventType)) {\n        LOG.info(\"{} fired on path {} state {}\", eventType, event.getPath(), event.getState());\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","date":1444778526,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      Event.EventType eventType = event.getType();\n      // None events are ignored\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", eventType, event.getPath(), event.getState(), latchEventType);\n      if (eventType != Event.EventType.None && (latchEventType == null || eventType == latchEventType)) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      Event.EventType eventType = event.getType();\n      // None events are ignored\n      // If latchEventType is not null, only fire if the type matches\n      if (eventType != Event.EventType.None && (latchEventType == null || eventType == latchEventType)) {\n        LOG.info(\"{} fired on path {} state {}\", eventType, event.getPath(), event.getState());\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["3f1a0016e65424cb251992c72022616d73753b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      Event.EventType eventType = event.getType();\n      // None events are ignored\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", eventType, event.getPath(), event.getState(), latchEventType);\n      if (eventType != Event.EventType.None && (latchEventType == null || eventType == latchEventType)) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.info(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ec82ee811ca4bf233f8445e727133af762a7bf0","date":1516991772,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        lock.lock();\n        try {\n          this.event = event;\n          eventReceived.signalAll();\n        } finally {\n          lock.unlock();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        synchronized (lock) {\n          this.event = event;\n          lock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      log.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        lock.lock();\n        try {\n          this.event = event;\n          eventReceived.signalAll();\n        } finally {\n          lock.unlock();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      LOG.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        lock.lock();\n        try {\n          this.event = event;\n          eventReceived.signalAll();\n        } finally {\n          lock.unlock();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.LatchWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      }\n      if (latchEventType == null || event.getType() == latchEventType) {\n        lock.lock();\n        try {\n          this.event = event;\n          eventReceived.signalAll();\n        } finally {\n          lock.unlock();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n      // If latchEventType is not null, only fire if the type matches\n      log.debug(\"{} fired on path {} state {} latchEventType {}\", event.getType(), event.getPath(), event.getState(), latchEventType);\n      if (latchEventType == null || event.getType() == latchEventType) {\n        lock.lock();\n        try {\n          this.event = event;\n          eventReceived.signalAll();\n        } finally {\n          lock.unlock();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5d615d62cd8aff3690943d765e46942551f98b6":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","a5d615d62cd8aff3690943d765e46942551f98b6"],"ad4957cde742defe6db19689abdc267c5d948066":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6ec82ee811ca4bf233f8445e727133af762a7bf0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6ec82ee811ca4bf233f8445e727133af762a7bf0"]},"commit2Childs":{"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6ec82ee811ca4bf233f8445e727133af762a7bf0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ec82ee811ca4bf233f8445e727133af762a7bf0":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}