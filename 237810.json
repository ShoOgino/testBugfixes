{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","commits":[{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],float[],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   * @param coord Table of coordination factors\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, float[] coord, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.coord = coord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      maxScore += scorer.maxScore();\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      maxScore += scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      maxScore += scorer.maxScore();\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9","date":1525274442,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      scorer.advanceShallow(0);\n      maxScore += scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      maxScore += scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca059a1802d561df3c5d3abac663d4e6284f33a","date":1526486059,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    double maxScore = 0;\n    for (Scorer scorer : subScorers) {\n      scorer.advanceShallow(0);\n      maxScore += scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    }\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":5,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight, subScorers, scoreMode);\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers Array of at least two subscorers.\n   */\n  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca059a1802d561df3c5d3abac663d4e6284f33a":["b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9"],"5b559eeae2a2a767f75666f9b692659cfe1bf631":["9ca059a1802d561df3c5d3abac663d4e6284f33a"],"4874ce841615411ddc4f5998fc9db9a533827976":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["4874ce841615411ddc4f5998fc9db9a533827976"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b559eeae2a2a767f75666f9b692659cfe1bf631"]},"commit2Childs":{"9ca059a1802d561df3c5d3abac663d4e6284f33a":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"5b559eeae2a2a767f75666f9b692659cfe1bf631":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4874ce841615411ddc4f5998fc9db9a533827976":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4874ce841615411ddc4f5998fc9db9a533827976","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9":["9ca059a1802d561df3c5d3abac663d4e6284f33a"],"523cc6563c99a55527ef7993efc5413c6648852d":["b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}