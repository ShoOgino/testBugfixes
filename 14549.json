{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes the reporter by finding (or creating) a MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n\n    if (serviceUrl != null && agentId != null) {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl(%s) and agentId(%s) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    }\n    else if (serviceUrl != null) {\n      try {\n        mBeanServer = JmxUtil.findMBeanServerForServiceUrl(serviceUrl);\n      } catch (IOException e) {\n        log.warn(\"findMBeanServerForServiceUrl(%s) exception: %s\", serviceUrl, e);\n        mBeanServer = null;\n      }\n    }\n    else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No serviceUrl or agentId was configured, using first MBeanServer.\", mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics.\");\n      return;\n    }\n\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, domain);\n\n    reporter = JmxReporter.forRegistry(metricManager.registry(registryName))\n                          .registerWith(mBeanServer)\n                          .inDomain(domain)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n\n    log.info(\"JMX monitoring enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes the reporter by finding (or creating) a MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n\n    if (serviceUrl != null && agentId != null) {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl(%s) and agentId(%s) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    }\n    else if (serviceUrl != null) {\n      try {\n        mBeanServer = JmxUtil.findMBeanServerForServiceUrl(serviceUrl);\n      } catch (IOException e) {\n        log.warn(\"findMBeanServerForServiceUrl(%s) exception: %s\", serviceUrl, e);\n        mBeanServer = null;\n      }\n    }\n    else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No serviceUrl or agentId was configured, using first MBeanServer.\", mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics.\");\n      return;\n    }\n\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, domain);\n\n    reporter = JmxReporter.forRegistry(metricManager.registry(registryName))\n                          .registerWith(mBeanServer)\n                          .inDomain(domain)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n\n    log.info(\"JMX monitoring enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  /**\n   * Initializes the reporter by finding (or creating) a MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n\n    if (serviceUrl != null && agentId != null) {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl(%s) and agentId(%s) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    }\n    else if (serviceUrl != null) {\n      try {\n        mBeanServer = JmxUtil.findMBeanServerForServiceUrl(serviceUrl);\n      } catch (IOException e) {\n        log.warn(\"findMBeanServerForServiceUrl(%s) exception: %s\", serviceUrl, e);\n        mBeanServer = null;\n      }\n    }\n    else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No serviceUrl or agentId was configured, using first MBeanServer.\", mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics.\");\n      return;\n    }\n\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, domain);\n\n    reporter = JmxReporter.forRegistry(metricManager.registry(registryName))\n                          .registerWith(mBeanServer)\n                          .inDomain(domain)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n\n    log.info(\"JMX monitoring enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":["f153defc3456622167a186dcb3e25f1979a4a825"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  /**\n   * Initializes the reporter by finding (or creating) a MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n\n    if (serviceUrl != null && agentId != null) {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl(%s) and agentId(%s) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    }\n    else if (serviceUrl != null) {\n      try {\n        mBeanServer = JmxUtil.findMBeanServerForServiceUrl(serviceUrl);\n      } catch (IOException e) {\n        log.warn(\"findMBeanServerForServiceUrl(%s) exception: %s\", serviceUrl, e);\n        mBeanServer = null;\n      }\n    }\n    else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No serviceUrl or agentId was configured, using first MBeanServer.\", mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics.\");\n      return;\n    }\n\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, domain);\n\n    reporter = JmxReporter.forRegistry(metricManager.registry(registryName))\n                          .registerWith(mBeanServer)\n                          .inDomain(domain)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n\n    log.info(\"JMX monitoring enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","date":1496661458,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0265144286422ad99682a00904cc2536b79c8535"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["816521ebaad5add9cb96bb88c577394e2938c40b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0265144286422ad99682a00904cc2536b79c8535"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0265144286422ad99682a00904cc2536b79c8535":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","816521ebaad5add9cb96bb88c577394e2938c40b"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}