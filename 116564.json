{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      testFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      testFacet(props, rsp);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      testFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      testFacet(props, rsp);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      testFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      testFacet(props, rsp);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      doTestFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      doTestFacet(props, rsp);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      testFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      testFacet(props, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      doTestFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      doTestFacet(props, rsp);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      testFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      testFacet(props, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testDistribFaceting().mjava","sourceNew":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      doTestFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      doTestFacet(props, rsp);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistribFaceting() throws IOException, SolrServerException {\n    // For this test, I want to insure that there are shards that do _not_ have a doc with any of the DV_only \n    // fields, see SOLR-5260. So I'll add exactly 1 document to a 4 shard collection.\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"1\");\n    for (FieldProps prop : fieldsToTestSingle) {\n      doc.addField(prop.getName(), prop.getValue(true));\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      for (int idx = 0; idx < 5; ++idx) {\n        doc.addField(prop.getName(), prop.getValue(true));\n      }\n    }\n\n    new UpdateRequest()\n        .add(doc)\n        .commit(client, COLLECTION);\n\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\");\n    solrQuery.setFacet(true);\n    for (FieldProps prop : fieldsToTestSingle) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    for (FieldProps prop : fieldsToTestMulti) {\n      solrQuery.addFacetField(prop.getName());\n    }\n\n    final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n    for (FieldProps props : fieldsToTestSingle) {\n      doTestFacet(props, rsp);\n    }\n\n    for (FieldProps props : fieldsToTestMulti) {\n      doTestFacet(props, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c344401c324a00bc10cacfb90598738235a4decb":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c344401c324a00bc10cacfb90598738235a4decb"]},"commit2Childs":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c72f6f0907682b825869d7878ba72d8259dabc91":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"c344401c324a00bc10cacfb90598738235a4decb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["c344401c324a00bc10cacfb90598738235a4decb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}