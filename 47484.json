{"path":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","commits":[{"id":"9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d","date":1428726211,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    NamedList<Serializable> nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    NamedList<Serializable> nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    NamedList<Serializable> nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getStatistics();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"2\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"3\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2, accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 +\n        (RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED) * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    accountableLRUCache.initializeMetrics(solrMetricsContext, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 +\n        (RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED) * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    accountableLRUCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 +\n        (RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED) * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxRamSize().mjava","sourceNew":null,"sourceOld":"  public void testMaxRamSize() throws Exception {\n    LRUCache<String, Accountable> accountableLRUCache = new LRUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    accountableLRUCache.initializeMetrics(solrMetricsContext, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"5\");\n    params.put(\"maxRamMB\", \"1\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = accountableLRUCache.init(params, null, cr);\n    long baseSize = accountableLRUCache.ramBytesUsed();\n    assertEquals(LRUCache.BASE_RAM_BYTES_USED, baseSize);\n    accountableLRUCache.put(\"1\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"1\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    accountableLRUCache.put(\"20\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 512 * 1024;\n      }\n    });\n    assertEquals(1, accountableLRUCache.size());\n    assertEquals(baseSize + 512 * 1024 + RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED, accountableLRUCache.ramBytesUsed());\n    Map<String,Object> nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    accountableLRUCache.put(\"300\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024;\n      }\n    });\n    nl = accountableLRUCache.getMetricsMap().getValue();\n    assertEquals(1L, nl.get(\"evictions\"));\n    assertEquals(1L, nl.get(\"evictionsRamUsage\"));\n    assertEquals(2L, accountableLRUCache.size());\n    assertEquals(baseSize + 513 * 1024 +\n        (RamUsageEstimator.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.CacheValue.BASE_RAM_BYTES_USED) * 2 +\n        RamUsageEstimator.sizeOfObject(\"20\") + RamUsageEstimator.sizeOfObject(\"300\"), accountableLRUCache.ramBytesUsed());\n\n    accountableLRUCache.clear();\n    assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class), accountableLRUCache.ramBytesUsed());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d"],"9d496ec5dd42f7b76312f7ba5ac6666f1ed0730d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}