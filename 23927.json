{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Find words for a more-like-this query former.\r\n     *\r\n     * @param docNum the id of the lucene document from which to find terms\r\n     */\r\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\r\n        Map termFreqMap = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\r\n\r\n            // field does not store term vector info\r\n            if (vector == null) {\r\n            \tDocument d=ir.document(docNum);\r\n            \tString text[]=d.getValues(fieldName);\r\n            \tif(text!=null)\r\n            \t{\r\n                for (int j = 0; j < text.length; j++) {\r\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\r\n                }\r\n            \t}\r\n            }\r\n            else {\r\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\r\n            }\r\n\r\n        }\r\n\r\n        return createQueue(termFreqMap);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98e01139a8d039526bfff63f2741bc1c9dae5455","date":1212409742,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\r\n     * Find words for a more-like-this query former.\r\n     *\r\n     * @param docNum the id of the lucene document from which to find terms\r\n     */\r\n    public PriorityQueue retrieveTerms(int docNum) throws IOException {\r\n        Map termFreqMap = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\r\n\r\n            // field does not store term vector info\r\n            if (vector == null) {\r\n            \tDocument d=ir.document(docNum);\r\n            \tString text[]=d.getValues(fieldName);\r\n            \tif(text!=null)\r\n            \t{\r\n                for (int j = 0; j < text.length; j++) {\r\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\r\n                }\r\n            \t}\r\n            }\r\n            else {\r\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\r\n            }\r\n\r\n        }\r\n\r\n        return createQueue(termFreqMap);\r\n    }\r\n\n","sourceOld":"    /**\r\n     * Find words for a more-like-this query former.\r\n     *\r\n     * @param docNum the id of the lucene document from which to find terms\r\n     */\r\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\r\n        Map termFreqMap = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\r\n\r\n            // field does not store term vector info\r\n            if (vector == null) {\r\n            \tDocument d=ir.document(docNum);\r\n            \tString text[]=d.getValues(fieldName);\r\n            \tif(text!=null)\r\n            \t{\r\n                for (int j = 0; j < text.length; j++) {\r\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\r\n                }\r\n            \t}\r\n            }\r\n            else {\r\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\r\n            }\r\n\r\n        }\r\n\r\n        return createQueue(termFreqMap);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\r\n     * Find words for a more-like-this query former.\r\n     *\r\n     * @param docNum the id of the lucene document from which to find terms\r\n     */\r\n    public PriorityQueue retrieveTerms(int docNum) throws IOException {\r\n        Map termFreqMap = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\r\n\r\n            // field does not store term vector info\r\n            if (vector == null) {\r\n            \tDocument d=ir.document(docNum);\r\n            \tString text[]=d.getValues(fieldName);\r\n            \tif(text!=null)\r\n            \t{\r\n                for (int j = 0; j < text.length; j++) {\r\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\r\n                }\r\n            \t}\r\n            }\r\n            else {\r\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\r\n            }\r\n\r\n        }\r\n\r\n        return createQueue(termFreqMap);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["98e01139a8d039526bfff63f2741bc1c9dae5455"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98e01139a8d039526bfff63f2741bc1c9dae5455":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["60cdc0e643184821eb066795a8791cd82559f46e"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["98e01139a8d039526bfff63f2741bc1c9dae5455"],"98e01139a8d039526bfff63f2741bc1c9dae5455":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}