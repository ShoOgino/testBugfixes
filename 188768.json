{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, cloudManager));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,cloudManager));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, cloudManager));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":["ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,cloudManager));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,cloudManager));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef7c0ae2232b955007fc003318142c3bdb0e5e8c","date":1515055559,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,cloudManager));\n      applyRules();\n    }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","1bbcda32e5cd37ef61ea1190bacd080308e22070"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,cloudManager));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes,this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":null,"sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":null,"sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"ef7c0ae2232b955007fc003318142c3bdb0e5e8c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ef7c0ae2232b955007fc003318142c3bdb0e5e8c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}