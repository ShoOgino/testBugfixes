{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(File,File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a File input it will unzip it in the unzip directory.\n   * passed as the second parameter\n   * @param inFile The zip file as input\n   * @param unzipDir The unzip directory where to unzip the zip file.\n   * @throws IOException An I/O exception has occurred\n   */\n  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration<? extends ZipEntry> entries;\n    ZipFile zipFile = new ZipFile(inFile);\n\n    try {\n      entries = zipFile.entries();\n      String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n      while (entries.hasMoreElements()) {\n        ZipEntry entry = entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in = zipFile.getInputStream(entry);\n          try {\n            File file = new File(unzipDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + unzipDir);\n            }\n            if (!file.getParentFile().mkdirs()) {\n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" +\n                    file.getParentFile().toString());\n              }\n            }\n            OutputStream out = new FileOutputStream(file);\n            try {\n              byte[] buffer = new byte[8192];\n              int i;\n              while ((i = in.read(buffer)) != -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unZip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a File input it will unzip it in the unzip directory.\n   * passed as the second parameter\n   * @param inFile The zip file as input\n   * @param unzipDir The unzip directory where to unzip the zip file.\n   * @throws IOException An I/O exception has occurred\n   */\n  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration<? extends ZipEntry> entries;\n    ZipFile zipFile = new ZipFile(inFile);\n\n    try {\n      entries = zipFile.entries();\n      String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n      while (entries.hasMoreElements()) {\n        ZipEntry entry = entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in = zipFile.getInputStream(entry);\n          try {\n            File file = new File(unzipDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + unzipDir);\n            }\n            if (!file.getParentFile().mkdirs()) {\n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" +\n                    file.getParentFile().toString());\n              }\n            }\n            OutputStream out = new FileOutputStream(file);\n            try {\n              byte[] buffer = new byte[8192];\n              int i;\n              while ((i = in.read(buffer)) != -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}