{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.shutdown(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.shutdown(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.shutdown(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.shutdown(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f695337371af9f2554c2d7ecc301f4306bd864b","date":1433621466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertFalse(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = DirectoryReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f695337371af9f2554c2d7ecc301f4306bd864b"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4f695337371af9f2554c2d7ecc301f4306bd864b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}