{"path":"src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","commits":[{"id":"9a70797e2ad3b67325d3043155af4baf6445fdd9","date":1227585729,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"/dev/null","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}