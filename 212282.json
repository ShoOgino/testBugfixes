{"path":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","pathOld":"/dev/null","sourceNew":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n        \n        InputStream in = fsdir.openFile(file);\n        \n        // This read primes the buffer in InputStream\n        byte b = in.readByte();\n        \n        // Close the file\n        in.close();\n        \n        // ERROR: this call should fail, but succeeds because the buffer \n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n        \n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal \n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        InputStream in = fsdir.openFile(file);\n\n        // This read primes the buffer in InputStream\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n        \n        InputStream in = fsdir.openFile(file);\n        \n        // This read primes the buffer in InputStream\n        byte b = in.readByte();\n        \n        // Close the file\n        in.close();\n        \n        // ERROR: this call should fail, but succeeds because the buffer \n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n        \n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal \n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        InputStream in = fsdir.openFile(file);\n\n        // This read primes the buffer in InputStream\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        OutputStream os = fsdir.createFile(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}