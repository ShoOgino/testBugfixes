{"path":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","pathOld":"/dev/null","sourceNew":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\").equals(uoe.getMessage()));\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdb6a957a9e0011012d83c4af6906e6d4927e106","date":1248972343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","sourceNew":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\").equals(uoe.getMessage()));\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n        \n      // try to call old API, this should fail\n      try {\n        stream.reset();\n        Token reusableToken = new Token();\n        while ((reusableToken = stream.next(reusableToken)) != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue(\"This TokenStream only supports the new Attributes API.\".equals(uoe.getMessage()));\n      }\n      try {\n        stream.reset();\n        while (stream.next() != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue(\"This TokenStream only supports the new Attributes API.\".equals(uoe.getMessage()));\n      }\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","sourceOld":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\").equals(uoe.getMessage()));\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93995eb4992a09cc5a4b13b04225eca0bca45d57","date":1253288184,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","sourceNew":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\"),uoe.getMessage());\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is not implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is not implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is not implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is not implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is not implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is not implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n        \n      // try to call old API, this should fail\n      try {\n        stream.reset();\n        Token reusableToken = new Token();\n        while ((reusableToken = stream.next(reusableToken)) != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      try {\n        stream.reset();\n        while (stream.next() != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","sourceOld":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\").equals(uoe.getMessage()));\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n        \n      // try to call old API, this should fail\n      try {\n        stream.reset();\n        Token reusableToken = new Token();\n        while ((reusableToken = stream.next(reusableToken)) != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue(\"This TokenStream only supports the new Attributes API.\".equals(uoe.getMessage()));\n      }\n      try {\n        stream.reset();\n        while (stream.next() != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertTrue(\"This TokenStream only supports the new Attributes API.\".equals(uoe.getMessage()));\n      }\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","bugFix":["fdb6a957a9e0011012d83c4af6906e6d4927e106","ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","sourceNew":null,"sourceOld":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\"),uoe.getMessage());\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is not implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is not implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is not implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is not implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is not implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is not implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n        \n      // try to call old API, this should fail\n      try {\n        stream.reset();\n        Token reusableToken = new Token();\n        while ((reusableToken = stream.next(reusableToken)) != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      try {\n        stream.reset();\n        while (stream.next() != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testOnlyNewAPI().mjava","sourceNew":null,"sourceOld":"  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain\n  public void testOnlyNewAPI() throws IOException {\n    TokenStream.setOnlyUseNewAPI(true);\n    try {\n    \n      // this should fail with UOE\n      try {\n        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!\n        stream = new LowerCaseFilter(stream);\n        stream = new StopFilter(stream, stopwords);\n        while (stream.incrementToken());\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals((PartOfSpeechTaggingFilter.class.getName()+\" does not implement incrementToken() which is needed for onlyUseNewAPI.\"),uoe.getMessage());\n      }\n\n      // this should pass, as all core token streams support the new API\n      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));\n      stream = new LowerCaseFilter(stream);\n      stream = new StopFilter(stream, stopwords);\n      while (stream.incrementToken());\n      \n      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper\n      assertTrue(\"TermAttribute is not implemented by TermAttributeImpl\",\n        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);\n      assertTrue(\"OffsetAttribute is not implemented by OffsetAttributeImpl\",\n        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);\n      assertTrue(\"FlagsAttribute is not implemented by FlagsAttributeImpl\",\n        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);\n      assertTrue(\"PayloadAttribute is not implemented by PayloadAttributeImpl\",\n        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);\n      assertTrue(\"PositionIncrementAttribute is not implemented by PositionIncrementAttributeImpl\", \n        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);\n      assertTrue(\"TypeAttribute is not implemented by TypeAttributeImpl\",\n        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);\n        \n      // try to call old API, this should fail\n      try {\n        stream.reset();\n        Token reusableToken = new Token();\n        while ((reusableToken = stream.next(reusableToken)) != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      try {\n        stream.reset();\n        while (stream.next() != null);\n        fail(\"If only the new API is allowed, this should fail with an UOE\");\n      } catch (UnsupportedOperationException uoe) {\n        assertEquals(\"This TokenStream only supports the new Attributes API.\", uoe.getMessage());\n      }\n      \n      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper\n      // as attribute instance.\n      // TokenWrapper encapsulates a Token instance that can be exchanged\n      // by another Token instance without changing the AttributeImpl instance\n      // itsself.\n      TokenStream.setOnlyUseNewAPI(false);\n      stream = new WhitespaceTokenizer(new StringReader(doc));\n      assertTrue(\"TermAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"OffsetAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"FlagsAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PayloadAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"PositionIncrementAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);\n      assertTrue(\"TypeAttribute is not implemented by TokenWrapper\",\n        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);\n      \n    } finally {\n      TokenStream.setOnlyUseNewAPI(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"93995eb4992a09cc5a4b13b04225eca0bca45d57":["fdb6a957a9e0011012d83c4af6906e6d4927e106"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["93995eb4992a09cc5a4b13b04225eca0bca45d57","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fdb6a957a9e0011012d83c4af6906e6d4927e106":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"93995eb4992a09cc5a4b13b04225eca0bca45d57":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fdb6a957a9e0011012d83c4af6906e6d4927e106":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["fdb6a957a9e0011012d83c4af6906e6d4927e106"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}