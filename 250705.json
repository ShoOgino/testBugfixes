{"path":"lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","commits":[{"id":"d0dc52d2a83be9420989b1976a8e9d937160e1e5","date":1536062604,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      // Start sampling if we get called too much\n      setMinCompetitiveScoreCounter++;\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      long previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n      long minValue = origin - maxDistance;\n      if (minValue > origin) {\n        // underflow\n        minValue = Long.MIN_VALUE;\n      }\n      long maxValue = origin + maxDistance;\n      if (maxValue < origin) {\n        // overflow\n        maxValue = Long.MAX_VALUE;\n      }\n\n      final byte[] minValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(minValue, minValueAsBytes, 0);\n      final byte[] maxValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(maxValue, maxValueAsBytes, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            // Doc's value is too low, in this dimension\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            // Doc's value is too high, in this dimension\n            return;\n          }\n\n          // Doc is in-bounds\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","sourceNew":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      // Start sampling if we get called too much\n      setMinCompetitiveScoreCounter++;\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      long previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n      long minValue = origin - maxDistance;\n      if (minValue > origin) {\n        // underflow\n        minValue = Long.MIN_VALUE;\n      }\n      long maxValue = origin + maxDistance;\n      if (maxValue < origin) {\n        // overflow\n        maxValue = Long.MAX_VALUE;\n      }\n\n      final byte[] minValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(minValue, minValueAsBytes, 0);\n      final byte[] maxValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(maxValue, maxValueAsBytes, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (Arrays.compareUnsigned(packedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            // Doc's value is too low, in this dimension\n            return;\n          }\n          if (Arrays.compareUnsigned(packedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            // Doc's value is too high, in this dimension\n            return;\n          }\n\n          // Doc is in-bounds\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          if (Arrays.compareUnsigned(minPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          if (Arrays.compareUnsigned(minPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","sourceOld":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      // Start sampling if we get called too much\n      setMinCompetitiveScoreCounter++;\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      long previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n      long minValue = origin - maxDistance;\n      if (minValue > origin) {\n        // underflow\n        minValue = Long.MIN_VALUE;\n      }\n      long maxValue = origin + maxDistance;\n      if (maxValue < origin) {\n        // overflow\n        maxValue = Long.MAX_VALUE;\n      }\n\n      final byte[] minValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(minValue, minValueAsBytes, 0);\n      final byte[] maxValueAsBytes = new byte[Long.BYTES];\n      LongPoint.encodeDimension(maxValue, maxValueAsBytes, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            // Doc's value is too low, in this dimension\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            // Doc's value is too high, in this dimension\n            return;\n          }\n\n          // Doc is in-bounds\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}