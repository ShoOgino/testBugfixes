{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the provided x, y point lies on the line */\n  protected boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      if (orient(x1, y1, x2, y2, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90d5669713e0774245b26147e6fcfb44b9b57fdf","date":1571077636,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","sourceNew":"  /** returns true if the provided x, y point lies on the line */\n  protected boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n      boolean outside = (a1y < y && b1y < y) ||\n          (a1y > y && b1y > y) ||\n          (a1x < x && b1x < x) ||\n          (a1x > x && b1x > x);\n      if (outside == false && orient(a1x, a1y, b1x, b1y, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the provided x, y point lies on the line */\n  protected boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      if (orient(x1, y1, x2, y2, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the provided x, y point lies on the line */\n  protected boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n      boolean outside = (a1y < y && b1y < y) ||\n          (a1y > y && b1y > y) ||\n          (a1x < x && b1x < x) ||\n          (a1x > x && b1x > x);\n      if (outside == false && orient(a1x, a1y, b1x, b1y, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#isPointOnLine(double,double).mjava","sourceNew":"  /** returns true if the provided x, y point lies on the line */\n  boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n      boolean outside = (a1y < y && b1y < y) ||\n          (a1y > y && b1y > y) ||\n          (a1x < x && b1x < x) ||\n          (a1x > x && b1x > x);\n      if (outside == false && orient(a1x, a1y, b1x, b1y, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the provided x, y point lies on the line */\n  protected boolean isPointOnLine(double x, double y) {\n    if (y <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n      boolean outside = (a1y < y && b1y < y) ||\n          (a1y > y && b1y > y) ||\n          (a1x < x && b1x < x) ||\n          (a1x > x && b1x > x);\n      if (outside == false && orient(a1x, a1y, b1x, b1y, x, y) == 0) {\n        return true;\n      }\n      if (left != null && left.isPointOnLine(x, y)) {\n        return true;\n      }\n      if (right != null && y >= this.low && right.isPointOnLine(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["90d5669713e0774245b26147e6fcfb44b9b57fdf"],"90d5669713e0774245b26147e6fcfb44b9b57fdf":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","90d5669713e0774245b26147e6fcfb44b9b57fdf"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["90d5669713e0774245b26147e6fcfb44b9b57fdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90d5669713e0774245b26147e6fcfb44b9b57fdf":["a923e28c9d079048c6993884ec89c44f0380b923","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}