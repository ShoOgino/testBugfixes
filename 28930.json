{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minusLight(LightAutomaton,LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minusLight(LightAutomaton,LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public LightAutomaton minusLight(LightAutomaton a1, LightAutomaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) {\n      return BasicAutomata.makeEmptyLight();\n    }\n    if (BasicOperations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersectionLight(a1, complementLight(a2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minusLight(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2));\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public LightAutomaton minusLight(LightAutomaton a1, LightAutomaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) {\n      return BasicAutomata.makeEmptyLight();\n    }\n    if (BasicOperations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersectionLight(a1, complementLight(a2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}