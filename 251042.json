{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(Supplier[List[CoreDescriptor]],boolean).mjava","commits":[{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":1,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(Supplier[List[CoreDescriptor]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider,boolean).mjava","sourceNew":"  private void registerAllCoresAsDown(\n      final Supplier<List<CoreDescriptor>> registerOnReconnect, boolean updateLastPublished) throws SessionExpiredException {\n    List<CoreDescriptor> descriptors = registerOnReconnect.get();\n    if (isClosed) return;\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      publishNodeAsDown(getNodeName());\n      for (CoreDescriptor descriptor : descriptors) {\n        // if it looks like we are going to be the leader, we don't\n        // want to wait for the following stuff\n        CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n        String collection = cloudDesc.getCollectionName();\n        String slice = cloudDesc.getShardId();\n        try {\n\n          int children = zkStateReader\n              .getZkClient()\n              .getChildren(\n                  ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n                      + \"/leader_elect/\" + slice + \"/election\", null, true).size();\n          if (children == 0) {\n            log.debug(\"looks like we are going to be the leader for collection {} shard {}\", collection, slice);\n            continue;\n          }\n\n        } catch (NoNodeException e) {\n          log.debug(\"looks like we are going to be the leader for collection {} shard {}\", collection, slice);\n          continue;\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        } catch (SessionExpiredException e) {\n          // zk has to reconnect\n          throw e;\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n          Thread.currentThread().interrupt();\n        }\n\n        final String coreZkNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n        try {\n          log.debug(\"calling waitForLeaderToSeeDownState for coreZkNodeName={} collection={} shard={}\", new Object[]{coreZkNodeName, collection, slice});\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          log.warn(\"There was a problem while making a best effort to ensure the leader has seen us as down, this is not unexpected as Zookeeper has just reconnected after a session expiration\", e);\n          if (isClosed) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect, boolean updateLastPublished) throws SessionExpiredException {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (isClosed) return;\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      publishNodeAsDown(getNodeName());\n      for (CoreDescriptor descriptor : descriptors) {\n        // if it looks like we are going to be the leader, we don't\n        // want to wait for the following stuff\n        CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n        String collection = cloudDesc.getCollectionName();\n        String slice = cloudDesc.getShardId();\n        try {\n\n          int children = zkStateReader\n              .getZkClient()\n              .getChildren(\n                  ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n                      + \"/leader_elect/\" + slice + \"/election\", null, true).size();\n          if (children == 0) {\n            log.debug(\"looks like we are going to be the leader for collection {} shard {}\", collection, slice);\n            continue;\n          }\n\n        } catch (NoNodeException e) {\n          log.debug(\"looks like we are going to be the leader for collection {} shard {}\", collection, slice);\n          continue;\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        } catch (SessionExpiredException e) {\n          // zk has to reconnect\n          throw e;\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n          Thread.currentThread().interrupt();\n        }\n\n        final String coreZkNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n        try {\n          log.debug(\"calling waitForLeaderToSeeDownState for coreZkNodeName={} collection={} shard={}\", new Object[]{coreZkNodeName, collection, slice});\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          log.warn(\"There was a problem while making a best effort to ensure the leader has seen us as down, this is not unexpected as Zookeeper has just reconnected after a session expiration\", e);\n          if (isClosed) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c560208bc8842ee884b76b08784ccb132f05b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"]},"commit2Childs":{"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c560208bc8842ee884b76b08784ccb132f05b48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}