{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Object,Node,List[Triangle],boolean).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Object,Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Object,Node,List[Triangle],boolean).mjava","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side. Return true if the polygon was splitted **/\n  private static final boolean splitEarcut(final Object polygon, final Node start, final List<Triangle> tessellation, final boolean mortonOptimized) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(searchNode.idx != diagonal.idx && isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal, isEdgeFromPolygon(searchNode, diagonal, mortonOptimized));\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonOptimized) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(polygon, searchNode, tessellation, State.INIT, mortonOptimized);\n          earcutLinkedList(polygon, splitNode,  tessellation, State.INIT, mortonOptimized);\n          // Finish the iterative search\n          return true;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n    return false;\n  }\n\n","sourceOld":"  /** Attempt to split a polygon and independently triangulate each side. Return true if the polygon was splitted **/\n  private static final boolean splitEarcut(final Object polygon, final Node start, final List<Triangle> tessellation, final boolean mortonOptimized) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(searchNode.idx != diagonal.idx && isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal, isEdgeFromPolygon(searchNode, diagonal, mortonOptimized));\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonOptimized) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(polygon, searchNode, tessellation, State.INIT, mortonOptimized);\n          earcutLinkedList(polygon, splitNode,  tessellation, State.INIT, mortonOptimized);\n          // Finish the iterative search\n          return true;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}