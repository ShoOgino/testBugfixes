{"path":"contrib/gdata-server/src/gom/src/test/org/apache/lucene/gdata/gom/core/GOMEntryImplTest#testGetChildParser().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/test/org/apache/lucene/gdata/gom/core/GOMEntryImplTest#testGetChildParser().mjava","pathOld":"contrib/gdata-server/src/gom/test/org/apache/lucene/gdata/gom/core/GOMEntryImplTest#testGetChildParser().mjava","sourceNew":"\t/*\n\t * Test method for\n\t * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.getChildParser(QName)'\n\t */\n\tpublic void testGetChildParser() {\n\t\t{\n\t\t\t// atomAuthor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"author\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMAuthor);\n\t\t\tassertEquals(1, this.impl.getAuthors().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"author\"));\n\t\t\tassertEquals(2, this.impl.getAuthors().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomCategory*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"category\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMCategory);\n\t\t\tassertEquals(1, this.impl.getCategories().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"category\"));\n\t\t\tassertEquals(2, this.impl.getCategories().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomContributor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"contributor\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContributor);\n\t\t\tassertEquals(1, this.impl.getContributor().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"contributor\"));\n\t\t\tassertEquals(2, this.impl.getContributor().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomId\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"id\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMId);\n\t\t\tassertSame(parser, this.impl.getId());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"id\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomLink*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMLink);\n\t\t\tassertEquals(1, this.impl.getLinks().size());\n\t\t\tthis.impl\n\t\t\t\t\t.getChildParser(new QName(GOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertEquals(2, this.impl.getLinks().size());\n\n\t\t}\n\n\t\t{\n\t\t\t// atomRights?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"rights\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMRights);\n\t\t\tassertSame(parser, this.impl.getRights());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"rights\"));\n\t\t\t\tfail(\"zero or one\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomTitle\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"title\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMTitle);\n\t\t\tassertSame(parser, this.impl.getTitle());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"title\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomUpdated\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"updated\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMUpdated);\n\t\t\tassertSame(parser, this.impl.getUpdated());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"updated\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSource?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"source\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSource);\n\t\t\tassertEquals(parser, this.impl.getSource());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"source\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSummary?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"summary\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSummary);\n\t\t\tassertEquals(parser, this.impl.getSummary());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"summary\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"content\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContent);\n\t\t\tassertEquals(parser, this.impl.getContent());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"content\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"published\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMPublished);\n\t\t\tassertEquals(parser, this.impl.getPublished());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"published\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t}\n\n","sourceOld":"\t/*\n\t * Test method for\n\t * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.getChildParser(QName)'\n\t */\n\tpublic void testGetChildParser() {\n\t\t{\n\t\t\t// atomAuthor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"author\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMAuthor);\n\t\t\tassertEquals(1, this.impl.getAuthors().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"author\"));\n\t\t\tassertEquals(2, this.impl.getAuthors().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomCategory*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"category\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMCategory);\n\t\t\tassertEquals(1, this.impl.getCategories().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"category\"));\n\t\t\tassertEquals(2, this.impl.getCategories().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomContributor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"contributor\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContributor);\n\t\t\tassertEquals(1, this.impl.getContributor().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"contributor\"));\n\t\t\tassertEquals(2, this.impl.getContributor().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomId\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"id\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMId);\n\t\t\tassertSame(parser, this.impl.getId());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"id\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomLink*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMLink);\n\t\t\tassertEquals(1, this.impl.getLinks().size());\n\t\t\tthis.impl\n\t\t\t\t\t.getChildParser(new QName(GOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertEquals(2, this.impl.getLinks().size());\n\n\t\t}\n\n\t\t{\n\t\t\t// atomRights?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"rights\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMRights);\n\t\t\tassertSame(parser, this.impl.getRights());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"rights\"));\n\t\t\t\tfail(\"zero or one\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomTitle\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"title\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMTitle);\n\t\t\tassertSame(parser, this.impl.getTitle());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"title\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomUpdated\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"updated\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMUpdated);\n\t\t\tassertSame(parser, this.impl.getUpdated());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"updated\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSource?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"source\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSource);\n\t\t\tassertEquals(parser, this.impl.getSource());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"source\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSummary?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"summary\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSummary);\n\t\t\tassertEquals(parser, this.impl.getSummary());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"summary\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"content\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContent);\n\t\t\tassertEquals(parser, this.impl.getContent());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"content\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"published\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMPublished);\n\t\t\tassertEquals(parser, this.impl.getPublished());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"published\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/gom/src/test/org/apache/lucene/gdata/gom/core/GOMEntryImplTest#testGetChildParser().mjava","sourceNew":null,"sourceOld":"\t/*\n\t * Test method for\n\t * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.getChildParser(QName)'\n\t */\n\tpublic void testGetChildParser() {\n\t\t{\n\t\t\t// atomAuthor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"author\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMAuthor);\n\t\t\tassertEquals(1, this.impl.getAuthors().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"author\"));\n\t\t\tassertEquals(2, this.impl.getAuthors().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomCategory*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"category\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMCategory);\n\t\t\tassertEquals(1, this.impl.getCategories().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"category\"));\n\t\t\tassertEquals(2, this.impl.getCategories().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomContributor*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"contributor\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContributor);\n\t\t\tassertEquals(1, this.impl.getContributor().size());\n\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\"contributor\"));\n\t\t\tassertEquals(2, this.impl.getContributor().size());\n\t\t}\n\n\t\t{\n\t\t\t// atomId\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"id\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMId);\n\t\t\tassertSame(parser, this.impl.getId());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"id\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomLink*\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMLink);\n\t\t\tassertEquals(1, this.impl.getLinks().size());\n\t\t\tthis.impl\n\t\t\t\t\t.getChildParser(new QName(GOMNamespace.ATOM_NS_URI, \"link\"));\n\t\t\tassertEquals(2, this.impl.getLinks().size());\n\n\t\t}\n\n\t\t{\n\t\t\t// atomRights?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"rights\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMRights);\n\t\t\tassertSame(parser, this.impl.getRights());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"rights\"));\n\t\t\t\tfail(\"zero or one\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomTitle\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"title\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMTitle);\n\t\t\tassertSame(parser, this.impl.getTitle());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"title\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomUpdated\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"updated\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMUpdated);\n\t\t\tassertSame(parser, this.impl.getUpdated());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"updated\"));\n\t\t\t\tfail(\"exactly one time \");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t// \n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSource?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"source\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSource);\n\t\t\tassertEquals(parser, this.impl.getSource());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"source\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomSummary?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"summary\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMSummary);\n\t\t\tassertEquals(parser, this.impl.getSummary());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"summary\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"content\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMContent);\n\t\t\tassertEquals(parser, this.impl.getContent());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"content\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t\t{\n\t\t\t// atomContent?\n\t\t\tAtomParser parser = this.impl.getChildParser(new QName(\n\t\t\t\t\tGOMNamespace.ATOM_NS_URI, \"published\"));\n\t\t\tassertNotNull(parser);\n\t\t\tassertTrue(parser instanceof GOMPublished);\n\t\t\tassertEquals(parser, this.impl.getPublished());\n\t\t\ttry {\n\t\t\t\tthis.impl.getChildParser(new QName(GOMNamespace.ATOM_NS_URI,\n\t\t\t\t\t\t\"published\"));\n\t\t\t\tfail(\"duplicated element\");\n\t\t\t} catch (GDataParseException e) {\n\t\t\t\t//\n\t\t\t}\n\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}