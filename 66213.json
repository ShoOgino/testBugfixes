{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127","date":1331198608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","72c26897e0e0c4b4f3e73c8c43b1cf89f2564127"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["72c26897e0e0c4b4f3e73c8c43b1cf89f2564127"],"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["38e3b736c7ca086d61b7dbb841c905ee115490da","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","72c26897e0e0c4b4f3e73c8c43b1cf89f2564127"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}