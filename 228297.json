{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) throws IOException {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) throws IOException {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) throws IOException {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) throws IOException {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map fcontext, LeafReaderContext readerContext) throws IOException {\n\n\n    return new Values(valsArr(sources, fcontext, readerContext)) {\n      final int upto = valsArr.length - 1;\n\n      private FunctionValues get(int doc) throws IOException {\n        for (int i=0; i<upto; i++) {\n          FunctionValues vals = valsArr[i];\n          if (vals.exists(doc)) {\n            return vals;\n          }\n        }\n        return valsArr[upto];\n      }\n\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return get(doc).byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return get(doc).shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return get(doc).floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return get(doc).intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return get(doc).longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return get(doc).doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return get(doc).strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return get(doc).boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return get(doc).bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return get(doc).objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        // return true if any source is exists?\n        for (FunctionValues vals : valsArr) {\n          if (vals.exists(doc)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: need ValueSource.type() to determine correct type\n        return super.getValueFiller();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}