{"path":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\", \"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"6\", \"2\"), 10));\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\", \"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"6\", \"2\"), 10));\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\", \"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"6\", \"2\"), 10));\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"5\", \"5\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"6\", \"2\"), 10));\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLSearcher#searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Search an index with facets.\n   * \n   * @param indexReader\n   *            Reader over the search index.\n   * @param taxo\n   *            taxonomy reader.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","sourceOld":"  public static List<FacetResult> searchWithFacets(IndexReader indexReader,\n      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // faceted search is working in 2 steps:\n    // 1. collect matching documents\n    // 2. aggregate facets for collected documents and\n    // generate the requested faceted results from the aggregated facets\n\n    // step 1: create a query for finding matching documents for which we\n    // accumulate facets\n    Query q = new TermQuery(new Term(SimpleUtils.TEXT, \"Quis\"));\n    ExampleUtils.log(\"Query: \" + q);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"5\", \"5\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"6\", \"2\"), 10));\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // Facets collector is the simplest interface for faceted search.\n    // It provides faceted search functions that are sufficient to many\n    // application,\n    // although it is insufficient for tight control on faceted search\n    // behavior - in those\n    // situations other, more low-level interfaces are available, as\n    // demonstrated in other search examples.\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}