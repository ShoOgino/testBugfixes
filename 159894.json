{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random, query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random, query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random, query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random, query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random, query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random, query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random, query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random, query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random(), query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random(), query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random(), query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random(), query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random, query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random, query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random, query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random, query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random(), query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random(), query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random(), query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random(), query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random(), query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random(), query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random(), query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random(), query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query = new PhraseQuery(\"field\", \"two\", \"three\"); // to use exact phrase scorer\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random(), query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query = new PhraseQuery(\"field\", \"two\", \"three\"); // to use sloppy scorer \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random(), query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery(2, \"palindrome\", \"two\", \"three\"); // must be at least two for both ordered and reversed to match\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random(), query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery(2, \"palindrome\", \"three\", \"two\"); // must be at least two for both ordered and reversed to match\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random(), query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(random(), query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(random(), query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(random(), query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    //float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(random(), query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}