{"path":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","commits":[{"id":"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","date":1435865633,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,SortingMergePolicy).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link SortingMergePolicy}. */\n  public static boolean canEarlyTerminate(Sort sort, SortingMergePolicy mergePolicy) {\n    final SortField[] fields1 = sort.getSort();\n    final SortField[] fields2 = mergePolicy.getSort().getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#canEarlyTerminate(Sort,Sort).mjava","sourceNew":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","sourceOld":"  /** Returns whether collection can be early-terminated if it sorts with the\n   *  provided {@link Sort} and if segments are merged with the provided\n   *  {@link Sort}. */\n  public static boolean canEarlyTerminate(Sort searchSort, Sort mergePolicySort) {\n    final SortField[] fields1 = searchSort.getSort();\n    final SortField[] fields2 = mergePolicySort.getSort();\n    // early termination is possible if fields1 is a prefix of fields2\n    if (fields1.length > fields2.length) {\n      return false;\n    }\n    return Arrays.asList(fields1).equals(Arrays.asList(fields2).subList(0, fields1.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}