{"path":"backwards/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}