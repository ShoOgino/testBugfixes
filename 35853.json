{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = toSet(b, 0);\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates = toSet(a, numStates);\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}