{"path":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient(leaderUrl);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl).build();\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient(leaderUrl);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl).build();\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient(leaderUrl);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl).build();\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl).build();\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6afb0ba86024b96e8b34cfc2e15562239dc36360","date":1579768208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close server: \", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: \", leaderUrl, e);\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: \", leaderUrl, ioe);\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): \", lastVersion, e);\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): \", lastVersion, e);\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: {}\", leaderUrl, e.getMessage());\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: {}\", leaderUrl, ioe.getMessage());\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): {}\", lastVersion, e.getMessage());\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrUpdateLogSynchronizer.UpdateLogSynchronisation#run().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void run() {\n      try {\n        String leaderUrl = getLeaderUrl();\n        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later\n          return;\n        }\n\n        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)\n            .withConnectionTimeout(15000)\n            .withSocketTimeout(60000)\n            .build();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());\n\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest request = new QueryRequest(params);\n        request.setPath(path);\n\n        long lastVersion;\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = server.request(request);\n          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);\n          if (log.isDebugEnabled()) {\n            log.debug(\"My leader {} says its last processed _version_ number is: {}. I am {}\", leaderUrl, lastVersion,\n                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          }\n        } catch (IOException | SolrServerException e) {\n          log.warn(\"Couldn't get last processed version from leader {}: \", leaderUrl, e);\n          return;\n        } finally {\n          try {\n            server.close();\n          } catch (IOException ioe) {\n            log.warn(\"Caught exception trying to close client to {}: \", leaderUrl, ioe);\n          }\n        }\n\n        // if we received -1, it means that the log reader on the leader has not yet started to read log entries\n        // do nothing\n        if (lastVersion == -1) {\n          return;\n        }\n\n        try {\n          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n          if (ulog.isBuffering()) {\n            log.debug(\"Advancing replica buffering tlog reader to {} @ {}:{}\", lastVersion, collection, shardId);\n            ulog.getBufferToggle().seek(lastVersion);\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): \", lastVersion, e);\n        } catch (IOException e) {\n          log.warn(\"Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): \", lastVersion, e);\n        }\n      } catch (Throwable e) {\n        log.warn(\"Caught unexpected exception\", e);\n        throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["86290366cefc1b9d4eced13b430858c4a4c0421d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","6afb0ba86024b96e8b34cfc2e15562239dc36360"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}