{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      // nocommit: when will we useCache?\n      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa","date":1373991484,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      // nocommit: when will we useCache?\n      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n        updateEnum(fstEnum.seekCeil(target));\n        if (term == null) {\n          return SeekStatus.END;\n        } else {\n          return term.equals(target) ? SeekStatus.FOUND : SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["050ba1ba249733cac50c2612418b7179591d2df9"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa"]},"commit2Childs":{"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa":["050ba1ba249733cac50c2612418b7179591d2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a509b6df968a74c38a0528f5bf6ea26f503b756","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa"],"050ba1ba249733cac50c2612418b7179591d2df9":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}