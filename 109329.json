{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,File,String).mjava","sourceNew":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    ZipFile zip = new ZipFile(zipFile.toFile());\n    InputStream vo = zip.getInputStream(zip.getEntry(vocOut));\n    assertVocabulary(a, vo);\n    vo.close();\n    zip.close();\n  }\n\n","sourceOld":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, File zipFile, String vocOut)\n  throws IOException {\n    ZipFile zip = new ZipFile(zipFile);\n    InputStream vo = zip.getInputStream(zip.getEntry(vocOut));\n    assertVocabulary(a, vo);\n    vo.close();\n    zip.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3125c103a40467dd318d6beff055c5f34b7bcf3a","date":1410661891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","sourceNew":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    Path tmp = LuceneTestCase.createTempDir();\n    try (InputStream in = Files.newInputStream(zipFile)) {\n      TestUtil.unzip(in, tmp);\n    }\n    try (InputStream in = Files.newInputStream(tmp.resolve(vocOut))) {\n      assertVocabulary(a, in);\n    }\n  }\n\n","sourceOld":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    ZipFile zip = new ZipFile(zipFile.toFile());\n    InputStream vo = zip.getInputStream(zip.getEntry(vocOut));\n    assertVocabulary(a, vo);\n    vo.close();\n    zip.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","sourceNew":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    Path tmp = LuceneTestCase.createTempDir().resolve(\"unzipped\");\n    try (InputStream in = Files.newInputStream(zipFile)) {\n      TestUtil.unzip(in, tmp);\n    }\n    try (InputStream in = Files.newInputStream(tmp.resolve(vocOut))) {\n      assertVocabulary(a, in);\n    }\n  }\n\n","sourceOld":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    Path tmp = LuceneTestCase.createTempDir();\n    try (InputStream in = Files.newInputStream(zipFile)) {\n      TestUtil.unzip(in, tmp);\n    }\n    try (InputStream in = Files.newInputStream(tmp.resolve(vocOut))) {\n      assertVocabulary(a, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String).mjava","sourceNew":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    Path tmp = LuceneTestCase.createTempDir();\n    try (InputStream in = Files.newInputStream(zipFile)) {\n      TestUtil.unzip(in, tmp);\n    }\n    try (InputStream in = Files.newInputStream(tmp.resolve(vocOut))) {\n      assertVocabulary(a, in);\n    }\n  }\n\n","sourceOld":"  /** Run a vocabulary test against a tab-separated data file inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String vocOut) throws IOException {\n    Path tmp = LuceneTestCase.createTempDir().resolve(\"unzipped\");\n    try (InputStream in = Files.newInputStream(zipFile)) {\n      TestUtil.unzip(in, tmp);\n    }\n    try (InputStream in = Files.newInputStream(tmp.resolve(vocOut))) {\n      assertVocabulary(a, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3125c103a40467dd318d6beff055c5f34b7bcf3a"]},"commit2Childs":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["44a0466296f4b2d9deac60e3e524628c97aa5191","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}