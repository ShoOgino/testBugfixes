{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","pathOld":"/dev/null","sourceNew":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","sourceNew":null,"sourceOld":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","pathOld":"/dev/null","sourceNew":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#getDataSourceInstance(DataConfig.Entity,String,Context).mjava","sourceNew":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","sourceOld":"  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx) {\n    Properties p = dataSourceProps.get(name);\n    if (p == null)\n      p = config.dataSources.get(name);\n    if (p == null)\n      p = dataSourceProps.get(null);// for default data source\n    if (p == null)\n      p = config.dataSources.get(null);\n    if (p == null)  \n      throw new DataImportHandlerException(SEVERE,\n              \"No dataSource :\" + name + \" available for entity :\"\n                      + key.name);\n    String type = p.getProperty(TYPE);\n    DataSource dataSrc = null;\n    if (type == null) {\n      dataSrc = new JdbcDataSource();\n    } else {\n      try {\n        dataSrc = (DataSource) DocBuilder.loadClass(type, getCore()).newInstance();\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Invalid type for data source: \" + type);\n      }\n    }\n    try {\n      Properties copyProps = new Properties();\n      copyProps.putAll(p);\n      Map<String, Object> map = ctx.getRequestParameters();\n      if (map.containsKey(\"rows\")) {\n        int rows = Integer.parseInt((String) map.get(\"rows\"));\n        if (map.containsKey(\"start\")) {\n          rows += Integer.parseInt((String) map.get(\"start\"));\n        }\n        copyProps.setProperty(\"maxRows\", String.valueOf(rows));\n      }\n      dataSrc.init(ctx, copyProps);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Failed to initialize DataSource: \" + key.dataSource);\n    }\n    return dataSrc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}