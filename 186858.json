{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random, 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      IndexableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"verifySort sort=\" + sort);\n    }\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = (sort.getSort()[0].getField().indexOf(\"_fixed\") != -1) ? \"_fixed\" : \"\";\n    for(int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for(int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":"  private void verifyStringSort(Sort sort) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"verifySort sort=\" + sort);\n    }\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = (sort.getSort()[0].getField().indexOf(\"_fixed\") != -1) ? \"_fixed\" : \"\";\n    for(int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for(int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = sort.getSort()[0].getField().endsWith(\"_fixed\") ? \"_fixed\" : \"\";\n    for (int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for (int j = 0; j < v.length; ++j) {\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":null,"sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"verifySort sort=\" + sort);\n    }\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = (sort.getSort()[0].getField().indexOf(\"_fixed\") != -1) ? \"_fixed\" : \"\";\n    for(int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for(int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#verifyStringSort(Sort).mjava","sourceNew":null,"sourceOld":"  private void verifyStringSort(Sort sort) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"verifySort sort=\" + sort);\n    }\n    final IndexSearcher searcher = getFullStrings();\n    final ScoreDoc[] result = searcher.search(new MatchAllDocsQuery(), null, _TestUtil.nextInt(random(), 500, searcher.getIndexReader().maxDoc()), sort).scoreDocs;\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    final String fieldSuffix = (sort.getSort()[0].getField().indexOf(\"_fixed\") != -1) ? \"_fixed\" : \"\";\n    for(int x = 0; x < n; ++x) {\n      StoredDocument doc2 = searcher.doc(result[x].doc);\n      StorableField[] v = doc2.getFields(\"tracer\" + fieldSuffix);\n      StorableField[] v2 = doc2.getFields(\"tracer2\" + fieldSuffix);\n      for(int j = 0; j < v.length; ++j) {\n        buff.append(v[j].stringValue() + \"(\" + v2[j].stringValue() + \")(\" + result[x].doc+\")\\n\");\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n            buff.append(\"  WRONG tracer\\n\");\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n              buff.append(\"  WRONG tracer2\\n\");\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n                buff.append(\"  WRONG docID\\n\");\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n      }\n    }\n    if (fail) {\n      System.out.println(\"topn field1(field2)(docID):\\n\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.getIndexReader().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","29f7cc7c185412da66c1d0089d9e75da01329a00"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}