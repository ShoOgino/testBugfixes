{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, ScoreMode.COMPLETE_NO_SCORES);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, ScoreMode.COMPLETE_NO_SCORES);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, false, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, false);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, ScoreMode.COMPLETE_NO_SCORES);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(q, ScoreMode.COMPLETE_NO_SCORES);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.visit(QueryVisitor.termCollector(nonWeightedTerms));\n      }\n    } else {\n      spanQuery.visit(QueryVisitor.termCollector(nonWeightedTerms));\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery, float boost) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<>();\n \n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.setQueryCache(null);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContext().reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost).extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      LeafReaderContext context = getLeafContext();\n      SpanWeight w = (SpanWeight) searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = w.getSpans(context, SpanWeight.Postings.POSITIONS);\n      if (spans == null) {\n        return;\n      }\n\n      // collect span positions\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        if (acceptDocs != null && acceptDocs.get(spans.docID()) == false) {\n          continue;\n        }\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          spanPositions.add(new PositionSpan(spans.startPosition(), spans.endPosition() - 1));\n        }\n      }\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}