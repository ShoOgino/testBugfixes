{"path":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d60e292705ee7b33afc5626438b30e694160930","date":1341229584,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d60e292705ee7b33afc5626438b30e694160930":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1d60e292705ee7b33afc5626438b30e694160930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d60e292705ee7b33afc5626438b30e694160930"]},"commit2Childs":{"1d60e292705ee7b33afc5626438b30e694160930":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1d60e292705ee7b33afc5626438b30e694160930","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}