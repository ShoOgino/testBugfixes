{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["85a883878c0af761245ab048babc63d099f835f3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}