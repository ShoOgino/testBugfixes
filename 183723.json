{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":["06b5cf416573ead4d52693ed925eda0bc12be5ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06b5cf416573ead4d52693ed925eda0bc12be5ff","date":1444636325,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5","date":1453144432,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bcaa01a379f5fb824940c2c12277fbf65838d5a","date":1457009404,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4014209b24e71d602e579a316f994355596012","date":1465717267,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4425aa1103f1abe8e39d220f12e82b94c4f8272a","date":1467268836,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(),message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fac11578d87e86ac41841e07ba8db185cedf92c","date":1471085468,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(), message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(),message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(), message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(),message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results, null);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default: {\n          Cmd command = commandMap.get(action);\n          if (command != null) {\n            command.call(zkStateReader.getClusterState(), message, results);\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"Needs currentTimeMillis for mock requests\")\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = getCollectionAction(operation);\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          modifyCollection(message, results);\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        case MOCK_COLL_TASK:\n        case MOCK_SHARD_TASK:\n        case MOCK_REPLICA_TASK: {\n          //only for test purposes\n          Thread.sleep(message.getInt(\"sleep\", 1));\n          log.info(\"MOCK_TASK_EXECUTED time {} data {}\",System.currentTimeMillis(), Utils.toJSONString(message));\n          results.add(\"MOCK_FINISHED\", System.currentTimeMillis());\n          break;\n        }\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.info(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          reloadCollection(message, results);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        case MIGRATESTATEFORMAT:\n          migrateStateFormat(message, results);\n          break;\n        case BACKUP:\n          processBackupAction(message, results);\n          break;\n        case RESTORE:\n          processRestoreAction(message, results);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["3bbb741690cdafda7f1f7549c26351c912917a69","19498030e0adab22f604f935cae3c03dcf0952a6"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1e4014209b24e71d602e579a316f994355596012":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5":["06b5cf416573ead4d52693ed925eda0bc12be5ff"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["b1777912fb613f51063554d81f71c1b70d6bcd77","9fac11578d87e86ac41841e07ba8db185cedf92c"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"0bcaa01a379f5fb824940c2c12277fbf65838d5a":["19498030e0adab22f604f935cae3c03dcf0952a6"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","962cd4f5e313777f35da8f521265323e84184929"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"06b5cf416573ead4d52693ed925eda0bc12be5ff":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"962cd4f5e313777f35da8f521265323e84184929":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"19498030e0adab22f604f935cae3c03dcf0952a6":["3bbb741690cdafda7f1f7549c26351c912917a69"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["1e4014209b24e71d602e579a316f994355596012"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","0bcaa01a379f5fb824940c2c12277fbf65838d5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["06b5cf416573ead4d52693ed925eda0bc12be5ff"],"1e4014209b24e71d602e579a316f994355596012":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5":["3bbb741690cdafda7f1f7549c26351c912917a69"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9fac11578d87e86ac41841e07ba8db185cedf92c"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0bcaa01a379f5fb824940c2c12277fbf65838d5a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"06b5cf416573ead4d52693ed925eda0bc12be5ff":["f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3bbb741690cdafda7f1f7549c26351c912917a69":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","962cd4f5e313777f35da8f521265323e84184929"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["1e4014209b24e71d602e579a316f994355596012"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653","0bcaa01a379f5fb824940c2c12277fbf65838d5a"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["b1777912fb613f51063554d81f71c1b70d6bcd77","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["55b50463286869f584cf849d1587a0fcd54d1dfa","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["55b50463286869f584cf849d1587a0fcd54d1dfa","c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}