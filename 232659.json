{"path":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","sourceOld":"    @Override\n    protected Query getFieldQuery(String field, String val, boolean quoted) throws ParseException {\n//System.out.println(\"getFieldQuery: val=\"+val);\n\n      this.type = QType.FIELD;\n      this.field = field;\n      this.val = val;\n      this.slop = getPhraseSlop(); // unspecified\n      return getAliasedQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"c26f00b574427b55127e869b935845554afde1fa":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}