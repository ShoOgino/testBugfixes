{"path":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","commits":[{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null)\n        break;\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer) throws IOException {\n\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null)\n        break;\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null)\n        break;\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null)\n        break;\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null)\n        break;\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["28288370235ed02234a64753cdbf0c6ec096304a"],"4853751884e55469b8cc1abab8fa0788eab240c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["4853751884e55469b8cc1abab8fa0788eab240c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["4853751884e55469b8cc1abab8fa0788eab240c9","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["4853751884e55469b8cc1abab8fa0788eab240c9","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2178aefcd4690bd53785e9673e2c918cdb64165"]},"commit2Childs":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4853751884e55469b8cc1abab8fa0788eab240c9":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4853751884e55469b8cc1abab8fa0788eab240c9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}