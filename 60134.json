{"path":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","commits":[{"id":"e99704b4caa3a3ad9eafb2b6e37979551773ece6","date":1241376470,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrParams).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getSolrQueryParser(null).getField());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param solrParams SolrParams taken from request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrParams solrParams) {\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getSolrQueryParser(null).getField());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae616b172ba970c05aecac11e93c3cc09d92295","date":1250696291,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":["e2d212bcd6f9794eeca3f3f5a849c007381ccd65","e2d212bcd6f9794eeca3f3f5a849c007381ccd65","e2d212bcd6f9794eeca3f3f5a849c007381ccd65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aae616b172ba970c05aecac11e93c3cc09d92295":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["aae616b172ba970c05aecac11e93c3cc09d92295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aae616b172ba970c05aecac11e93c3cc09d92295":["ad94625fb8d088209f46650c8097196fec67f00c"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["aae616b172ba970c05aecac11e93c3cc09d92295"],"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}