{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","commits":[{"id":"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b","date":1384304197,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Map.Entry<List<String>, String> generateFileEntry(String fieldDelimiter, boolean hasWeight, boolean hasPayload) {\n    List<String> entryValues = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    String term = _TestUtil.randomSimpleString(random(), 1, 300);\n    sb.append(term);\n    entryValues.add(term);\n    if (hasWeight) {\n      sb.append(fieldDelimiter);\n      long weight = _TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      sb.append(weight);\n      entryValues.add(String.valueOf(weight));\n    }\n    if (hasPayload) {\n      sb.append(fieldDelimiter);\n      String payload = _TestUtil.randomSimpleString(random(), 1, 300);\n      sb.append(payload);\n      entryValues.add(payload);\n    }\n    sb.append(\"\\n\");\n    return new SimpleEntry<List<String>, String>(entryValues, sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","sourceNew":"  private Map.Entry<List<String>, String> generateFileEntry(String fieldDelimiter, boolean hasWeight, boolean hasPayload) {\n    List<String> entryValues = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    String term = TestUtil.randomSimpleString(random(), 1, 300);\n    sb.append(term);\n    entryValues.add(term);\n    if (hasWeight) {\n      sb.append(fieldDelimiter);\n      long weight = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      sb.append(weight);\n      entryValues.add(String.valueOf(weight));\n    }\n    if (hasPayload) {\n      sb.append(fieldDelimiter);\n      String payload = TestUtil.randomSimpleString(random(), 1, 300);\n      sb.append(payload);\n      entryValues.add(payload);\n    }\n    sb.append(\"\\n\");\n    return new SimpleEntry<List<String>, String>(entryValues, sb.toString());\n  }\n\n","sourceOld":"  private Map.Entry<List<String>, String> generateFileEntry(String fieldDelimiter, boolean hasWeight, boolean hasPayload) {\n    List<String> entryValues = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    String term = _TestUtil.randomSimpleString(random(), 1, 300);\n    sb.append(term);\n    entryValues.add(term);\n    if (hasWeight) {\n      sb.append(fieldDelimiter);\n      long weight = _TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      sb.append(weight);\n      entryValues.add(String.valueOf(weight));\n    }\n    if (hasPayload) {\n      sb.append(fieldDelimiter);\n      String payload = _TestUtil.randomSimpleString(random(), 1, 300);\n      sb.append(payload);\n      entryValues.add(payload);\n    }\n    sb.append(\"\\n\");\n    return new SimpleEntry<List<String>, String>(entryValues, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileEntry(String,boolean,boolean).mjava","sourceNew":"  private Map.Entry<List<String>, String> generateFileEntry(String fieldDelimiter, boolean hasWeight, boolean hasPayload) {\n    List<String> entryValues = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    String term = TestUtil.randomSimpleString(random(), 1, 300);\n    sb.append(term);\n    entryValues.add(term);\n    if (hasWeight) {\n      sb.append(fieldDelimiter);\n      long weight = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      sb.append(weight);\n      entryValues.add(String.valueOf(weight));\n    }\n    if (hasPayload) {\n      sb.append(fieldDelimiter);\n      String payload = TestUtil.randomSimpleString(random(), 1, 300);\n      sb.append(payload);\n      entryValues.add(payload);\n    }\n    sb.append(\"\\n\");\n    return new SimpleEntry<>(entryValues, sb.toString());\n  }\n\n","sourceOld":"  private Map.Entry<List<String>, String> generateFileEntry(String fieldDelimiter, boolean hasWeight, boolean hasPayload) {\n    List<String> entryValues = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    String term = TestUtil.randomSimpleString(random(), 1, 300);\n    sb.append(term);\n    entryValues.add(term);\n    if (hasWeight) {\n      sb.append(fieldDelimiter);\n      long weight = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      sb.append(weight);\n      entryValues.add(String.valueOf(weight));\n    }\n    if (hasPayload) {\n      sb.append(fieldDelimiter);\n      String payload = TestUtil.randomSimpleString(random(), 1, 300);\n      sb.append(payload);\n      entryValues.add(payload);\n    }\n    sb.append(\"\\n\");\n    return new SimpleEntry<List<String>, String>(entryValues, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}