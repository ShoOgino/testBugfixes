{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes(), false)) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes(), false)) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes(), false)) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes(), false)) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[AtomicReaderContext],TermContext[],Term[]).mjava","sourceNew":null,"sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<AtomicReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}