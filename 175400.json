{"path":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","commits":[{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    super(useSSL, clientAuth, null, TEST_KEYSTORE_PASSWORD, null, TEST_KEYSTORE_PASSWORD);\n    this.checkPeerName = checkPeerName;\n    \n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f037dbb46863645cfa99308391fda49a61abfb6","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    super(useSSL, clientAuth, null, TEST_KEYSTORE_PASSWORD, null, TEST_KEYSTORE_PASSWORD);\n\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    super(useSSL, clientAuth, null, TEST_KEYSTORE_PASSWORD, null, TEST_KEYSTORE_PASSWORD);\n    this.checkPeerName = checkPeerName;\n    \n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    super(useSSL, clientAuth, null, TEST_KEYSTORE_PASSWORD, null, TEST_KEYSTORE_PASSWORD);\n\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f4aeebb20113377af399c0f4e9bf74ef941405","date":1560858591,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ffa4c5138b265fd040cebc0c054245f746fec8","date":1560937397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    if (useSSL) {\n      if (Constants.JRE_IS_MINIMUM_JAVA11 && Runtime.version().compareTo(Runtime.Version.parse(\"11.0.3\")) < 0) {\n        log.warn(\"SOLR-12988: TLSv1.3 in Java 11.0.2 or lower versions does not working correctly with HttpClient, disabling SSL for tests\");\n        useSSL = false;\n      }\n    }\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8120311c6ca6ab46534aa630647b6076dc6f55a","date":1560974858,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    if (useSSL) {\n      if (Constants.JRE_IS_MINIMUM_JAVA11 && Runtime.version().compareTo(Runtime.Version.parse(\"11.0.3\")) < 0) {\n        log.warn(\"SOLR-12988: TLSv1.3 in Java 11.0.2 or lower versions does not working correctly with HttpClient, disabling SSL for tests\");\n        useSSL = false;\n      }\n    }\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9f82bd54d9da83375ccde16b53ee77adb131ffe","date":1561071889,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"620836184fd918b1cca33e6de8100c45da6890dc","date":1561413738,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    if (useSsl) {\n      assumeSslIsSafeToTest();\n    }\n    \n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8cb983608d8dea5c61181ba5168ba89ec92f34","date":1561416143,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    if (useSsl) {\n      assumeSslIsSafeToTest();\n    }\n    \n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6382e83f99a1251346565d7f385aa8f6f79f2d","date":1561675880,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#SSLTestConfig(boolean,boolean,boolean).mjava","sourceNew":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    this.useSsl = useSSL;\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    if (useSsl) {\n      assumeSslIsSafeToTest();\n    }\n    \n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","sourceOld":"  // NOTE: if any javadocs below change, update create-keystores.sh\n  /**\n   * Create an SSLTestConfig based on a few caller specified options.  As needed, \n   * keystore/truststore information will be pulled from a hardcoded resource files provided \n   * by the solr test-framework based on the value of <code>checkPeerName</code>:\n   * <ul>\n   * <li><code>true</code> - A keystore resource file will be used that specifies \n   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to \n   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> \n   * <li><code>false</code> - A keystore resource file will be used that specifies \n   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this \n   *     SSLTestConfig should care what CN/SAN are.</li> \n   * </ul>\n   *\n   * @param useSSL - whether SSL should be required.\n   * @param clientAuth - whether client authentication should be required.\n   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)\n   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME\n   */\n  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {\n    // @AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\n    if (Constants.JRE_IS_MINIMUM_JAVA11) {\n      this.useSsl = false;\n    } else {\n      this.useSsl = useSSL;\n    }\n    this.clientAuth = clientAuth;\n    this.checkPeerName = checkPeerName;\n\n    final String resourceName = checkPeerName\n      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;\n    trustStore = keyStore = Resource.newClassPathResource(resourceName);\n    if (null == keyStore || ! keyStore.exists() ) {\n      throw new IllegalStateException(\"Unable to locate keystore resource file in classpath: \"\n                                      + resourceName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["620836184fd918b1cca33e6de8100c45da6890dc"],"4f037dbb46863645cfa99308391fda49a61abfb6":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["4f037dbb46863645cfa99308391fda49a61abfb6"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8120311c6ca6ab46534aa630647b6076dc6f55a":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"620836184fd918b1cca33e6de8100c45da6890dc":["b9f82bd54d9da83375ccde16b53ee77adb131ffe"],"b9f82bd54d9da83375ccde16b53ee77adb131ffe":["b8120311c6ca6ab46534aa630647b6076dc6f55a"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"]},"commit2Childs":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"],"4f037dbb46863645cfa99308391fda49a61abfb6":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["4f037dbb46863645cfa99308391fda49a61abfb6"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["b8120311c6ca6ab46534aa630647b6076dc6f55a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"b8120311c6ca6ab46534aa630647b6076dc6f55a":["b9f82bd54d9da83375ccde16b53ee77adb131ffe"],"620836184fd918b1cca33e6de8100c45da6890dc":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"b9f82bd54d9da83375ccde16b53ee77adb131ffe":["620836184fd918b1cca33e6de8100c45da6890dc"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}