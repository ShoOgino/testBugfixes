{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    final TermsWriter terms = new TermsWriter(field);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    final TermsWriter terms = new TermsWriter(field);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26867fa391352324254e5eafd1c2d63e3221f4fc","date":1350562745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    return new TermsWriter(field);\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    final TermsWriter terms = new TermsWriter(field);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    return new TermsWriter(field);\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    final TermsWriter terms = new TermsWriter(field);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#addField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //DEBUG = field.name.equals(\"id\");\n    //if (DEBUG) System.out.println(\"\\nBTTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    return new TermsWriter(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","26867fa391352324254e5eafd1c2d63e3221f4fc"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["26867fa391352324254e5eafd1c2d63e3221f4fc"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","26867fa391352324254e5eafd1c2d63e3221f4fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}