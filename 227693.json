{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) {\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      assert context.isAtomic;\n      final FixedBitSet set = new FixedBitSet(context.reader.maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}