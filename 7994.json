{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#advance().mjava","commits":[{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#advance().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * <p>Increments this circular number's value to the next member in the\n     * circular sequence\n     * <code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     * \n     * @return the next member in the circular sequence\n     */\n    public int advance() {\n      if (value == 1) {\n        value = minShingleSize;\n      } else if (value == maxShingleSize) {\n        reset();\n      } else {\n        ++value;\n      }\n      return value;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#advance().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#advance().mjava","sourceNew":"    /**\n     * <p>Increments this circular number's value to the next member in the\n     * circular sequence\n     * <code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     * \n     * @return the next member in the circular sequence\n     */\n    public int advance() {\n      if (value == 1) {\n        value = minShingleSize;\n      } else if (value == maxShingleSize) {\n        reset();\n      } else {\n        ++value;\n      }\n      return value;\n    }\n\n","sourceOld":"    /**\n     * <p>Increments this circular number's value to the next member in the\n     * circular sequence\n     * <code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     * \n     * @return the next member in the circular sequence\n     */\n    public int advance() {\n      if (value == 1) {\n        value = minShingleSize;\n      } else if (value == maxShingleSize) {\n        reset();\n      } else {\n        ++value;\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}