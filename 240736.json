{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedDistinct().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedDistinct().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","sourceNew":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","sourceOld":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedDistinct().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedDistinct().mjava","sourceNew":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    IntervalsSource source = Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\")));\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n    // automatic rewrites mean that we end up with 11 sources to visit\n    checkVisits(source, 11, \"porridge\", \"pease\");\n  }\n\n","sourceOld":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed67e557f509069144486ee34fd0275a6dcbe991"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}