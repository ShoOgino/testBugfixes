{"path":"src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuffer sb = new StringBuffer();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuffer sb = new StringBuffer();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2e5bfa22b27d858fb940b70befda09798b82dd2","date":1233862915,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuffer sb = new StringBuffer();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}