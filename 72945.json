{"path":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b669bd448d2f16734a27e791e4046272aa2e2e1a","date":1282187885,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f","date":1284226094,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c88221aeda5571321ba2bf95de2a7348401230cf","c88221aeda5571321ba2bf95de2a7348401230cf","c88221aeda5571321ba2bf95de2a7348401230cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41be1b437ea96ec8ec3a59d91b77739ac75c05b7","date":1296228333,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = ReturnFields.getReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.getWantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = ReturnFields.getReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.getWantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    checkDistributed(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags    \n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n    rb.setFieldFlags( flags );\n\n    String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);\n\n    // get it from the response builder to give a different component a chance\n    // to set it.\n    String queryString = rb.getQueryString();\n    if (queryString == null) {\n      // this is the normal way it's set.\n      queryString = params.get( CommonParams.Q );\n      rb.setQueryString(queryString);\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      Query q = parser.getQuery();\n      if (q == null) {\n        // normalize a null query to a query that matches nothing\n        q = new BooleanQuery();        \n      }\n      rb.setQuery( q );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>(fqs.length);\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n        // only set the filters if they are not empty otherwise\n        // fq=&someotherParam= will trigger all docs filter for every request \n        // if filter cache is disabled\n        if (!filters.isEmpty()) {\n          rb.setFilters( filters );\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["828f199c76d70a5ea0ddc4d9605063f1d323a28d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"41be1b437ea96ec8ec3a59d91b77739ac75c05b7":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","41be1b437ea96ec8ec3a59d91b77739ac75c05b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["d5f3a3bdd2298a698af763bc4a4e6510f0b3549f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f":["b669bd448d2f16734a27e791e4046272aa2e2e1a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","41be1b437ea96ec8ec3a59d91b77739ac75c05b7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b669bd448d2f16734a27e791e4046272aa2e2e1a":["1da8d55113b689b06716246649de6f62430f15c0"],"2553b00f699380c64959ccb27991289aae87be2e":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"6aedf81f068e430dec27d94310415cc6ff52731c":["41be1b437ea96ec8ec3a59d91b77739ac75c05b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"41be1b437ea96ec8ec3a59d91b77739ac75c05b7":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","6aedf81f068e430dec27d94310415cc6ff52731c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b669bd448d2f16734a27e791e4046272aa2e2e1a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["41be1b437ea96ec8ec3a59d91b77739ac75c05b7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","2553b00f699380c64959ccb27991289aae87be2e","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c","d619839baa8ce5503e496b94a9e42ad6f079293f"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b669bd448d2f16734a27e791e4046272aa2e2e1a":["d5f3a3bdd2298a698af763bc4a4e6510f0b3549f"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d083e83f225b11e5fdd900e83d26ddb385b6955c","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}