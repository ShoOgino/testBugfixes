{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = termState.absolute || absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields == null ? 0 : fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.absolute = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = termState.absolute || absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields == null ? 0 : fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.absolute = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = termState.absolute || absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields == null ? 0 : fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.absolute = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}