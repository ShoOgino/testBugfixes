{"path":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","commits":[{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(MergeState,boolean).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, MergeState mergeState, List<NumericDocValues> toMerge) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);\n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      NumericDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = values.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(fieldInfo, minValue, maxValue);\n    field.merge(mergeState, toMerge);\n  }\n\n","sourceOld":"  // nocommit bogus forceNorms:\n  // dead simple impl: codec can optimize\n  protected void mergeNumericField(MergeState mergeState, boolean forceNorms) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      //System.out.println(\"merge field=\" + mergeState.fieldInfo.name);\n      NumericDocValues docValues = forceNorms ? reader.simpleNormValues(mergeState.fieldInfo.name) : reader.getNumericDocValues(mergeState.fieldInfo.name);\n      if (docValues == null) {\n        // nocommit this isn't correct i think?  ie this one\n        // segment may have no docs containing this\n        // field... and that doesn't mean norms are omitted ...\n        //assert !forceNorms;\n        docValues = new NumericDocValues.EMPTY(maxDoc);\n      }\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = docValues.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(mergeState.fieldInfo, minValue, maxValue);\n    field.merge(mergeState, forceNorms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            // nocommit make a mutable number\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, MergeState mergeState, List<NumericDocValues> toMerge) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);\n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      NumericDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = values.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(fieldInfo, minValue, maxValue);\n    field.merge(mergeState, toMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            // nocommit make a mutable number\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            // nocommit make a mutable number\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32fb848e256860b63adc9c2b068f386032c77b67":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["32fb848e256860b63adc9c2b068f386032c77b67"],"32fb848e256860b63adc9c2b068f386032c77b67":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}