{"path":"solr/core/src/java/org/apache/solr/security/Permission#readValueAsSet(Map,String).mjava","commits":[{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Permission#readValueAsSet(Map,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readValueAsSet(Map,String).mjava","sourceNew":"  /**\n   * read a key value as a set. if the value is a single string ,\n   * return a singleton set\n   *\n   * @param m   the map from which to lookup\n   * @param key the key with which to do lookup\n   */\n  static Set<String> readValueAsSet(Map m, String key) {\n    Set<String> result = new HashSet<>();\n    Object val = m.get(key);\n    if (val == null) {\n      if(\"collection\".equals(key)) {\n        //for collection collection: null means a core admin/ collection admin request\n        // otherwise it means a request where collection name is ignored\n        return m.containsKey(key) ? singleton(null) : singleton(\"*\");\n      }\n      return null;\n    }\n    if (val instanceof Collection) {\n      Collection list = (Collection) val;\n      for (Object o : list) result.add(String.valueOf(o));\n    } else if (val instanceof String) {\n      result.add((String) val);\n    } else {\n      throw new RuntimeException(\"Bad value for : \" + key);\n    }\n    return result.isEmpty() ? null : Collections.unmodifiableSet(result);\n  }\n\n","sourceOld":"  /**\n   * read a key value as a set. if the value is a single string ,\n   * return a singleton set\n   *\n   * @param m   the map from which to lookup\n   * @param key the key with which to do lookup\n   */\n  static Set<String> readValueAsSet(Map m, String key) {\n    Set<String> result = new HashSet<>();\n    Object val = m.get(key);\n    if (val == null) {\n      if(\"collection\".equals(key)){\n        //for collection collection: null means a core admin/ collection admin request\n        // otherwise it means a request where collection name is ignored\n        return m.containsKey(key) ? singleton(null) : singleton(\"*\");\n      }\n      return null;\n    }\n    if (val instanceof Collection) {\n      Collection list = (Collection) val;\n      for (Object o : list) result.add(String.valueOf(o));\n    } else if (val instanceof String) {\n      result.add((String) val);\n    } else {\n      throw new RuntimeException(\"Bad value for : \" + key);\n    }\n    return result.isEmpty() ? null : Collections.unmodifiableSet(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Permission#readValueAsSet(Map,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/Permission#readValueAsSet(Map,String).mjava","sourceNew":"  /**\n   * read a key value as a set. if the value is a single string ,\n   * return a singleton set\n   *\n   * @param m   the map from which to lookup\n   * @param key the key with which to do lookup\n   */\n  static Set<String> readValueAsSet(@SuppressWarnings({\"rawtypes\"})Map m, String key) {\n    Set<String> result = new HashSet<>();\n    Object val = m.get(key);\n    if (val == null) {\n      if(\"collection\".equals(key)) {\n        //for collection collection: null means a core admin/ collection admin request\n        // otherwise it means a request where collection name is ignored\n        return m.containsKey(key) ? singleton(null) : singleton(\"*\");\n      }\n      return null;\n    }\n    if (val instanceof Collection) {\n      @SuppressWarnings({\"rawtypes\"})\n      Collection list = (Collection) val;\n      for (Object o : list) result.add(String.valueOf(o));\n    } else if (val instanceof String) {\n      result.add((String) val);\n    } else {\n      throw new RuntimeException(\"Bad value for : \" + key);\n    }\n    return result.isEmpty() ? null : Collections.unmodifiableSet(result);\n  }\n\n","sourceOld":"  /**\n   * read a key value as a set. if the value is a single string ,\n   * return a singleton set\n   *\n   * @param m   the map from which to lookup\n   * @param key the key with which to do lookup\n   */\n  static Set<String> readValueAsSet(Map m, String key) {\n    Set<String> result = new HashSet<>();\n    Object val = m.get(key);\n    if (val == null) {\n      if(\"collection\".equals(key)) {\n        //for collection collection: null means a core admin/ collection admin request\n        // otherwise it means a request where collection name is ignored\n        return m.containsKey(key) ? singleton(null) : singleton(\"*\");\n      }\n      return null;\n    }\n    if (val instanceof Collection) {\n      Collection list = (Collection) val;\n      for (Object o : list) result.add(String.valueOf(o));\n    } else if (val instanceof String) {\n      result.add((String) val);\n    } else {\n      throw new RuntimeException(\"Bad value for : \" + key);\n    }\n    return result.isEmpty() ? null : Collections.unmodifiableSet(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}