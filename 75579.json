{"path":"solr/core/src/test/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactoryTest#testEstimateObjectSizeWithSingleChild().mjava","commits":[{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactoryTest#testEstimateObjectSizeWithSingleChild().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEstimateObjectSizeWithSingleChild() {\n    assertEquals(estimate(\"abc\"), 6);\n    assertEquals(estimate(\"abcdefgh\"), 16);\n    List<String> keys = Arrays.asList(\"int\", \"long\", \"double\", \"float\", \"str\");\n    assertEquals(estimate(keys), 42);\n    List<Object> values = Arrays.asList(12, 5L, 12.0, 5.0, \"duck\");\n    assertEquals(estimate(values), 8);\n    final String childDocKey = \"testChildDoc\";\n\n    Map<String, Object> mapWChild = new HashMap<>();\n    mapWChild.put(\"int\", 12);\n    mapWChild.put(\"long\", 5L);\n    mapWChild.put(\"double\", 12.0);\n    mapWChild.put(\"float\", 5.0f);\n    mapWChild.put(\"str\", \"duck\");\n    assertEquals(estimate(mapWChild), 50);\n    Map<String, Object> childMap = new HashMap<>(mapWChild);\n\n\n    SolrInputDocument document = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      document.addField(entry.getKey(), entry.getValue());\n    }\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n\n    SolrInputDocument childDocument = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      childDocument.addField(entry.getKey(), entry.getValue());\n    }\n    document.addField(childDocKey, childDocument);\n    mapWChild.put(childDocKey, childMap);\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(childMap) * 2 + estimate(childDocKey));\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactoryTest#testEstimateObjectSizeWithSingleChild().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEstimateObjectSizeWithSingleChild() {\n    assertEquals(estimate(\"abc\"), 6);\n    assertEquals(estimate(\"abcdefgh\"), 16);\n    List<String> keys = Arrays.asList(\"int\", \"long\", \"double\", \"float\", \"str\");\n    assertEquals(estimate(keys), 42);\n    List<Object> values = Arrays.asList(12, 5L, 12.0, 5.0, \"duck\");\n    assertEquals(estimate(values), 8);\n    final String childDocKey = \"testChildDoc\";\n\n    Map<String, Object> mapWChild = new HashMap<>();\n    mapWChild.put(\"int\", 12);\n    mapWChild.put(\"long\", 5L);\n    mapWChild.put(\"double\", 12.0);\n    mapWChild.put(\"float\", 5.0f);\n    mapWChild.put(\"str\", \"duck\");\n    assertEquals(estimate(mapWChild), 50);\n    Map<String, Object> childMap = new HashMap<>(mapWChild);\n\n\n    SolrInputDocument document = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      document.addField(entry.getKey(), entry.getValue());\n    }\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n\n    SolrInputDocument childDocument = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      childDocument.addField(entry.getKey(), entry.getValue());\n    }\n    document.addField(childDocKey, childDocument);\n    mapWChild.put(childDocKey, childMap);\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(childMap) * 2 + estimate(childDocKey));\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactoryTest#testEstimateObjectSizeWithSingleChild().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEstimateObjectSizeWithSingleChild() {\n    assertEquals(estimate(\"abc\"), 6);\n    assertEquals(estimate(\"abcdefgh\"), 16);\n    List<String> keys = Arrays.asList(\"int\", \"long\", \"double\", \"float\", \"str\");\n    assertEquals(estimate(keys), 42);\n    List<Object> values = Arrays.asList(12, 5L, 12.0, 5.0, \"duck\");\n    assertEquals(estimate(values), 8);\n    final String childDocKey = \"testChildDoc\";\n\n    Map<String, Object> mapWChild = new HashMap<>();\n    mapWChild.put(\"int\", 12);\n    mapWChild.put(\"long\", 5L);\n    mapWChild.put(\"double\", 12.0);\n    mapWChild.put(\"float\", 5.0f);\n    mapWChild.put(\"str\", \"duck\");\n    assertEquals(estimate(mapWChild), 50);\n    Map<String, Object> childMap = new HashMap<>(mapWChild);\n\n\n    SolrInputDocument document = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      document.addField(entry.getKey(), entry.getValue());\n    }\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n\n    SolrInputDocument childDocument = new SolrInputDocument();\n    for (Map.Entry<String, Object> entry : mapWChild.entrySet()) {\n      childDocument.addField(entry.getKey(), entry.getValue());\n    }\n    document.addField(childDocKey, childDocument);\n    mapWChild.put(childDocKey, childMap);\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(childMap) * 2 + estimate(childDocKey));\n    assertEquals(IgnoreLargeDocumentProcessorFactory.ObjectSizeEstimator.estimate(document), estimate(mapWChild));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}