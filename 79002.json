{"path":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","commits":[{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterRand().mjava","sourceNew":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new RangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new RangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index, true);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index, true);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index, true);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterRand() throws IOException {\n\n  IndexReader reader = IndexReader.open(signedIndex.index, true);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(signedIndex.minR);\n        String maxRP = pad(signedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"smallest and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"biggest and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f612096ab5275c4821d05f126bf45a89f4782b8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}