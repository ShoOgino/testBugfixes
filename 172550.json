{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(newField(\"id\", \"\" + i, customType));\n      doc.add(newStringField(\"bytes\", bytes, Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(newField(\"id\", \"\" + i, customType));\n      doc.add(newStringField(\"bytes\", bytes, Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits.value);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    BytesRef bytes = new BytesRef(2);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(newField(\"id\", \"\" + i, customType));\n      doc.add(newStringField(\"bytes\", bytes, Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}