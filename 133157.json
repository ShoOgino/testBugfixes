{"path":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","commits":[{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    log.debug(\"-- onStateChanged: \" + collectionState);\n    if (collectionState == null) { // collection has been deleted - don't wait\n      if (countDownLatch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          countDownLatch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (countDownLatch != null) {\n              countDownLatch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (countDownLatch != null) {\n              countDownLatch.countDown();\n            }\n          }\n        }\n      }\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  // synchronized due to SOLR-11535\n  @Override\n  public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    log.debug(\"-- onStateChanged@\" + Long.toHexString(hashCode()) + \": replicaIds=\" + replicaIds + \", solrCoreNames=\" + solrCoreNames +\n        (latch != null ? \"\\nlatch count=\" + latch.getCount() : \"\") +\n        \"\\ncollectionState=\" + collectionState);\n    if (collectionState == null) { // collection has been deleted - don't wait\n      log.debug(\"-- collection deleted, decrementing latch by \" + replicaIds.size() + solrCoreNames.size());\n      if (latch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          latch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      log.debug(\"-- already done, exiting...\");\n      return true;\n    }\n    if (collectionState.getZNodeVersion() == lastZkVersion) {\n      log.debug(\"-- spurious call with already seen zkVersion=\" + lastZkVersion + \", ignoring...\");\n      return false;\n    }\n    lastZkVersion = collectionState.getZNodeVersion();\n\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        }\n      }\n    }\n    log.debug(\"-- \" + Long.toHexString(hashCode()) + \" now latch count=\" + latch.getCount());\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    log.debug(\"-- onStateChanged: \" + collectionState);\n    if (collectionState == null) { // collection has been deleted - don't wait\n      if (countDownLatch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          countDownLatch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (countDownLatch != null) {\n              countDownLatch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (countDownLatch != null) {\n              countDownLatch.countDown();\n            }\n          }\n        }\n      }\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  // synchronized due to SOLR-11535\n  @Override\n  public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- onStateChanged@{}: replicaIds={}, solrCoreNames={} {}\\ncollectionState {}\"\n          , Long.toHexString(hashCode()), replicaIds, solrCoreNames\n          , (latch != null ? \"\\nlatch count=\" + latch.getCount() : \"\")\n          , collectionState); // logOk\n    }\n    if (collectionState == null) { // collection has been deleted - don't wait\n      if (log.isDebugEnabled()) {\n        log.debug(\"-- collection deleted, decrementing latch by {} \", replicaIds.size() + solrCoreNames.size()); // logOk\n      }\n      if (latch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          latch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      log.debug(\"-- already done, exiting...\");\n      return true;\n    }\n    if (collectionState.getZNodeVersion() == lastZkVersion) {\n      log.debug(\"-- spurious call with already seen zkVersion= {}, ignoring...\", lastZkVersion);\n      return false;\n    }\n    lastZkVersion = collectionState.getZNodeVersion();\n\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        }\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- {} now latchcount={}\", Long.toHexString(hashCode()), latch.getCount());\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  // synchronized due to SOLR-11535\n  @Override\n  public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    log.debug(\"-- onStateChanged@\" + Long.toHexString(hashCode()) + \": replicaIds=\" + replicaIds + \", solrCoreNames=\" + solrCoreNames +\n        (latch != null ? \"\\nlatch count=\" + latch.getCount() : \"\") +\n        \"\\ncollectionState=\" + collectionState);\n    if (collectionState == null) { // collection has been deleted - don't wait\n      log.debug(\"-- collection deleted, decrementing latch by \" + replicaIds.size() + solrCoreNames.size());\n      if (latch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          latch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      log.debug(\"-- already done, exiting...\");\n      return true;\n    }\n    if (collectionState.getZNodeVersion() == lastZkVersion) {\n      log.debug(\"-- spurious call with already seen zkVersion=\" + lastZkVersion + \", ignoring...\");\n      return false;\n    }\n    lastZkVersion = collectionState.getZNodeVersion();\n\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        }\n      }\n    }\n    log.debug(\"-- \" + Long.toHexString(hashCode()) + \" now latch count=\" + latch.getCount());\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  // synchronized due to SOLR-11535\n  @Override\n  public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- onStateChanged@{}: replicaIds={}, solrCoreNames={} {}\\ncollectionState {}\"\n          , Long.toHexString(hashCode()), replicaIds, solrCoreNames\n          , (latch != null ? \"\\nlatch count=\" + latch.getCount() : \"\")\n          , collectionState); // nowarn\n    }\n    if (collectionState == null) { // collection has been deleted - don't wait\n      if (log.isDebugEnabled()) {\n        log.debug(\"-- collection deleted, decrementing latch by {} \", replicaIds.size() + solrCoreNames.size()); // nowarn\n      }\n      if (latch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          latch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      log.debug(\"-- already done, exiting...\");\n      return true;\n    }\n    if (collectionState.getZNodeVersion() == lastZkVersion) {\n      log.debug(\"-- spurious call with already seen zkVersion= {}, ignoring...\", lastZkVersion);\n      return false;\n    }\n    lastZkVersion = collectionState.getZNodeVersion();\n\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        }\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- {} now latchcount={}\", Long.toHexString(hashCode()), latch.getCount());\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  // synchronized due to SOLR-11535\n  @Override\n  public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- onStateChanged@{}: replicaIds={}, solrCoreNames={} {}\\ncollectionState {}\"\n          , Long.toHexString(hashCode()), replicaIds, solrCoreNames\n          , (latch != null ? \"\\nlatch count=\" + latch.getCount() : \"\")\n          , collectionState); // logOk\n    }\n    if (collectionState == null) { // collection has been deleted - don't wait\n      if (log.isDebugEnabled()) {\n        log.debug(\"-- collection deleted, decrementing latch by {} \", replicaIds.size() + solrCoreNames.size()); // logOk\n      }\n      if (latch != null) {\n        for (int i = 0; i < replicaIds.size() + solrCoreNames.size(); i++) {\n          latch.countDown();\n        }\n      }\n      replicaIds.clear();\n      solrCoreNames.clear();\n      return true;\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      log.debug(\"-- already done, exiting...\");\n      return true;\n    }\n    if (collectionState.getZNodeVersion() == lastZkVersion) {\n      log.debug(\"-- spurious call with already seen zkVersion= {}, ignoring...\", lastZkVersion);\n      return false;\n    }\n    lastZkVersion = collectionState.getZNodeVersion();\n\n    for (Slice slice : collectionState.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        if (replicaIds.contains(replica.getName())) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            replicaIds.remove(replica.getName());\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        } else if (solrCoreNames.contains(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          if (replica.isActive(liveNodes)) {\n            activeReplicas.add(replica);\n            solrCoreNames.remove(replica.getStr(ZkStateReader.CORE_NAME_PROP));\n            if (latch != null) {\n              latch.countDown();\n            }\n          }\n        }\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- {} now latchcount={}\", Long.toHexString(hashCode()), latch.getCount());\n    }\n    if (replicaIds.isEmpty() && solrCoreNames.isEmpty()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bcfee499548996a6e5448bbf93b8f276d010270":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["ad4957cde742defe6db19689abdc267c5d948066"],"ad4957cde742defe6db19689abdc267c5d948066":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"2bcfee499548996a6e5448bbf93b8f276d010270":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bcfee499548996a6e5448bbf93b8f276d010270"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad4957cde742defe6db19689abdc267c5d948066":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}