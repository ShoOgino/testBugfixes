{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","commits":[{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsIterator(String field, T association) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsIterator(String field, T association) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsIterator(String field, T association) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsIterator(String field, T association) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["d4d69c535930b5cce125cff868d40f6373dc27d4","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","c4015cd39dff8d4dec562d909f9766debac53aa6"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}