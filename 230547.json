{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","commits":[{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","pathOld":"/dev/null","sourceNew":"    public void open() throws IOException {\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", \"MYSQL\");\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      try {\n        Class.forName(CalciteSolrDriver.class.getCanonicalName());\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(\"jdbc:calcitesolr:\", properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0bdf1c5226b61e889a240ce1c1343547e5b07b","date":1461935546,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","sourceNew":"    public void open() throws IOException {\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      try {\n        Class.forName(CalciteSolrDriver.class.getCanonicalName());\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(\"jdbc:calcitesolr:\", properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":"    public void open() throws IOException {\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", \"MYSQL\");\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      try {\n        Class.forName(CalciteSolrDriver.class.getCanonicalName());\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(\"jdbc:calcitesolr:\", properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0104212f65198f40658f73c83200eaa99553ea09","date":1462026700,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","sourceNew":"    public void open() throws IOException {\n      try {\n        Class.forName(driverClass);\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(url, properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":"    public void open() throws IOException {\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      try {\n        Class.forName(CalciteSolrDriver.class.getCanonicalName());\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(\"jdbc:calcitesolr:\", properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98","date":1478186540,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#open().mjava","sourceNew":null,"sourceOld":"    public void open() throws IOException {\n      try {\n        Class.forName(driverClass);\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n\n      try {\n        connection = DriverManager.getConnection(url, properties);\n        statement = connection.createStatement();\n        resultSet = statement.executeQuery(sql);\n        resultSetMetaData = this.resultSet.getMetaData();\n        numColumns = resultSetMetaData.getColumnCount();\n      } catch (SQLException e) {\n        this.close();\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34960db40f081388a12ae7131547fb03236705fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0bdf1c5226b61e889a240ce1c1343547e5b07b":["34960db40f081388a12ae7131547fb03236705fd"],"0104212f65198f40658f73c83200eaa99553ea09":["9f0bdf1c5226b61e889a240ce1c1343547e5b07b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":["0104212f65198f40658f73c83200eaa99553ea09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"34960db40f081388a12ae7131547fb03236705fd":["9f0bdf1c5226b61e889a240ce1c1343547e5b07b"],"9f0bdf1c5226b61e889a240ce1c1343547e5b07b":["0104212f65198f40658f73c83200eaa99553ea09"],"0104212f65198f40658f73c83200eaa99553ea09":["b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960db40f081388a12ae7131547fb03236705fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}