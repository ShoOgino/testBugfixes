{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeSafely(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeSafely(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4","date":1323361974,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(dirStart);\n      writeIndexTrailer(indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["24230fe54121f9be9d85f2c2067536296785e421"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["25433c5cacacb7a2055d62d4d36b0daf210e0a10","664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4"],"efc85580874d26ca9617f9ad61628d56f6859762":["25433c5cacacb7a2055d62d4d36b0daf210e0a10","664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["24230fe54121f9be9d85f2c2067536296785e421"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4","efc85580874d26ca9617f9ad61628d56f6859762"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"664f6ce8a543ae6c2bab3ac014c6f8469c39c0d4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a0ae5e3ed1232483b7b8a014f175a5fe43595982","efc85580874d26ca9617f9ad61628d56f6859762"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efc85580874d26ca9617f9ad61628d56f6859762":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","efc85580874d26ca9617f9ad61628d56f6859762","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}