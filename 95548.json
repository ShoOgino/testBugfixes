{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#request(SolrRequest,String).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      request.setBasePath(basePath);\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n    req.setBasePath(basePath);\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd332226a93e244bd33f35c03128eb09cbf3c88","date":1570651010,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#request(SolrRequest,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      request.setBasePath(basePath);\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n    req.setBasePath(basePath);\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#request(SolrRequest,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      request.setBasePath(basePath);\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n    req.setBasePath(basePath);\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","2fd332226a93e244bd33f35c03128eb09cbf3c88"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["2fd332226a93e244bd33f35c03128eb09cbf3c88","b0b597c65628ca9e73913a07e81691f8229bae35"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}