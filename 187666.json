{"path":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":null,"sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}