{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = (IndexInput) input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = (IndexInput) input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = (IndexInput) input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = (IndexInput) input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      boolean success = false;\n      IndexInput in = input.clone();\n      try {\n        Source source = null;\n        switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          source = read(in, new ValueReader(type, docCount, comp));\n          break;\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case VAR_INTS:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n        case FLOAT_32:\n        case FLOAT_64:\n          source = read(in, new ValueReader(type, docCount, null));\n          break;\n        default:\n          throw new IllegalArgumentException(\"unknown type: \" + type);\n        }\n        assert source != null;\n        success = true;\n        return source;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        } else {\n          IOUtils.close(in);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["de5bbadeb3abac0f650298bff584bd4317bd75aa","7460755aa94143153400f49c8ac2746f5d092e1a"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7460755aa94143153400f49c8ac2746f5d092e1a":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["001b25b42373b22a52f399dbf072f1224632e8e6","38e3b736c7ca086d61b7dbb841c905ee115490da","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}