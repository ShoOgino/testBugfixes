{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      StoredDocument doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final StoredDocument doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                StoredDocument document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withScore(),\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withTotalHits() ? Integer.MAX_VALUE : 1);\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withTotalHits());\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiBits.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withTotalHits() ? Integer.MAX_VALUE : 1);\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher(); // (will incRef the reader)\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   withTotalHits() ? Integer.MAX_VALUE : 1);\n            searcher.search(q, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, collector);\n          //hits = collector.topDocs();\n        }\n\n        if (hits != null) {\n          final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n          if (printHitsField != null && printHitsField.length() > 0) {\n            System.out.println(\"totalHits = \" + hits.totalHits);\n            System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n            System.out.println(\"numDocs() = \" + reader.numDocs());\n            for(int i=0;i<hits.scoreDocs.length;i++) {\n              final int docID = hits.scoreDocs[i].doc;\n              final Document doc = reader.document(docID);\n              System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n            }\n          }\n\n          res += withTopDocs(searcher, q, hits);\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"404d1ab7f6f396235047017c88d545fec15dafb7":["141e140cd2260284f58cb5cf2b17da4027e82094"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","141e140cd2260284f58cb5cf2b17da4027e82094"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["141e140cd2260284f58cb5cf2b17da4027e82094","404d1ab7f6f396235047017c88d545fec15dafb7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["1d028314cced5858683a1bb4741423d0f934257b"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"141e140cd2260284f58cb5cf2b17da4027e82094":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"141e140cd2260284f58cb5cf2b17da4027e82094":["404d1ab7f6f396235047017c88d545fec15dafb7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1aad05eeff7818b0833c02ac6b743aa72054963b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","141e140cd2260284f58cb5cf2b17da4027e82094"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}