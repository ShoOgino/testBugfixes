{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.storeTermVectors());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.storeTermVectorOffsets() && luf.storeTermVectorPositions());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Fieldable luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.storeTermVectors());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.storeTermVectorOffsets() && luf.storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    StorableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\");\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\");\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\");\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\");\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\");\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\");\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectorFields() {\n    \n    IndexSchema ischema = IndexSchemaFactory.buildIndexSchema(getSchemaFile(), solrConfig);\n    SchemaField f; // Solr field type\n    IndexableField luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.fieldType().storeTermVectors());\n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions());\n\n    f = ischema.getField(\"test_posoffpaytv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets() && f.storeTermPayloads());\n    assertTrue(luf.fieldType().storeTermVectorOffsets() && luf.fieldType().storeTermVectorPositions() && luf.fieldType().storeTermVectorPayloads());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"1d028314cced5858683a1bb4741423d0f934257b":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5","409324b31a1419d7c05a38211168cf317e39be77"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["1d028314cced5858683a1bb4741423d0f934257b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1d028314cced5858683a1bb4741423d0f934257b":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}