{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":["1c2689487624ee0efdf9d3ed6b3a224200be7dac"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f9ef0d2dc62408768986e9157e0d12582bfeb25","date":1349806977,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":["b5c52ce02dcffaf732180b33fef1231978edae9a","1c2689487624ee0efdf9d3ed6b3a224200be7dac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a362c108de6c504ba799764957b1ec3a129b39c","date":1351251999,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    if (iwc.getCodec() instanceof CompressingCodec) {\n      CompressingStoredFieldsFormat fmt = (CompressingStoredFieldsFormat) ((CompressingCodec) iwc.getCodec()).storedFieldsFormat();\n      // NOTE: copied from CompressingCodec.randomInstance(), but fixed to not\n      // use any memory index ... maybe we can instead add\n      // something like CompressingMemory to the\n      // SuppressCodecs list...?:\n      final CompressionMode mode = RandomPicks.randomFrom(random(), CompressionMode.values());\n      final int chunkSize = RandomInts.randomIntBetween(random(), 1, 500);\n      iwc.setCodec(new CompressingCodec(mode, chunkSize, CompressingStoredFieldsIndex.DISK_DOC));\n    }\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    if (iwc.getCodec() instanceof CompressingCodec) {\n      CompressingStoredFieldsFormat fmt = (CompressingStoredFieldsFormat) ((CompressingCodec) iwc.getCodec()).storedFieldsFormat();\n      // NOTE: copied from CompressingCodec.randomInstance(), but fixed to not\n      // use any memory index ... maybe we can instead add\n      // something like CompressingMemory to the\n      // SuppressCodecs list...?:\n      final CompressionMode mode = RandomPicks.randomFrom(random(), CompressionMode.values());\n      final int chunkSize = RandomInts.randomIntBetween(random(), 1, 500);\n      iwc.setCodec(new CompressingCodec(mode, chunkSize, CompressingStoredFieldsIndex.DISK_DOC));\n    }\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    if (iwc.getCodec() instanceof CompressingCodec) {\n      CompressingStoredFieldsFormat fmt = (CompressingStoredFieldsFormat) ((CompressingCodec) iwc.getCodec()).storedFieldsFormat();\n      // NOTE: copied from CompressingCodec.randomInstance(), but fixed to not\n      // use any memory index ... maybe we can instead add\n      // something like CompressingMemory to the\n      // SuppressCodecs list...?:\n      final CompressionMode mode = RandomPicks.randomFrom(random(), CompressionMode.values());\n      final int chunkSize = RandomInts.randomIntBetween(random(), 1, 500);\n      iwc.setCodec(new CompressingCodec(mode, chunkSize, CompressingStoredFieldsIndex.DISK_DOC));\n    }\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPostings\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f9ef0d2dc62408768986e9157e0d12582bfeb25":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6a362c108de6c504ba799764957b1ec3a129b39c":["4f9ef0d2dc62408768986e9157e0d12582bfeb25"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["6a362c108de6c504ba799764957b1ec3a129b39c"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4f9ef0d2dc62408768986e9157e0d12582bfeb25","6a362c108de6c504ba799764957b1ec3a129b39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb2842e561df4e8e9ad89010605fc86ac265465"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4f9ef0d2dc62408768986e9157e0d12582bfeb25":["6a362c108de6c504ba799764957b1ec3a129b39c","f2126b84bd093fa3d921582a109a0ee578c28126"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"6a362c108de6c504ba799764957b1ec3a129b39c":["0a96cceee825e15cd8e042b683d404086e2a58d1","f2126b84bd093fa3d921582a109a0ee578c28126"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["4f9ef0d2dc62408768986e9157e0d12582bfeb25","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}