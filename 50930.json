{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","commits":[{"id":"12ce9a95ee9b66c59103cc6016c0758c792d1b78","date":1359122086,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a","date":1378311096,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n    Objects.checkFromIndexSize(off, len, bytes.length);\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(bytes, base, len);\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          ref = ht.get(off);\n          if (ref != -1) {\n            assert ref >= base && ref < off;\n            assert readInt(bytes, ref) == readInt(bytes, off);\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        // try to find a better match\n        for (int r = ht.previous(ref), min = Math.max(off - MAX_DISTANCE + 1, base); r >= min; r = ht.previous(r)) {\n          assert readInt(bytes, r) == readInt(bytes, off);\n          int rMatchLen = MIN_MATCH + commonBytes(bytes, r + MIN_MATCH, off + MIN_MATCH, limit);\n          if (rMatchLen > matchLen) {\n            ref = r;\n            matchLen = rMatchLen;\n          }\n        }\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ce9a95ee9b66c59103cc6016c0758c792d1b78","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}