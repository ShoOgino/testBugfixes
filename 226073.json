{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","commits":[{"id":"e81698e1493f01874d99b769bc4d9fc9f07555d6","date":1453489635,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=*:*, fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a8e025574cd499fd0cc9e303c80c10c4229ca07","date":1457728551,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=*:*, fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=*:*, fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  private void testDaemonStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(collection1, q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    indexr(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\");\n    commit();\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTION + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    daemonStream.setStreamContext(streamContext);\n    try {\n      //Test Long and Double Sums\n\n      daemonStream.open(); // This will start the daemon thread\n\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 17.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n\n      //Now lets wait until the internal queue fills up\n\n      while (daemonStream.remainingCapacity() > 0) {\n        try {\n          Thread.sleep(1000);\n        } catch (Exception e) {\n\n        }\n      }\n\n      //OK capacity is full, let's index a new doc\n\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n      //have the tuples with the updated count.\n      for (int i = 0; i < 12; i++) {\n        daemonStream.read();\n      }\n\n      //And rerun the loop. It should have a new count for hello0\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 18.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n    } finally {\n      daemonStream.close(); //This should stop the daemon thread\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    daemonStream.setStreamContext(streamContext);\n    try {\n      //Test Long and Double Sums\n\n      daemonStream.open(); // This will start the daemon thread\n\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 17.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n\n      //Now lets wait until the internal queue fills up\n\n      while (daemonStream.remainingCapacity() > 0) {\n        try {\n          Thread.sleep(1000);\n        } catch (Exception e) {\n\n        }\n      }\n\n      //OK capacity is full, let's index a new doc\n\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n      //have the tuples with the updated count.\n      for (int i = 0; i < 12; i++) {\n        daemonStream.read();\n      }\n\n      //And rerun the loop. It should have a new count for hello0\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 18.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n    } finally {\n      daemonStream.close(); //This should stop the daemon thread\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n\n\n    //Test Long and Double Sums\n\n    daemonStream.open(); // This will start the daemon thread\n\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    //Now lets wait until the internal queue fills up\n\n    while(daemonStream.remainingCapacity() > 0) {\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n\n      }\n    }\n\n    //OK capacity is full, let's index a new doc\n\n    new UpdateRequest()\n        .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n    //have the tuples with the updated count.\n    for(int i=0; i<12;i++) {\n      daemonStream.read();\n    }\n\n    //And rerun the loop. It should have a new count for hello0\n    for(int i=0; i<4; i++) {\n      Tuple tuple = daemonStream.read(); // Reads from the queue\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 1:\"+bucket);\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 18.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n\n      //System.out.println(\"#################################### Bucket 2:\"+bucket);\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n\n      tuple = daemonStream.read();\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      //System.out.println(\"#################################### Bucket 3:\"+bucket);\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n    }\n\n    daemonStream.close(); //This should stop the daemon thread\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    daemonStream.setStreamContext(streamContext);\n    try {\n      //Test Long and Double Sums\n\n      daemonStream.open(); // This will start the daemon thread\n\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 17.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n\n      //Now lets wait until the internal queue fills up\n\n      while (daemonStream.remainingCapacity() > 0) {\n        try {\n          Thread.sleep(1000);\n        } catch (Exception e) {\n\n        }\n      }\n\n      //OK capacity is full, let's index a new doc\n\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n      //have the tuples with the updated count.\n      for (int i = 0; i < 12; i++) {\n        daemonStream.read();\n      }\n\n      //And rerun the loop. It should have a new count for hello0\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 18.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n    } finally {\n      daemonStream.close(); //This should stop the daemon thread\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    DaemonStream daemonStream;\n\n    expression = StreamExpressionParser.parse(\"daemon(rollup(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", fl=\\\"a_i,a_s\\\", sort=\\\"a_s asc\\\"),\"\n        + \"over=\\\"a_s\\\",\"\n        + \"sum(a_i)\"\n        + \"), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n    daemonStream = (DaemonStream)factory.constructStream(expression);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    daemonStream.setStreamContext(streamContext);\n    try {\n      //Test Long and Double Sums\n\n      daemonStream.open(); // This will start the daemon thread\n\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 17.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n\n      //Now lets wait until the internal queue fills up\n\n      while (daemonStream.remainingCapacity() > 0) {\n        try {\n          Thread.sleep(1000);\n        } catch (Exception e) {\n\n        }\n      }\n\n      //OK capacity is full, let's index a new doc\n\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      //Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should\n      //have the tuples with the updated count.\n      for (int i = 0; i < 12; i++) {\n        daemonStream.read();\n      }\n\n      //And rerun the loop. It should have a new count for hello0\n      for (int i = 0; i < 4; i++) {\n        Tuple tuple = daemonStream.read(); // Reads from the queue\n        String bucket = tuple.getString(\"a_s\");\n        Double sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 1:\"+bucket);\n        assertTrue(bucket.equals(\"hello0\"));\n        assertTrue(sumi.doubleValue() == 18.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n\n        //System.out.println(\"#################################### Bucket 2:\"+bucket);\n        assertTrue(bucket.equals(\"hello3\"));\n        assertTrue(sumi.doubleValue() == 38.0D);\n\n        tuple = daemonStream.read();\n        bucket = tuple.getString(\"a_s\");\n        sumi = tuple.getDouble(\"sum(a_i)\");\n        //System.out.println(\"#################################### Bucket 3:\"+bucket);\n        assertTrue(bucket.equals(\"hello4\"));\n        assertTrue(sumi.longValue() == 15);\n      }\n    } finally {\n      daemonStream.close(); //This should stop the daemon thread\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["575856a9f007b9c35d0113c9e18151b554709ef2","b940572a59da1b42b6c20ab5278155b12816807a"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"575856a9f007b9c35d0113c9e18151b554709ef2":["e81698e1493f01874d99b769bc4d9fc9f07555d6","9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"9a8e025574cd499fd0cc9e303c80c10c4229ca07":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"b940572a59da1b42b6c20ab5278155b12816807a":["575856a9f007b9c35d0113c9e18151b554709ef2"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["575856a9f007b9c35d0113c9e18151b554709ef2","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["575856a9f007b9c35d0113c9e18151b554709ef2","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["575856a9f007b9c35d0113c9e18151b554709ef2","9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"575856a9f007b9c35d0113c9e18151b554709ef2":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"9a8e025574cd499fd0cc9e303c80c10c4229ca07":["575856a9f007b9c35d0113c9e18151b554709ef2"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}