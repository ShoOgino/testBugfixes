{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","commits":[{"id":"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679","date":1313702036,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could asert something useful here\n    }\n\n    // check specificly for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could asert something useful here\n    }\n\n    // check specificly for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could asert something useful here\n    }\n\n    // check specificly for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could asert something useful here\n    }\n\n    // check specificly for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90164923c8d1612badfdbea3fadc987a4e5bc7e6","date":1373121947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11e240178b07b6260f1636adc63925cd29a0f86e","date":1373488081,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n    \n    assertXmlFile\n      (xml\n       ,\"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']\"\n       ,\"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']\"\n       );\n\n    // attempt to create a bogus core and confirm failure\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(dataDir, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(initCoreDataDir, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(initCoreDataDir, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679","bb1f22cfa77230b5f05b7784feae5367f6bbb488","90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = new File(dataDir, this.getClass().getName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n    // cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    String instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDirFile, instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb65cc25534f4e0d77ed573d35995eb0b836b818","date":1454441028,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (IllegalArgumentException iae) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", iae.getMessage().contains(\"Invalid core name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (IllegalArgumentException iae) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", iae.getMessage().contains(\"Invalid core name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (IllegalArgumentException iae) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", iae.getMessage().contains(\"Invalid core name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n    \n    // create a new core (using CoreAdminHandler) w/ properties\n    \n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n               \n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5469e1b49cf7f51c02519aff49b848ff8bbbc663","date":1454885560,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (IllegalArgumentException iae) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", iae.getMessage().contains(\"Invalid core name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":["fb65cc25534f4e0d77ed573d35995eb0b836b818"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid core\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid core\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid name\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid name\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid core\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid core\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              resp);\n\n    } catch (SolrException se) {\n      assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n    }\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    try {\n      resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, \n             CoreAdminParams.CoreAdminAction.CREATE.toString(),\n             CoreAdminParams.NAME, \"bogus_dir_core\",\n             CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n         resp);\n      fail(\"bogus collection created ok\");\n    } catch (SolrException e) {\n      // :NOOP:\n      // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n    }\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    try {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              resp);\n    } catch (SolrException e) { // why the heck does create return a SolrException (admittedly wrapping an IAE)\n      assertTrue(\"Expected error message for bad core name.\", e.getMessage().contains(\"Invalid core\"));\n    }\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27e594a0c4bfe5e235e9de38c78944c254b6e17c","date":1576249297,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    Map<String,Exception> failures = \n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList<Object> status = \n      (NamedList<Object>)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n    admin.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n    admin.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n    admin.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCoreAdminHandler().mjava","sourceNew":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.getAllowPaths().add(workDir.toPath());\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n    admin.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreAdminHandler() throws Exception {\n    final File workDir = createTempDir().toFile();\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    Path instDir;\n    try (SolrCore template = cores.getCore(\"collection1\")) {\n      assertNotNull(template);\n      instDir = template.getCoreDescriptor().getInstanceDir();\n    }\n\n    assertTrue(\"instDir doesn't exist: \" + instDir, Files.exists(instDir));\n    final File instPropFile = new File(workDir, \"instProp\");\n    FileUtils.copyDirectory(instDir.toFile(), instPropFile);\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    // Sneaking in a test for using a bad core name\n    SolrException se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n              CoreAdminParams.NAME, \"ugly$core=name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.toString().contains(\"Invalid core\"));\n\n    CoreDescriptor cd = cores.getCoreDescriptor(\"ugly$core=name\");\n    assertNull(\"Should NOT have added this core!\", cd);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION,\n           CoreAdminParams.CoreAdminAction.CREATE.toString(),\n           CoreAdminParams.INSTANCE_DIR, instPropFile.getAbsolutePath(),\n           CoreAdminParams.NAME, \"props\",\n           CoreAdminParams.PROPERTY_PREFIX + \"hoss\",\"man\",\n           CoreAdminParams.PROPERTY_PREFIX + \"foo\",\"baz\"),\n       resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core not added!\", cd);\n    assertEquals(cd.getCoreProperty(\"hoss\", null), \"man\");\n    assertEquals(cd.getCoreProperty(\"foo\", null), \"baz\");\n\n    // attempt to create a bogus core and confirm failure\n    ignoreException(\"Could not load config\");\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.NAME, \"bogus_dir_core\",\n              CoreAdminParams.INSTANCE_DIR, \"dir_does_not_exist_127896\"),\n              new SolrQueryResponse());\n    });\n    // :NOOP:\n    // :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here\n\n    unIgnoreException(\"Could not load config\");\n\n    // check specifically for status of the failed core name\n    resp = new SolrQueryResponse();\n    admin.handleRequestBody\n      (req(CoreAdminParams.ACTION, \n           CoreAdminParams.CoreAdminAction.STATUS.toString(),\n           CoreAdminParams.CORE, \"bogus_dir_core\"),\n         resp);\n    @SuppressWarnings(\"unchecked\")\n    Map<String,Exception> failures =\n      (Map<String,Exception>) resp.getValues().get(\"initFailures\");\n    assertNotNull(\"core failures is null\", failures);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = (NamedList)resp.getValues().get(\"status\");\n    assertNotNull(\"core status is null\", status);\n\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Exception fail = failures.get(\"bogus_dir_core\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"dir_does_not_exist\"));\n\n    assertEquals(\"bogus_dir_core status isn't empty\",\n                 0, ((NamedList)status.get(\"bogus_dir_core\")).size());\n\n\n    //Try renaming the core, we should fail\n    // First assert that the props core exists\n    cd = cores.getCoreDescriptor(\"props\");\n    assertNotNull(\"Core disappeared!\", cd);\n\n    // now rename it something else just for kicks since we don't actually test this that I could find.\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.RENAME.toString(),\n            CoreAdminParams.CORE, \"props\",\n            CoreAdminParams.OTHER, \"rename_me\"),\n            resp);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // Rename it something bogus and see if you get an exception, the old core is still there and the bogus one isn't\n    se = expectThrows(SolrException.class, () -> {\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RENAME.toString(),\n              CoreAdminParams.CORE, \"rename_me\",\n              CoreAdminParams.OTHER, \"bad$name\"),\n              new SolrQueryResponse());\n    });\n    assertTrue(\"Expected error message for bad core name.\", se.getMessage().contains(\"Invalid core\"));\n\n    cd = cores.getCoreDescriptor(\"bad$name\");\n    assertNull(\"Core should NOT exist!\", cd);\n\n    cd = cores.getCoreDescriptor(\"rename_me\");\n    assertNotNull(\"Core should have been renamed!\", cd);\n\n    // :TODO: because of SOLR-3665 we can't ask for status from all cores\n    admin.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"acd1f5a977dc3b97799ed300423294e2c457774f":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba055e19afc289adcb5bedaf68513793a7254012"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["f4abec28b874149a7223e32cc7a01704c27790de"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679","044244fb346dc6965d217fce709880d0e3bc2e9f"],"ba055e19afc289adcb5bedaf68513793a7254012":["27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["11e240178b07b6260f1636adc63925cd29a0f86e"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["06043fcf612d2cd93636c22cd062e0641406b417","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["fb65cc25534f4e0d77ed573d35995eb0b836b818"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["06043fcf612d2cd93636c22cd062e0641406b417","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["e98520789adb1d5ad05afb4956eca0944a929688"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679","044244fb346dc6965d217fce709880d0e3bc2e9f"],"11e240178b07b6260f1636adc63925cd29a0f86e":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["d1a307447328c95a00248512b40d7a5ff12ecd6a","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["06043fcf612d2cd93636c22cd062e0641406b417"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"06043fcf612d2cd93636c22cd062e0641406b417":["5469e1b49cf7f51c02519aff49b848ff8bbbc663","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"acd1f5a977dc3b97799ed300423294e2c457774f":[],"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679":["aba371508186796cc6151d8223a5b4e16d02e26e","044244fb346dc6965d217fce709880d0e3bc2e9f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"e98520789adb1d5ad05afb4956eca0944a929688":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba055e19afc289adcb5bedaf68513793a7254012":["e98520789adb1d5ad05afb4956eca0944a929688"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e332392bbbdd01cb69ad6a89051f483cda38e15e"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["37a0f60745e53927c4c876cfe5b5a58170f0646c","90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["acd1f5a977dc3b97799ed300423294e2c457774f","5469e1b49cf7f51c02519aff49b848ff8bbbc663","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"f4abec28b874149a7223e32cc7a01704c27790de":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"044244fb346dc6965d217fce709880d0e3bc2e9f":["aba371508186796cc6151d8223a5b4e16d02e26e","b374d78db8148ec6796fdf37148b33897ab40a8c","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"11e240178b07b6260f1636adc63925cd29a0f86e":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["ba055e19afc289adcb5bedaf68513793a7254012","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","06595b0c22c7d3075c4104d3820cccf95d9d8a43","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["11e240178b07b6260f1636adc63925cd29a0f86e"],"06043fcf612d2cd93636c22cd062e0641406b417":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","acd1f5a977dc3b97799ed300423294e2c457774f","aba371508186796cc6151d8223a5b4e16d02e26e","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","1e6acbaae7af722f17204ceccf0f7db5753eccf3","f8061ddd97f3352007d927dae445884a6f3d857b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}