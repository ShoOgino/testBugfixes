{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n\n                switch (alt1) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n            \t    {\n            \t    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        \t// do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n\n                switch (alt1) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n\n\n                    }\n                    break;\n\n                default :\n                    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","sourceOld":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n\n                switch (alt1) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n            \t    {\n            \t    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        \t// do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            while (true) {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n                switch (alt1) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n                    }\n                    break;\n\n                default :\n                    break loop1;\n                }\n            }\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","sourceOld":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n\n                switch (alt1) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n\n\n                    }\n                    break;\n\n                default :\n                    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      int _type = ID;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop1:\n      while (true) {\n        int alt1=2;\n        int LA1_0 = input.LA(1);\n        if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n          alt1=1;\n        }\n\n        switch (alt1) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop1;\n        }\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":"    // $ANTLR start \"ID\"\n    public final void mID() throws RecognitionException {\n        try {\n            int _type = ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            {\n            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;\n            }\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n            loop1:\n            while (true) {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n                    alt1=1;\n                }\n\n                switch (alt1) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n                    }\n                    break;\n\n                default :\n                    break loop1;\n                }\n            }\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      int _type = ID;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop1:\n      while (true) {\n        int alt1=2;\n        int LA1_0 = input.LA(1);\n        if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n          alt1=1;\n        }\n\n        switch (alt1) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop1;\n        }\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( ((LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      int _type = ID;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop1:\n      while (true) {\n        int alt1=2;\n        int LA1_0 = input.LA(1);\n        if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {\n          alt1=1;\n        }\n\n        switch (alt1) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop1;\n        }\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2284ec7b7c73174ca051dd51acdba799c2b5860c","date":1402649660,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      {\n      if ( input.LA(1)=='$'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( (LA2_0=='$'||(LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( input.LA(1)=='$'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( ((LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      {\n      if ( input.LA(1)=='$'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( (LA2_0=='$'||(LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( input.LA(1)=='$'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      {\n      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( ((LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      {\n      if ( input.LA(1)=='$'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      loop4:\n      while (true) {\n        int alt4=2;\n        int LA4_0 = input.LA(1);\n        if ( (LA4_0=='$'||(LA4_0 >= '0' && LA4_0 <= '9')||(LA4_0 >= 'A' && LA4_0 <= 'Z')||LA4_0=='_'||(LA4_0 >= 'a' && LA4_0 <= 'z')) ) {\n          alt4=1;\n        }\n\n        switch (alt4) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( input.LA(1)=='$'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop4;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","sourceOld":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      {\n      if ( input.LA(1)=='$'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:340:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      loop2:\n      while (true) {\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n        if ( (LA2_0=='$'||(LA2_0 >= '0' && LA2_0 <= '9')||(LA2_0 >= 'A' && LA2_0 <= 'Z')||LA2_0=='_'||(LA2_0 >= 'a' && LA2_0 <= 'z')) ) {\n          alt2=1;\n        }\n\n        switch (alt2) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( input.LA(1)=='$'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop2;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mID().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"ID\"\n  public final void mID() throws RecognitionException {\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      {\n      if ( input.LA(1)=='$'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n        input.consume();\n      }\n      else {\n        MismatchedSetException mse = new MismatchedSetException(null,input);\n        recover(mse);\n        throw mse;\n      }\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:351:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' )*\n      loop4:\n      while (true) {\n        int alt4=2;\n        int LA4_0 = input.LA(1);\n        if ( (LA4_0=='$'||(LA4_0 >= '0' && LA4_0 <= '9')||(LA4_0 >= 'A' && LA4_0 <= 'Z')||LA4_0=='_'||(LA4_0 >= 'a' && LA4_0 <= 'z')) ) {\n          alt4=1;\n        }\n\n        switch (alt4) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( input.LA(1)=='$'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          break loop4;\n        }\n      }\n\n      }\n\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"ID\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["2284ec7b7c73174ca051dd51acdba799c2b5860c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8d639dc27b5b3eae561ef321b06f3cad9280c529","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}