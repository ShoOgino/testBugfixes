{"path":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cedee4c69436d5334e8f35463bf232084ff2fa3","date":1304587337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.INT)), useDocValues(new SortField(\"float\", SortField.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2e8d7ba2175f47e280231533f7d3016249cea88b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["3e492fb0f2bb0b4b47208286f9331ff55963c656","0cedee4c69436d5334e8f35463bf232084ff2fa3"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["0cedee4c69436d5334e8f35463bf232084ff2fa3"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}