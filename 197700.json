{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n\n      output.writeString(fi.name);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.indexValues == null) {\n        b = 0;\n      } else {\n        switch(fi.indexValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.indexValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n\n      output.writeString(fi.name);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n\n      output.writeString(fi.name);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.indexValues == null) {\n        b = 0;\n      } else {\n        switch(fi.indexValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.indexValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n\n      output.writeString(fi.name);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case PACKED_INTS_FIXED:\n          b = 10;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case PACKED_INTS:\n          b = 1;\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          b = 2;\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.codecId);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 6;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 7;\n          break;\n        case FIXED_INTS_16:\n          b = 8;\n          break;\n        case FIXED_INTS_32:\n          b = 9;\n          break;\n        case FIXED_INTS_64:\n          b = 10;\n          break;\n        case FIXED_INTS_8:\n          b = 11;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 12;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 13;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 6;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 7;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 8;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 9;\n          break;\n        case FIXED_INTS_16:\n          b = 10;\n          break;\n        case FIXED_INTS_32:\n          b = 11;\n          break;\n        case FIXED_INTS_64:\n          b = 12;\n          break;\n        case FIXED_INTS_8:\n          b = 13;\n          break;\n       \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 6;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 7;\n          break;\n        case FIXED_INTS_16:\n          b = 8;\n          break;\n        case FIXED_INTS_32:\n          b = 9;\n          break;\n        case FIXED_INTS_64:\n          b = 10;\n          break;\n        case FIXED_INTS_8:\n          b = 11;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 12;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 13;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeInt(fi.getCodecId());\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 6;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 7;\n          break;\n        case FIXED_INTS_16:\n          b = 8;\n          break;\n        case FIXED_INTS_32:\n          b = 9;\n          break;\n        case FIXED_INTS_64:\n          b = 10;\n          break;\n        case FIXED_INTS_8:\n          b = 11;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 12;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 13;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":null,"sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(FORMAT_CURRENT);\n    output.writeVInt(size());\n    for (FieldInfo fi : this) {\n      assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n        bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n        bits |= OMIT_POSITIONS;\n      output.writeString(fi.name);\n      output.writeInt(fi.number);\n      output.writeByte(bits);\n\n      final byte b;\n\n      if (fi.docValues == null) {\n        b = 0;\n      } else {\n        switch(fi.docValues) {\n        case VAR_INTS:\n          b = 1;\n          break;\n        case FLOAT_32:\n          b = 2;\n          break;\n        case FLOAT_64:\n          b = 3;\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          b = 4;\n          break;\n        case BYTES_FIXED_DEREF:\n          b = 5;\n          break;\n        case BYTES_VAR_STRAIGHT:\n          b = 6;\n          break;\n        case BYTES_VAR_DEREF:\n          b = 7;\n          break;\n        case FIXED_INTS_16:\n          b = 8;\n          break;\n        case FIXED_INTS_32:\n          b = 9;\n          break;\n        case FIXED_INTS_64:\n          b = 10;\n          break;\n        case FIXED_INTS_8:\n          b = 11;\n          break;\n        case BYTES_FIXED_SORTED:\n          b = 12;\n          break;\n        case BYTES_VAR_SORTED:\n          b = 13;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + fi.docValues);\n        }\n      }\n      output.writeByte(b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"e19ec8535092055101db3ede419e136b73d235ac":["1224a4027481acce15495b03bce9b48b93b42722"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["e19ec8535092055101db3ede419e136b73d235ac","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","2e8d7ba2175f47e280231533f7d3016249cea88b"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"85a883878c0af761245ab048babc63d099f835f3":["39f3757037aa8f710c0cbf9a76a332de735f58b0","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","e19ec8535092055101db3ede419e136b73d235ac"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"7b91922b55d15444d554721b352861d028eb8278":["e128967bca58657bc0039d4bfe631e63e81f1977"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["85a883878c0af761245ab048babc63d099f835f3"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"1eb46686a27187e42311e77666a2c7026f461ebc":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e19ec8535092055101db3ede419e136b73d235ac"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85130289d2ed101fcc2d8798511c7c5b020ffab4","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","e19ec8535092055101db3ede419e136b73d235ac"],"e128967bca58657bc0039d4bfe631e63e81f1977":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","85a883878c0af761245ab048babc63d099f835f3","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"e19ec8535092055101db3ede419e136b73d235ac":["2e8d7ba2175f47e280231533f7d3016249cea88b","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1eb46686a27187e42311e77666a2c7026f461ebc"],"1224a4027481acce15495b03bce9b48b93b42722":["e19ec8535092055101db3ede419e136b73d235ac","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["85a883878c0af761245ab048babc63d099f835f3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"85a883878c0af761245ab048babc63d099f835f3":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","01f60198ece724a6e96cd0b45f289cf42ff83d4f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"e128967bca58657bc0039d4bfe631e63e81f1977":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1eb46686a27187e42311e77666a2c7026f461ebc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}