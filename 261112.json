{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","sourceNew":null,"sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"]},"commit2Childs":{"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}