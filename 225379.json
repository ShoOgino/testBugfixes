{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","commits":[{"id":"12ce9a95ee9b66c59103cc6016c0758c792d1b78","date":1359122086,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#addHash(byte[],int).mjava","sourceNew":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off - base;\n    }\n\n","sourceOld":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off - base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#addHash(byte[],int).mjava","sourceNew":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off - base;\n    }\n\n","sourceOld":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off - base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a","date":1378311096,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","sourceNew":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off;\n    }\n\n","sourceOld":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off - base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"175e4d353e3036fad2ad89ae6815c4418b4c3c8e","date":1378375735,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","sourceNew":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      assert delta > 0 : delta;\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off;\n    }\n\n","sourceOld":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#addHash(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#addHash(byte[],int).mjava","sourceNew":"    private void addHash(int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      if (delta <= 0 || delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off;\n    }\n\n","sourceOld":"    private void addHash(byte[] bytes, int off) {\n      final int v = readInt(bytes, off);\n      final int h = hashHC(v);\n      int delta = off - hashTable[h];\n      assert delta > 0 : delta;\n      if (delta >= MAX_DISTANCE) {\n        delta = MAX_DISTANCE - 1;\n      }\n      chainTable[off & MASK] = (short) delta;\n      hashTable[h] = off;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["9407318969e8504257b4c5764c65755a043e5404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ce9a95ee9b66c59103cc6016c0758c792d1b78","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}