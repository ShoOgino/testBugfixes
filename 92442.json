{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","commits":[{"id":"a36e5fc6b39329bd08caaf6065552fe3535ae743","date":1011235762,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"/dev/null","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new NullAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b628ce685f2f9072cee4bab653e44e6e93376225","date":1011899032,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":"  public void testPunct() throws Exception {\n    Analyzer a = new NullAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"    public void testPunct() throws Exception {\n\tAnalyzer a = new WhitespaceAnalyzer();\n\tassertQueryEquals(\"a&b\", a, \"a&b\");\n\tassertQueryEquals(\"a&&b\", a, \"a&&b\");\n\tassertQueryEquals(\".NET\", a, \".NET\");\n    }\n\n","sourceOld":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":"    public void testPunct() throws Exception {\n\tAnalyzer a = new WhitespaceAnalyzer();\n\tassertQueryEquals(\"a&b\", a, \"a&b\");\n\tassertQueryEquals(\"a&&b\", a, \"a&&b\");\n\tassertQueryEquals(\".NET\", a, \".NET\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPunct().mjava","sourceNew":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","sourceOld":"  public void testPunct() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"a&b\", a, \"a&b\");\n    assertQueryEquals(\"a&&b\", a, \"a&&b\");\n    assertQueryEquals(\".NET\", a, \".NET\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"b628ce685f2f9072cee4bab653e44e6e93376225":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["b628ce685f2f9072cee4bab653e44e6e93376225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b628ce685f2f9072cee4bab653e44e6e93376225":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["b628ce685f2f9072cee4bab653e44e6e93376225"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}