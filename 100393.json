{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        res.put(\"ramBytesUsed\", ramBytesUsed());\n        res.put(\"maxRamMB\", maxRamBytes != Long.MAX_VALUE ? maxRamBytes / 1024L / 1024L : -1L);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","date":1565791119,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        res.put(\"ramBytesUsed\", ramBytesUsed());\n        res.put(\"maxRamMB\", maxRamBytes != Long.MAX_VALUE ? maxRamBytes / 1024L / 1024L : -1L);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetrics).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    solrMetrics = m.getChildInfo(this);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    solrMetrics.metricManager.registerGauge(this, solrMetrics.registry, cacheMap, solrMetrics.tag, true, solrMetrics.scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    solrMetrics = m.getChildInfo(this);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    String metricName = SolrMetricManager.makeName(ImmutableList.of(getCategory().toString()), solrMetrics.scope);\n    solrMetrics.gauge(this, cacheMap, true, metricName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    solrMetrics = m.getChildInfo(this);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    String metricName = SolrMetricManager.makeName(ImmutableList.of(getCategory().toString()), solrMetrics.scope);\n    solrMetrics.gauge(this, cacheMap, true, metricName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(MAX_IDLE_TIME_PARAM, maxIdleTimeNs != Long.MAX_VALUE ?\n            TimeUnit.SECONDS.convert(maxIdleTimeNs, TimeUnit.NANOSECONDS) : -1);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        res.put(\"evictionsIdleTime\", evictionsIdleTime);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      res.put(\"cumulative_evictionsIdleTime\", stats.evictionsIdleTime.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(MAX_IDLE_TIME_PARAM, maxIdleTimeNs != Long.MAX_VALUE ?\n            TimeUnit.SECONDS.convert(maxIdleTimeNs, TimeUnit.NANOSECONDS) : -1);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        res.put(\"evictionsIdleTime\", evictionsIdleTime);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      res.put(\"cumulative_evictionsIdleTime\", stats.evictionsIdleTime.longValue());\n    });\n    solrMetricsContext.gauge(this, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(LOOKUPS_PARAM, lookups);\n        res.put(HITS_PARAM, hits);\n        res.put(HIT_RATIO_PARAM, calcHitRatio(lookups,hits));\n        res.put(INSERTS_PARAM, inserts);\n        res.put(EVICTIONS_PARAM, evictions);\n        res.put(SIZE_PARAM, map.size());\n        res.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        res.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n        res.put(MAX_SIZE_PARAM, maxSize);\n        res.put(MAX_IDLE_TIME_PARAM, maxIdleTimeNs != Long.MAX_VALUE ?\n            TimeUnit.SECONDS.convert(maxIdleTimeNs, TimeUnit.NANOSECONDS) : -1);\n        res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        res.put(\"evictionsIdleTime\", evictionsIdleTime);\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      res.put(\"cumulative_evictionsIdleTime\", stats.evictionsIdleTime.longValue());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["52275555c0ae3b55430cef26ad7fca3f02440944"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"52275555c0ae3b55430cef26ad7fca3f02440944":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}