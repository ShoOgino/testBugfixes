{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#newStem(char[],int).mjava","commits":[{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#newStem(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  private CharsRef newStem(char buffer[], int length) {\n    if (dictionary.needsOutputCleaning) {\n      scratchSegment.setLength(0);\n      scratchSegment.append(buffer, 0, length);\n      try {\n        Dictionary.applyMappings(dictionary.oconv, scratchSegment);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      char cleaned[] = new char[scratchSegment.length()];\n      scratchSegment.getChars(0, cleaned.length, cleaned, 0);\n      return new CharsRef(cleaned, 0, cleaned.length);\n    } else {\n      return new CharsRef(buffer, 0, length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#newStem(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  private CharsRef newStem(char buffer[], int length) {\n    if (dictionary.needsOutputCleaning) {\n      scratchSegment.setLength(0);\n      scratchSegment.append(buffer, 0, length);\n      try {\n        Dictionary.applyMappings(dictionary.oconv, scratchSegment);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      char cleaned[] = new char[scratchSegment.length()];\n      scratchSegment.getChars(0, cleaned.length, cleaned, 0);\n      return new CharsRef(cleaned, 0, cleaned.length);\n    } else {\n      return new CharsRef(buffer, 0, length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5916de6e2f6deb9da923b2710f6451668e94a20c","date":1403356557,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#newStem(char[],int,IntsRef,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#newStem(char[],int).mjava","sourceNew":"  private CharsRef newStem(char buffer[], int length, IntsRef forms, int formID) {\n    final String exception;\n    if (dictionary.hasStemExceptions) {\n      int exceptionID = forms.ints[forms.offset + formID + 1];\n      if (exceptionID > 0) {\n        exception = dictionary.getStemException(exceptionID);\n      } else {\n        exception = null;\n      }\n    } else {\n      exception = null;\n    }\n    \n    if (dictionary.needsOutputCleaning) {\n      scratchSegment.setLength(0);\n      if (exception != null) {\n        scratchSegment.append(exception);\n      } else {\n        scratchSegment.append(buffer, 0, length);\n      }\n      try {\n        Dictionary.applyMappings(dictionary.oconv, scratchSegment);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      char cleaned[] = new char[scratchSegment.length()];\n      scratchSegment.getChars(0, cleaned.length, cleaned, 0);\n      return new CharsRef(cleaned, 0, cleaned.length);\n    } else {\n      if (exception != null) {\n        return new CharsRef(exception);\n      } else {\n        return new CharsRef(buffer, 0, length);\n      }\n    }\n  }\n\n","sourceOld":"  private CharsRef newStem(char buffer[], int length) {\n    if (dictionary.needsOutputCleaning) {\n      scratchSegment.setLength(0);\n      scratchSegment.append(buffer, 0, length);\n      try {\n        Dictionary.applyMappings(dictionary.oconv, scratchSegment);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      char cleaned[] = new char[scratchSegment.length()];\n      scratchSegment.getChars(0, cleaned.length, cleaned, 0);\n      return new CharsRef(cleaned, 0, cleaned.length);\n    } else {\n      return new CharsRef(buffer, 0, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae9942cbee38a49d234c2f022e3a265133d1914"],"5916de6e2f6deb9da923b2710f6451668e94a20c":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5916de6e2f6deb9da923b2710f6451668e94a20c"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5916de6e2f6deb9da923b2710f6451668e94a20c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5916de6e2f6deb9da923b2710f6451668e94a20c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}