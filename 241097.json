{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#processSubs(SimpleOrderedMap[Object],Query,DocSet).mjava","commits":[{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#processSubs(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucketSubs(SimpleOrderedMap[Object],FacetContext).mjava","sourceNew":"  protected void processSubs(SimpleOrderedMap<Object> response, Query filter, DocSet domain) throws IOException {\n\n    // TODO: what if a zero bucket has a sub-facet with an exclusion that would yield results?\n    // should we check for domain-altering exclusions, or even ask the sub-facet for\n    // it's domain and then only skip it if it's 0?\n\n    if (domain == null || domain.size() == 0 && !freq.processEmpty) {\n      return;\n    }\n\n    for (Map.Entry<String,FacetRequest> sub : freq.getSubFacets().entrySet()) {\n      // make a new context for each sub-facet since they can change the domain\n      FacetContext subContext = fcontext.sub(filter, domain);\n      FacetProcessor subProcessor = sub.getValue().createFacetProcessor(subContext);\n      subProcessor.process();\n      response.add( sub.getKey(), subProcessor.getResponse() );\n    }\n  }\n\n","sourceOld":"  protected void fillBucketSubs(SimpleOrderedMap<Object> response, FacetContext subContext) throws IOException {\n    for (Map.Entry<String,FacetRequest> sub : freq.getSubFacets().entrySet()) {\n      FacetProcessor subProcessor = sub.getValue().createFacetProcessor(subContext);\n      subProcessor.process();\n      response.add( sub.getKey(), subProcessor.getResponse() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#processSubs(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#processSubs(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  protected void processSubs(SimpleOrderedMap<Object> response, Query filter, DocSet domain) throws IOException {\n\n    // TODO: what if a zero bucket has a sub-facet with an exclusion that would yield results?\n    // should we check for domain-altering exclusions, or even ask the sub-facet for\n    // it's domain and then only skip it if it's 0?\n\n    if (domain == null || domain.size() == 0 && !freq.processEmpty) {\n      return;\n    }\n\n    for (Map.Entry<String,FacetRequest> sub : freq.getSubFacets().entrySet()) {\n      // make a new context for each sub-facet since they can change the domain\n      FacetContext subContext = fcontext.sub(filter, domain);\n      FacetProcessor subProcessor = sub.getValue().createFacetProcessor(subContext);\n      subProcessor.process();\n      response.add( sub.getKey(), subProcessor.getResponse() );\n    }\n  }\n\n","sourceOld":"  protected void processSubs(SimpleOrderedMap<Object> response, Query filter, DocSet domain) throws IOException {\n\n    // TODO: what if a zero bucket has a sub-facet with an exclusion that would yield results?\n    // should we check for domain-altering exclusions, or even ask the sub-facet for\n    // it's domain and then only skip it if it's 0?\n\n    if (domain == null || domain.size() == 0 && !freq.processEmpty) {\n      return;\n    }\n\n    for (Map.Entry<String,FacetRequest> sub : freq.getSubFacets().entrySet()) {\n      // make a new context for each sub-facet since they can change the domain\n      FacetContext subContext = fcontext.sub(filter, domain);\n      FacetProcessor subProcessor = sub.getValue().createFacetProcessor(subContext);\n      subProcessor.process();\n      response.add( sub.getKey(), subProcessor.getResponse() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["faf1236ae092482293a7e0659e347d172185ef6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"faf1236ae092482293a7e0659e347d172185ef6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"]},"commit2Childs":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["faf1236ae092482293a7e0659e347d172185ef6f"],"faf1236ae092482293a7e0659e347d172185ef6f":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}