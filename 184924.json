{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  void addFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n\n\n    synchronized(this) {\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(Context.FLUSH);\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName, context);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName, context);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(Context.FLUSH);\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName, context);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName, context);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName, context);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.deletedDocuments != null) {\n        final int delCount = flushedSegment.deletedDocuments.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.deletedDocuments.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName, context);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName, context);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = directory.createCompoundOutput(compoundFileName, context);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeSafely(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        message(\"creating compound file \" + compoundFileName);\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          message(\"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes(true)));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fd20ed668e3a00e9b27810fa855182276b3b58","date":1326994874,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          \n          SegmentInfo info = flushedSegment.segmentInfo;\n          Codec codec = info.getCodec();\n          codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01cb549dce822ce8a82b6ce2754b5a63181a44ca","date":1326996973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          \n          SegmentInfo info = flushedSegment.segmentInfo;\n          Codec codec = info.getCodec();\n          codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          \n          SegmentInfo info = flushedSegment.segmentInfo;\n          Codec codec = info.getCodec();\n          codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01bf951751b6dabfd53cb1429a659b28cd6ab4b","date":1327023967,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          \n          SegmentInfo info = flushedSegment.segmentInfo;\n          Codec codec = info.getCodec();\n          codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da5ca503d2914753714af960bdfea65c0fe0fc59","date":1327688040,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.delCount;\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.delCount;\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.delCount;\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link BitVector}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.segmentInfo.docCount - flushedSegment.liveDocs.count();\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        final String delFileName = newSegment.getDelFileName();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes to \" + delFileName);\n        }\n        boolean success2 = false;\n        try {\n          // TODO: in the NRT case it'd be better to hand\n          // this del vector over to the\n          // shortly-to-be-opened SegmentReader and let it\n          // carry the changes; there's no reason to use\n          // filesystem as intermediary here.\n          flushedSegment.liveDocs.write(directory, delFileName, context);\n          success2 = true;\n        } finally {\n          if (!success2) {\n            try {\n              directory.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareFlushedSegment(FlushedSegment).mjava","sourceNew":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.delCount;\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","sourceOld":"  /**\n   * Prepares the {@link SegmentInfo} for the new flushed segment and persists\n   * the deleted documents {@link MutableBits}. Use\n   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to\n   * publish the returned {@link SegmentInfo} together with its segment private\n   * delete packet.\n   * \n   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)\n   */\n  SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {\n    assert flushedSegment != null;\n\n    SegmentInfo newSegment = flushedSegment.segmentInfo;\n\n    setDiagnostics(newSegment, \"flush\");\n    \n    IOContext context = new IOContext(new FlushInfo(newSegment.docCount, newSegment.sizeInBytes()));\n\n    boolean success = false;\n    try {\n      if (useCompoundFile(newSegment)) {\n        String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"creating compound file \" + compoundFileName);\n        }\n        // Now build compound file\n        final Directory cfsDir = new CompoundFileDirectory(directory, compoundFileName, context, true);\n        IOException prior = null;\n        try {\n          for(String fileName : newSegment.files()) {\n            directory.copy(cfsDir, fileName, fileName, context);\n          }\n        } catch(IOException ex) {\n          prior = ex;\n        } finally {\n          IOUtils.closeWhileHandlingException(prior, cfsDir);\n        }\n        // Perform the merge\n        \n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n      }\n\n      // Must write deleted docs after the CFS so we don't\n      // slurp the del file into CFS:\n      if (flushedSegment.liveDocs != null) {\n        final int delCount = flushedSegment.delCount;\n        assert delCount > 0;\n        newSegment.setDelCount(delCount);\n        newSegment.advanceDelGen();\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"flush: write \" + delCount + \" deletes gen=\" + flushedSegment.segmentInfo.getDelGen());\n        }\n\n        // TODO: in the NRT case it'd be better to hand\n        // this del vector over to the\n        // shortly-to-be-opened SegmentReader and let it\n        // carry the changes; there's no reason to use\n        // filesystem as intermediary here.\n          \n        SegmentInfo info = flushedSegment.segmentInfo;\n        Codec codec = info.getCodec();\n        codec.liveDocsFormat().writeLiveDocs(flushedSegment.liveDocs, directory, info, context);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception \" +\n              \"reating compound file for newly flushed segment \" + newSegment.name);\n        }\n\n        synchronized(this) {\n          deleter.refresh(newSegment.name);\n        }\n      }\n    }\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["67aadace85f701c87a4e0721eedcda25d8415a70"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3cc749c053615f5871f3b95715fe292f34e70a53"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f6f4cae61e16730201371ab7e9912721c19324e7":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"01cb549dce822ce8a82b6ce2754b5a63181a44ca":["e5fd20ed668e3a00e9b27810fa855182276b3b58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["01cb549dce822ce8a82b6ce2754b5a63181a44ca"],"06584e6e98d592b34e1329b384182f368d2025e8":["24230fe54121f9be9d85f2c2067536296785e421"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"da5ca503d2914753714af960bdfea65c0fe0fc59":["c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","da5ca503d2914753714af960bdfea65c0fe0fc59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e5fd20ed668e3a00e9b27810fa855182276b3b58":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["06584e6e98d592b34e1329b384182f368d2025e8"],"67aadace85f701c87a4e0721eedcda25d8415a70":["24230fe54121f9be9d85f2c2067536296785e421"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","e5fd20ed668e3a00e9b27810fa855182276b3b58"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"01cb549dce822ce8a82b6ce2754b5a63181a44ca":["c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b","a3776dccca01c11e7046323cfad46a3b4a471233"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["da5ca503d2914753714af960bdfea65c0fe0fc59"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"3cc749c053615f5871f3b95715fe292f34e70a53":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","135621f3a0670a9394eb563224a3b76cc4dddc0f","0aab6e810b4b0d3743d6a048be0602801f4b3920","a3776dccca01c11e7046323cfad46a3b4a471233"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f6f4cae61e16730201371ab7e9912721c19324e7"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"da5ca503d2914753714af960bdfea65c0fe0fc59":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"e5fd20ed668e3a00e9b27810fa855182276b3b58":["01cb549dce822ce8a82b6ce2754b5a63181a44ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","5d004d0e0b3f65bb40da76d476d659d7888270e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}