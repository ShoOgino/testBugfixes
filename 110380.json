{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}