{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","commits":[{"id":"4cb48b0969187aad3e0c6befa65e4421e1e1f667","date":1399982311,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354c4824b406fe6894ac5f5eb544398a6c2d168b","date":1400281532,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0106fc8bd579fa78caf3372887b2d50907b5635","date":1402916839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":["bc45495cddab770758da8a7fe79f01747b83c9ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae889c32f4f301251f60804d7082a520e0594c6","date":1402924441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(2);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(2);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(3);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(2);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene410DocValuesFormat()));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(2);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f682f39e729d9d5379e1f49bbc0e3519cda940e0","date":1411403931,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    savedCodec = Codec.getDefault();\n    // currently only these codecs that support random access ordinals\n    int victim = random().nextInt(2);\n    switch(victim) {\n      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat())); break;\n      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene410DocValuesFormat()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f682f39e729d9d5379e1f49bbc0e3519cda940e0":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cb48b0969187aad3e0c6befa65e4421e1e1f667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cb48b0969187aad3e0c6befa65e4421e1e1f667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"354c4824b406fe6894ac5f5eb544398a6c2d168b":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["354c4824b406fe6894ac5f5eb544398a6c2d168b"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["6ae889c32f4f301251f60804d7082a520e0594c6"],"6ae889c32f4f301251f60804d7082a520e0594c6":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["354c4824b406fe6894ac5f5eb544398a6c2d168b","6ae889c32f4f301251f60804d7082a520e0594c6"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","354c4824b406fe6894ac5f5eb544398a6c2d168b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f682f39e729d9d5379e1f49bbc0e3519cda940e0"]},"commit2Childs":{"f682f39e729d9d5379e1f49bbc0e3519cda940e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["354c4824b406fe6894ac5f5eb544398a6c2d168b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","4cb48b0969187aad3e0c6befa65e4421e1e1f667","56572ec06f1407c066d6b7399413178b33176cd8"],"4cb48b0969187aad3e0c6befa65e4421e1e1f667":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"354c4824b406fe6894ac5f5eb544398a6c2d168b":["f0106fc8bd579fa78caf3372887b2d50907b5635","c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["6ae889c32f4f301251f60804d7082a520e0594c6"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["f682f39e729d9d5379e1f49bbc0e3519cda940e0"],"6ae889c32f4f301251f60804d7082a520e0594c6":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}