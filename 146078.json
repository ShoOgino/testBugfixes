{"path":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","commits":[{"id":"97825e47a3aef513c04447ab47a1acb85129f1ba","date":1300376061,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","pathOld":"/dev/null","sourceNew":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a927cd1ea78b52305eb3092a878a993c89c84b0","date":1300473602,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","pathOld":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","sourceNew":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97825e47a3aef513c04447ab47a1acb85129f1ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a927cd1ea78b52305eb3092a878a993c89c84b0":["97825e47a3aef513c04447ab47a1acb85129f1ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a927cd1ea78b52305eb3092a878a993c89c84b0"]},"commit2Childs":{"97825e47a3aef513c04447ab47a1acb85129f1ba":["3a927cd1ea78b52305eb3092a878a993c89c84b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97825e47a3aef513c04447ab47a1acb85129f1ba"],"3a927cd1ea78b52305eb3092a878a993c89c84b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}