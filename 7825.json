{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#build(int,int,PointWriter,IndexOutput,BKDRadixSelector,byte[],byte[],byte[],long[]).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#build(int,int,PointWriter,IndexOutput,BKDRadixSelector,byte[],byte[],byte[],long[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#build(int,int,PathSlice[],LongBitSet,IndexOutput,byte[],byte[],byte[],long[],List[Closeable]).mjava","sourceNew":"  /** The array (sized numDims) of PathSlice describe the cell we have currently recursed to. */\n  private void build(int nodeID, int leafNodeOffset,\n                     PointWriter data,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n\n      if (data instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. very lopsided data, all equal points, such that we started\n        // offline, but then kept splitting only in one dimension, and so never had to rewrite into heap writer\n        data = switchToHeap(data);\n      }\n\n      // We ensured that maxPointsSortInHeap was >= maxPointsInLeafNode, so we better be in heap at this point:\n      HeapPointWriter heapSource = (HeapPointWriter) data;\n\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = 0; i < heapSource.count(); ++i) {\n            heapSource.getPackedValueSlice(i, scratchBytesRef1);\n            int bucket = scratchBytesRef1.bytes[scratchBytesRef1.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      sortHeapPointWriter(heapSource, sortedDim);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = Math.toIntExact(heapSource.count());\n      assert count > 0: \"nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset;\n      writeLeafBlockDocs(out, heapSource.docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          heapSource.getPackedValueSlice(i, scratch);\n          return scratch;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          heapSource.docIDs, Math.toIntExact(0));\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // Inner node: partition/recurse\n\n      int splitDim;\n      if (numIndexDims > 1) {\n        splitDim = split(minPackedValue, maxPackedValue);\n      } else {\n        splitDim = 0;\n      }\n\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many points will be in the left tree:\n      long rightCount = data.count() / 2;\n      long leftCount = data.count() - rightCount;\n\n      PointWriter leftPointWriter;\n      PointWriter rightPointWriter;\n      byte[] splitValue;\n\n      try (PointWriter leftPointWriter2 = getPointWriter(leftCount, \"left\" + splitDim);\n           PointWriter rightPointWriter2 = getPointWriter(rightCount, \"right\" + splitDim)) {\n        splitValue = radixSelector.select(data, leftPointWriter2, rightPointWriter2, 0, data.count(),  leftCount, splitDim);\n        leftPointWriter = leftPointWriter2;\n        rightPointWriter = rightPointWriter2;\n      } catch (Throwable t) {\n        throw verifyChecksum(t, data);\n      }\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n\n\n      // Recurse on left tree:\n      build(2*nodeID, leafNodeOffset, leftPointWriter, out, radixSelector,\n            minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs);\n\n      // TODO: we could \"tail recurse\" here?  have our parent discard its refs as we recurse right?\n      // Recurse on right tree:\n      build(2*nodeID+1, leafNodeOffset, rightPointWriter, out, radixSelector,\n            minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs);\n    }\n  }\n\n","sourceOld":"  /** The array (sized numDims) of PathSlice describe the cell we have currently recursed to. */\n  private void build(int nodeID, int leafNodeOffset,\n                     PathSlice[] slices,\n                     LongBitSet ordBitSet,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     List<Closeable> toCloseHeroically) throws IOException {\n\n    for(PathSlice slice : slices) {\n      assert slice.count == slices[0].count;\n    }\n\n    if (numDataDims == 1 && slices[0].writer instanceof OfflinePointWriter && slices[0].count <= maxPointsSortInHeap) {\n      // Special case for 1D, to cutover to heap once we recurse deeply enough:\n      slices[0] = switchToHeap(slices[0], toCloseHeroically);\n    }\n\n    if (nodeID >= leafNodeOffset) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n\n      for (int dim=0;dim<numDataDims;dim++) {\n        if (slices[dim].writer instanceof HeapPointWriter == false) {\n          // Adversarial cases can cause this, e.g. very lopsided data, all equal points, such that we started\n          // offline, but then kept splitting only in one dimension, and so never had to rewrite into heap writer\n          slices[dim] = switchToHeap(slices[dim], toCloseHeroically);\n        }\n\n        PathSlice source = slices[dim];\n\n        HeapPointWriter heapSource = (HeapPointWriter) source.writer;\n\n        // Find common prefix by comparing first and last values, already sorted in this dimension:\n        heapSource.readPackedValue(Math.toIntExact(source.start), scratch1);\n        heapSource.readPackedValue(Math.toIntExact(source.start + source.count - 1), scratch2);\n\n        int offset = dim * bytesPerDim;\n        commonPrefixLengths[dim] = bytesPerDim;\n        for(int j=0;j<bytesPerDim;j++) {\n          if (scratch1[offset+j] != scratch2[offset+j]) {\n            commonPrefixLengths[dim] = j;\n            break;\n          }\n        }\n\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int cardinality = 1;\n          byte previous = scratch1[offset + prefix];\n          for (long i = 1; i < source.count; ++i) {\n            heapSource.readPackedValue(Math.toIntExact(source.start + i), scratch2);\n            byte b = scratch2[offset + prefix];\n            assert Byte.toUnsignedInt(previous) <= Byte.toUnsignedInt(b);\n            if (b != previous) {\n              cardinality++;\n              previous = b;\n            }\n          }\n          assert cardinality <= 256;\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      PathSlice source = slices[sortedDim];\n\n      // We ensured that maxPointsSortInHeap was >= maxPointsInLeafNode, so we better be in heap at this point:\n      HeapPointWriter heapSource = (HeapPointWriter) source.writer;\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = Math.toIntExact(source.count);\n      assert count > 0: \"nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset;\n      writeLeafBlockDocs(out, heapSource.docIDs, Math.toIntExact(source.start), count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          heapSource.getPackedValueSlice(Math.toIntExact(source.start + i), scratch);\n          return scratch;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          heapSource.docIDs, Math.toIntExact(source.start));\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // Inner node: partition/recurse\n\n      int splitDim;\n      if (numIndexDims > 1) {\n        splitDim = split(minPackedValue, maxPackedValue);\n      } else {\n        splitDim = 0;\n      }\n\n      PathSlice source = slices[splitDim];\n\n      assert nodeID < splitPackedValues.length: \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many points will be in the left tree:\n      long rightCount = source.count / 2;\n      long leftCount = source.count - rightCount;\n\n      byte[] splitValue = markRightTree(rightCount, splitDim, source, ordBitSet);\n      int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      // Partition all PathSlice that are not the split dim into sorted left and right sets, so we can recurse:\n\n      PathSlice[] leftSlices = new PathSlice[numDataDims];\n      PathSlice[] rightSlices = new PathSlice[numDataDims];\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      // When we are on this dim, below, we clear the ordBitSet:\n      int dimToClear;\n      if (numDataDims - 1 == splitDim) {\n        dimToClear = numDataDims - 2;\n      } else {\n        dimToClear = numDataDims - 1;\n      }\n\n      for(int dim=0;dim<numDataDims;dim++) {\n\n        if (dim == splitDim) {\n          // No need to partition on this dim since it's a simple slice of the incoming already sorted slice, and we\n          // will re-use its shared reader when visiting it as we recurse:\n          leftSlices[dim] = new PathSlice(source.writer, source.start, leftCount);\n          rightSlices[dim] = new PathSlice(source.writer, source.start + leftCount, rightCount);\n          System.arraycopy(splitValue, 0, minSplitPackedValue, dim*bytesPerDim, bytesPerDim);\n          System.arraycopy(splitValue, 0, maxSplitPackedValue, dim*bytesPerDim, bytesPerDim);\n          continue;\n        }\n\n        // Not inside the try because we don't want to close this one now, so that after recursion is done,\n        // we will have done a singel full sweep of the file:\n        PointReader reader = slices[dim].writer.getSharedReader(slices[dim].start, slices[dim].count, toCloseHeroically);\n\n        try (PointWriter leftPointWriter = getPointWriter(leftCount, \"left\" + dim);\n             PointWriter rightPointWriter = getPointWriter(source.count - leftCount, \"right\" + dim)) {\n\n          long nextRightCount = reader.split(source.count, ordBitSet, leftPointWriter, rightPointWriter, dim == dimToClear);\n          if (rightCount != nextRightCount) {\n            throw new IllegalStateException(\"wrong number of points in split: expected=\" + rightCount + \" but actual=\" + nextRightCount + \" in dim \" + dim);\n          }\n\n          leftSlices[dim] = new PathSlice(leftPointWriter, 0, leftCount);\n          rightSlices[dim] = new PathSlice(rightPointWriter, 0, rightCount);\n        } catch (Throwable t) {\n          throw verifyChecksum(t, slices[dim].writer);\n        }\n      }\n\n      // Recurse on left tree:\n      build(2*nodeID, leafNodeOffset, leftSlices,\n            ordBitSet, out,\n            minPackedValue, maxSplitPackedValue,\n            splitPackedValues, leafBlockFPs, toCloseHeroically);\n      for(int dim=0;dim<numDataDims;dim++) {\n        // Don't destroy the dim we split on because we just re-used what our caller above gave us for that dim:\n        if (dim != splitDim) {\n          leftSlices[dim].writer.destroy();\n        }\n      }\n\n      // TODO: we could \"tail recurse\" here?  have our parent discard its refs as we recurse right?\n      // Recurse on right tree:\n      build(2*nodeID+1, leafNodeOffset, rightSlices,\n            ordBitSet, out,\n            minSplitPackedValue, maxPackedValue,\n            splitPackedValues, leafBlockFPs, toCloseHeroically);\n      for(int dim=0;dim<numDataDims;dim++) {\n        // Don't destroy the dim we split on because we just re-used what our caller above gave us for that dim:\n        if (dim != splitDim) {\n          rightSlices[dim].writer.destroy();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#build(int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],byte[],long[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#build(int,int,PointWriter,IndexOutput,BKDRadixSelector,byte[],byte[],byte[],long[]).mjava","sourceNew":"  /** The array (sized numDims) of PathSlice describe the cell we have currently recursed to. */\n  private void build(int nodeID, int leafNodeOffset,\n                     BKDRadixSelector.PathSlice points,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n\n      HeapPointWriter heapSource;\n      if (points.writer instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. very lopsided data, all equal points, such that we started\n        // offline, but then kept splitting only in one dimension, and so never had to rewrite into heap writer\n        heapSource  = switchToHeap(points.writer);\n      } else {\n        heapSource = (HeapPointWriter) points.writer;\n      }\n\n      int from = Math.toIntExact(points.start);\n      int to = Math.toIntExact(points.start + points.count);\n\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = 0; i < heapSource.count(); ++i) {\n            heapSource.getPackedValueSlice(i, scratchBytesRef1);\n            int bucket = scratchBytesRef1.bytes[scratchBytesRef1.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort the chosen dimension\n      sortHeapPointWriter(heapSource, from, to, sortedDim, commonPrefixLengths[sortedDim]);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = to - from;\n      assert count > 0: \"nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset;\n      writeLeafBlockDocs(out, heapSource.docIDs, from, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          heapSource.getPackedValueSlice(from + i, scratch);\n          return scratch;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          heapSource.docIDs, from);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // Inner node: partition/recurse\n\n      int splitDim;\n      if (numIndexDims > 1) {\n        splitDim = split(minPackedValue, maxPackedValue);\n      } else {\n        splitDim = 0;\n      }\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many points will be in the left tree:\n      long rightCount = points.count / 2;\n      long leftCount = points.count - rightCount;\n\n      int commonPrefixLen = FutureArrays.mismatch(minPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim, maxPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim);\n      if (commonPrefixLen == -1) {\n        commonPrefixLen = bytesPerDim;\n      }\n\n      BKDRadixSelector.PathSlice[] pathSlices = new BKDRadixSelector.PathSlice[2];\n\n      byte[] splitValue =  radixSelector.select(points, pathSlices, points.start, points.start + points.count,  points.start + leftCount, splitDim, commonPrefixLen);\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // Recurse on left tree:\n      build(2*nodeID, leafNodeOffset, pathSlices[0], out, radixSelector,\n            minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs);\n\n      // TODO: we could \"tail recurse\" here?  have our parent discard its refs as we recurse right?\n      // Recurse on right tree:\n      build(2*nodeID+1, leafNodeOffset, pathSlices[1], out, radixSelector,\n            minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs);\n    }\n  }\n\n","sourceOld":"  /** The array (sized numDims) of PathSlice describe the cell we have currently recursed to. */\n  private void build(int nodeID, int leafNodeOffset,\n                     PointWriter data,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n\n      if (data instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. very lopsided data, all equal points, such that we started\n        // offline, but then kept splitting only in one dimension, and so never had to rewrite into heap writer\n        data = switchToHeap(data);\n      }\n\n      // We ensured that maxPointsSortInHeap was >= maxPointsInLeafNode, so we better be in heap at this point:\n      HeapPointWriter heapSource = (HeapPointWriter) data;\n\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = 0; i < heapSource.count(); ++i) {\n            heapSource.getPackedValueSlice(i, scratchBytesRef1);\n            int bucket = scratchBytesRef1.bytes[scratchBytesRef1.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      sortHeapPointWriter(heapSource, sortedDim);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = Math.toIntExact(heapSource.count());\n      assert count > 0: \"nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset;\n      writeLeafBlockDocs(out, heapSource.docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          heapSource.getPackedValueSlice(i, scratch);\n          return scratch;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          heapSource.docIDs, Math.toIntExact(0));\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // Inner node: partition/recurse\n\n      int splitDim;\n      if (numIndexDims > 1) {\n        splitDim = split(minPackedValue, maxPackedValue);\n      } else {\n        splitDim = 0;\n      }\n\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many points will be in the left tree:\n      long rightCount = data.count() / 2;\n      long leftCount = data.count() - rightCount;\n\n      PointWriter leftPointWriter;\n      PointWriter rightPointWriter;\n      byte[] splitValue;\n\n      try (PointWriter leftPointWriter2 = getPointWriter(leftCount, \"left\" + splitDim);\n           PointWriter rightPointWriter2 = getPointWriter(rightCount, \"right\" + splitDim)) {\n        splitValue = radixSelector.select(data, leftPointWriter2, rightPointWriter2, 0, data.count(),  leftCount, splitDim);\n        leftPointWriter = leftPointWriter2;\n        rightPointWriter = rightPointWriter2;\n      } catch (Throwable t) {\n        throw verifyChecksum(t, data);\n      }\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n\n\n      // Recurse on left tree:\n      build(2*nodeID, leafNodeOffset, leftPointWriter, out, radixSelector,\n            minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs);\n\n      // TODO: we could \"tail recurse\" here?  have our parent discard its refs as we recurse right?\n      // Recurse on right tree:\n      build(2*nodeID+1, leafNodeOffset, rightPointWriter, out, radixSelector,\n            minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}