{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4c215b0bf13f9a31643569e356468a5f1aee809","date":1401781915,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      BoostQuery bq = (BoostQuery) clause.getQuery();\n      TermQuery tq = (TermQuery) bq.getQuery();\n      originalValues.put(tq.getTerm().text(), bq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"303eba9db32cde4e6fbc4e51a44361ef1c302e6c","date":1553596029,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      BoostQuery bq = (BoostQuery) clause.getQuery();\n      TermQuery tq = (TermQuery) bq.getQuery();\n      originalValues.put(tq.getTerm().text(), bq.getBoost());\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\", new StringReader(\n        \"lucene release\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      BoostQuery bq = (BoostQuery) clause.getQuery();\n      TermQuery tq = (TermQuery) bq.getQuery();\n      originalValues.put(tq.getTerm().text(), bq.getBoost());\n    }\n    analyzer.close();\n    return originalValues;\n  }\n\n","bugFix":["a56958d7f71a28824f20031ffbb2e13502a0274e","c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c4c215b0bf13f9a31643569e356468a5f1aee809","a56958d7f71a28824f20031ffbb2e13502a0274e"],"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}