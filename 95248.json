{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final FieldSelectorVisitor visitor = new FieldSelectorVisitor(new SetNonLazyFieldSelector(fields));\n      getIndexReader().document(i, visitor);\n      d = visitor.getDocument();\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final FieldSelectorVisitor visitor = new FieldSelectorVisitor(new SetNonLazyFieldSelector(fields));\n      getIndexReader().document(i, visitor);\n      d = visitor.getDocument();\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"098aef046f98e11fdf2867135cc861099b29acfa","date":1357581834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * Note: The document will have all fields accessible, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * Note: The document will have all fields accessible, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n\n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (!enableLazyFieldLoading || fields == null) {\n      d = reader.document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n      reader.document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * Note: The document will have all fields accessible, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n    \n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, getIndexReader(), i);\n      getIndexReader().document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (!enableLazyFieldLoading || fields == null) {\n      d = reader.document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n      reader.document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public StoredDocument doc(int i, Set<String> fields) throws IOException {\n\n    StoredDocument d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (!enableLazyFieldLoading || fields == null) {\n      d = reader.document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n      reader.document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac","date":1467877935,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (fields != null) {\n      if (enableLazyFieldLoading) {\n        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n        reader.document(i, visitor);\n        d = visitor.doc;\n      } else if (documentCache == null) {\n        d = reader.document(i, fields);\n      } else {\n        // we do not pass the fields in this case because that would return an incomplete document which would\n        // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n        // and then without for caching leading to a performance hit\n        // see SOLR-8858 for related discussion\n        d = reader.document(i);\n      }\n    } else {\n      d = reader.document(i);\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (!enableLazyFieldLoading || fields == null) {\n      d = reader.document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n      reader.document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (fields != null) {\n      if (enableLazyFieldLoading) {\n        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n        reader.document(i, visitor);\n        d = visitor.doc;\n      } else if (documentCache == null) {\n        d = reader.document(i, fields);\n      } else {\n        // we do not pass the fields in this case because that would return an incomplete document which would\n        // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n        // and then without for caching leading to a performance hit\n        // see SOLR-8858 for related discussion\n        d = reader.document(i);\n      }\n    } else {\n      d = reader.document(i);\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (!enableLazyFieldLoading || fields == null) {\n      d = reader.document(i);\n    } else {\n      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n      reader.document(i, visitor);\n      d = visitor.doc;\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (fields != null) {\n      if (enableLazyFieldLoading) {\n        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n        reader.document(i, visitor);\n        d = visitor.doc;\n      } else if (documentCache == null) {\n        d = reader.document(i, fields);\n      } else {\n        // we do not pass the fields in this case because that would return an incomplete document which would\n        // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n        // and then without for caching leading to a performance hit\n        // see SOLR-8858 for related discussion\n        d = reader.document(i);\n      }\n    } else {\n      d = reader.document(i);\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (fields != null) {\n      if (enableLazyFieldLoading) {\n        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n        reader.document(i, visitor);\n        d = visitor.doc;\n      } else if (documentCache == null) {\n        d = reader.document(i, fields);\n      } else {\n        // we do not pass the fields in this case because that would return an incomplete document which would\n        // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n        // and then without for caching leading to a performance hit\n        // see SOLR-8858 for related discussion\n        d = reader.document(i);\n      }\n    } else {\n      d = reader.document(i);\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrDocumentFetcher\n   */\n  @Override\n  public final Document doc(int i, Set<String> fields) throws IOException {\n    return getDocFetcher().doc(i, fields);\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrDocumentFetcher\n   */\n  @Override\n  public final Document doc(int i, Set<String> fields) throws IOException {\n    return getDocFetcher().doc(i, fields);\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   */\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1d028314cced5858683a1bb4741423d0f934257b","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["098aef046f98e11fdf2867135cc861099b29acfa"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["7b4eb0a25318cc756077fbde9bd3052690aed03d"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["12f7f335611574989edc8f87d25d91e89aa385b6"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"12f7f335611574989edc8f87d25d91e89aa385b6":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"1d028314cced5858683a1bb4741423d0f934257b":["06584e6e98d592b34e1329b384182f368d2025e8","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"098aef046f98e11fdf2867135cc861099b29acfa":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["12f7f335611574989edc8f87d25d91e89aa385b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7b4eb0a25318cc756077fbde9bd3052690aed03d"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"12f7f335611574989edc8f87d25d91e89aa385b6":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","098aef046f98e11fdf2867135cc861099b29acfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["de548de3ce5405595899f548152d4b93ac9eb9cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"098aef046f98e11fdf2867135cc861099b29acfa":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","de548de3ce5405595899f548152d4b93ac9eb9cc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}