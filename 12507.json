{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreFromAnyList(String).mjava","sourceNew":"  protected SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) { // This one's OK, the core.open is just an increment\n      core = cores.get(name);\n      if (core != null) {\n        core.open();    // increment the ref count while still synchronized\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      core = transientCores.get(name);\n      if (core != null) {\n        core.open();  // Just increments ref count, so it's ok that we're in a synch block\n        return core;\n      }\n    }\n\n    return null;\n\n  }\n\n","sourceOld":"  private SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n    synchronized (cores) {\n      core = cores.get(name);\n      if (core != null) {\n        core.open();    // increment the ref count while still synchronized\n        return core;\n      }\n    }\n\n    if (dynamicDescriptors.size() == 0) return null; // Nobody even tried to define any transient cores, so we're done.\n\n    // Now look for already loaded transient cores.\n    synchronized (transientCores) {\n      core = transientCores.get(name);\n      if (core != null) {\n        core.open();\n        return core;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","sourceNew":"  protected SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) {\n      core = cores.get(name);\n      if (core != null) {\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      return transientCores.get(name);\n    }\n  }\n\n","sourceOld":"  protected SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) { // This one's OK, the core.open is just an increment\n      core = cores.get(name);\n      if (core != null) {\n        core.open();    // increment the ref count while still synchronized\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      core = transientCores.get(name);\n      if (core != null) {\n        core.open();  // Just increments ref count, so it's ok that we're in a synch block\n        return core;\n      }\n    }\n\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","sourceNew":"  public SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) {\n      core = cores.get(name);\n      if (core != null) {\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      return transientCores.get(name);\n    }\n  }\n\n","sourceOld":"  protected SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) {\n      core = cores.get(name);\n      if (core != null) {\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      return transientCores.get(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#getCoreFromAnyList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#getCoreFromAnyList(String).mjava","sourceNew":"  protected SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) {\n      core = cores.get(name);\n      if (core != null) {\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      return transientCores.get(name);\n    }\n  }\n\n","sourceOld":"  public SolrCore getCoreFromAnyList(String name) {\n    SolrCore core;\n\n    synchronized (locker) {\n      core = cores.get(name);\n      if (core != null) {\n        return core;\n      }\n\n      if (dynamicDescriptors.size() == 0) {\n        return null; // Nobody even tried to define any transient cores, so we're done.\n      }\n      // Now look for already loaded transient cores.\n      return transientCores.get(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["08970e5b8411182a29412c177eff67ec1110095b"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"08970e5b8411182a29412c177eff67ec1110095b":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"08970e5b8411182a29412c177eff67ec1110095b":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}