{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a context with boost, set <code>exact</code> to false\n   * if the context is a prefix of any indexed contexts\n   */\n  public void addContext(CharSequence context, float boost, boolean exact) {\n    if (boost < 0f) {\n      throw new IllegalArgumentException(\"'boost' must be >= 0\");\n    }\n    for (int i = 0; i < context.length(); i++) {\n      if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {\n        throw new IllegalArgumentException(\"Illegal value [\" + context + \"] UTF-16 codepoint [0x\"\n            + Integer.toHexString((int) context.charAt(i))+ \"] at position \" + i + \" is a reserved character\");\n      }\n    }\n    contexts.put(context, new ContextMetaData(boost, exact));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3e870f9bab17325ebf91f7500d2c05596634741","date":1438287049,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","sourceNew":"  /**\n   * Adds a context with boost, set <code>exact</code> to false\n   * if the context is a prefix of any indexed contexts\n   */\n  public void addContext(CharSequence context, float boost, boolean exact) {\n    if (boost < 0f) {\n      throw new IllegalArgumentException(\"'boost' must be >= 0\");\n    }\n    for (int i = 0; i < context.length(); i++) {\n      if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {\n        throw new IllegalArgumentException(\"Illegal value [\" + context + \"] UTF-16 codepoint [0x\"\n            + Integer.toHexString((int) context.charAt(i))+ \"] at position \" + i + \" is a reserved character\");\n      }\n    }\n    contexts.put(IntsRef.deepCopyOf(Util.toIntsRef(new BytesRef(context), scratch)), new ContextMetaData(boost, exact));\n  }\n\n","sourceOld":"  /**\n   * Adds a context with boost, set <code>exact</code> to false\n   * if the context is a prefix of any indexed contexts\n   */\n  public void addContext(CharSequence context, float boost, boolean exact) {\n    if (boost < 0f) {\n      throw new IllegalArgumentException(\"'boost' must be >= 0\");\n    }\n    for (int i = 0; i < context.length(); i++) {\n      if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {\n        throw new IllegalArgumentException(\"Illegal value [\" + context + \"] UTF-16 codepoint [0x\"\n            + Integer.toHexString((int) context.charAt(i))+ \"] at position \" + i + \" is a reserved character\");\n      }\n    }\n    contexts.put(context, new ContextMetaData(boost, exact));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#addContext(CharSequence,float,boolean).mjava","sourceNew":"  /**\n   * Adds a context with boost, set <code>exact</code> to false\n   * if the context is a prefix of any indexed contexts\n   */\n  public void addContext(CharSequence context, float boost, boolean exact) {\n    if (boost < 0f) {\n      throw new IllegalArgumentException(\"'boost' must be >= 0\");\n    }\n    for (int i = 0; i < context.length(); i++) {\n      if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {\n        throw new IllegalArgumentException(\"Illegal value [\" + context + \"] UTF-16 codepoint [0x\"\n            + Integer.toHexString((int) context.charAt(i))+ \"] at position \" + i + \" is a reserved character\");\n      }\n    }\n    contexts.put(IntsRef.deepCopyOf(Util.toIntsRef(new BytesRef(context), scratch)), new ContextMetaData(boost, exact));\n    updateRamBytesUsed();\n  }\n\n","sourceOld":"  /**\n   * Adds a context with boost, set <code>exact</code> to false\n   * if the context is a prefix of any indexed contexts\n   */\n  public void addContext(CharSequence context, float boost, boolean exact) {\n    if (boost < 0f) {\n      throw new IllegalArgumentException(\"'boost' must be >= 0\");\n    }\n    for (int i = 0; i < context.length(); i++) {\n      if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {\n        throw new IllegalArgumentException(\"Illegal value [\" + context + \"] UTF-16 codepoint [0x\"\n            + Integer.toHexString((int) context.charAt(i))+ \"] at position \" + i + \" is a reserved character\");\n      }\n    }\n    contexts.put(IntsRef.deepCopyOf(Util.toIntsRef(new BytesRef(context), scratch)), new ContextMetaData(boost, exact));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe90d104db258964b96e50418b9caa0c156eafda":["d3e870f9bab17325ebf91f7500d2c05596634741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3e870f9bab17325ebf91f7500d2c05596634741":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe90d104db258964b96e50418b9caa0c156eafda"]},"commit2Childs":{"fe90d104db258964b96e50418b9caa0c156eafda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"d3e870f9bab17325ebf91f7500d2c05596634741":["fe90d104db258964b96e50418b9caa0c156eafda"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["d3e870f9bab17325ebf91f7500d2c05596634741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}