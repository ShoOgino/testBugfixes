{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 3) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoMBean.Category category;\n    try {\n      category = SolrInfoMBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope = names[1];\n    String name = fullName.substring(names[0].length() + names[1].length() + 2);\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 3) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoMBean.Category category;\n    try {\n      category = SolrInfoMBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope = names[1];\n    String name = fullName.substring(names[0].length() + names[1].length() + 2);\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","sourceNew":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 2) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoBean.Category category;\n    try {\n      category = SolrInfoBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope;\n    String name;\n    if (names.length == 2) {\n      scope = null;\n      name = fullName.substring(names[0].length() + 1);\n    } else {\n      scope = names[1];\n      name = fullName.substring(names[0].length() + names[1].length() + 2);\n    }\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","sourceOld":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 3) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoMBean.Category category;\n    try {\n      category = SolrInfoMBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope = names[1];\n    String name = fullName.substring(names[0].length() + names[1].length() + 2);\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricInfo#of(String).mjava","sourceNew":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 2) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoBean.Category category;\n    try {\n      category = SolrInfoBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope;\n    String name;\n    if (names.length == 2) {\n      scope = null;\n      name = fullName.substring(names[0].length() + 1);\n    } else {\n      scope = names[1];\n      name = fullName.substring(names[0].length() + names[1].length() + 2);\n    }\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","sourceOld":"  public static SolrMetricInfo of(String fullName) {\n    if (fullName == null || fullName.isEmpty()) {\n      return null;\n    }\n    String[] names = fullName.split(\"\\\\.\");\n    if (names.length < 3) { // not a valid info\n      return null;\n    }\n    // check top-level name for valid category\n    SolrInfoMBean.Category category;\n    try {\n      category = SolrInfoMBean.Category.valueOf(names[0]);\n    } catch (IllegalArgumentException e) { // not a valid category\n      return null;\n    }\n    String scope = names[1];\n    String name = fullName.substring(names[0].length() + names[1].length() + 2);\n    return new SolrMetricInfo(category, scope, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0265144286422ad99682a00904cc2536b79c8535"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","816521ebaad5add9cb96bb88c577394e2938c40b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}