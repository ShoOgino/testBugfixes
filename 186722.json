{"path":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null == defaultFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"'\");\n    } else {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n    }\n    defaultFieldType = defaultFieldTypeParam.toString();\n\n    typeMappings = parseTypeMappings(args);\n\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null == defaultFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"'\");\n    } else {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n    }\n    defaultFieldType = defaultFieldTypeParam.toString();\n\n    typeMappings = parseTypeMappings(args);\n\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b377fd91b7578d0c02b259b5112d667e4d5f8e6","date":1499349411,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null != defaultFieldTypeParam) {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n      defaultFieldType = defaultFieldTypeParam.toString();\n    }\n\n    typeMappings = parseTypeMappings(args);\n    if (null == defaultFieldType && typeMappings.stream().noneMatch(TypeMapping::isDefault)) {\n      throw new SolrException(SERVER_ERROR, \"Must specify either '\" + DEFAULT_FIELD_TYPE_PARAM + \n          \"' or declare one typeMapping as default.\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null == defaultFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"'\");\n    } else {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n    }\n    defaultFieldType = defaultFieldTypeParam.toString();\n\n    typeMappings = parseTypeMappings(args);\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null != defaultFieldTypeParam) {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n      defaultFieldType = defaultFieldTypeParam.toString();\n    }\n\n    typeMappings = parseTypeMappings(args);\n    if (null == defaultFieldType && typeMappings.stream().noneMatch(TypeMapping::isDefault)) {\n      throw new SolrException(SERVER_ERROR, \"Must specify either '\" + DEFAULT_FIELD_TYPE_PARAM + \n          \"' or declare one typeMapping as default.\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null == defaultFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"'\");\n    } else {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n    }\n    defaultFieldType = defaultFieldTypeParam.toString();\n\n    typeMappings = parseTypeMappings(args);\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null != defaultFieldTypeParam) {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n      defaultFieldType = defaultFieldTypeParam.toString();\n    }\n\n    typeMappings = parseTypeMappings(args);\n    if (null == defaultFieldType && typeMappings.stream().noneMatch(TypeMapping::isDefault)) {\n      throw new SolrException(SERVER_ERROR, \"Must specify either '\" + DEFAULT_FIELD_TYPE_PARAM + \n          \"' or declare one typeMapping as default.\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    inclusions = FieldMutatingUpdateProcessorFactory.parseSelectorParams(args);\n    validateSelectorParams(inclusions);\n    inclusions.fieldNameMatchesSchemaField = false;  // Explicitly (non-configurably) require unknown field names\n    exclusions = FieldMutatingUpdateProcessorFactory.parseSelectorExclusionParams(args);\n    for (SelectorParams exclusion : exclusions) {\n      validateSelectorParams(exclusion);\n    }\n    Object defaultFieldTypeParam = args.remove(DEFAULT_FIELD_TYPE_PARAM);\n    if (null != defaultFieldTypeParam) {\n      if ( ! (defaultFieldTypeParam instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEFAULT_FIELD_TYPE_PARAM + \"' must be a <str>\");\n      }\n      defaultFieldType = defaultFieldTypeParam.toString();\n    }\n\n    typeMappings = parseTypeMappings(args);\n    if (null == defaultFieldType && typeMappings.stream().noneMatch(TypeMapping::isDefault)) {\n      throw new SolrException(SERVER_ERROR, \"Must specify either '\" + DEFAULT_FIELD_TYPE_PARAM + \n          \"' or declare one typeMapping as default.\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["fe3edda347939cc6859dbf4287e84f3e8e4bb939","4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["018a36ff4088cb91ab12cbe44f696d81d1fadd77","e73d8d559120669b47658108d818b637df5456ea"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6","37a0f60745e53927c4c876cfe5b5a58170f0646c","e73d8d559120669b47658108d818b637df5456ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"e73d8d559120669b47658108d818b637df5456ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}