{"path":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","commits":[{"id":"55688cada84e99928d155229fc2768df65a45bdb","date":1306274128,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initCodecProvider(SolrConfig,IndexSchema).mjava","sourceNew":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","sourceOld":"  private CodecProvider initCodecProvider(SolrConfig solrConfig, IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecProviderFactory.class.getName());\n    CodecProvider cp;\n    if (info != null) {\n      CodecProviderFactory factory = (CodecProviderFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n      cp = factory.create();\n    } else {\n      // make sure we use the default if nothing is configured\n      cp = CodecProvider.getDefault();\n    }\n    return new SchemaCodecProvider(schema, cp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55688cada84e99928d155229fc2768df65a45bdb"],"c26f00b574427b55127e869b935845554afde1fa":["55688cada84e99928d155229fc2768df65a45bdb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["55688cada84e99928d155229fc2768df65a45bdb"],"55688cada84e99928d155229fc2768df65a45bdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55688cada84e99928d155229fc2768df65a45bdb"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","55688cada84e99928d155229fc2768df65a45bdb","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"55688cada84e99928d155229fc2768df65a45bdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}