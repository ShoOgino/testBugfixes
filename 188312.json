{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","commits":[{"id":"da63b3051a3d2a355b6ad088b8ca31f068790813","date":1115339168,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"/dev/null","sourceNew":"    public boolean hasNext() {\n      has_next_called = true;\n      try {\n        // if there is still words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        //  if the next word are in the field\n        actualTerm = termEnum.term();\n        String fieldt = actualTerm.field();\n        if (fieldt != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66c7d9ba90489bb25ccef63953d2b19871ddca9b","date":1150608774,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        // if there is still words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        //  if the next word are in the field\n        actualTerm = termEnum.term();\n        String fieldt = actualTerm.field();\n        if (fieldt != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        return false;\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      has_next_called = true;\n      try {\n        // if there is still words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        //  if the next word are in the field\n        actualTerm = termEnum.term();\n        String fieldt = actualTerm.field();\n        if (fieldt != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f372ce30b98339ec7deae785a29a96d2d3c07b12","date":1150609646,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        // if there is still words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        //  if the next word are in the field\n        actualTerm = termEnum.term();\n        String fieldt = actualTerm.field();\n        if (fieldt != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c72e5007c94977b4be8746eab3fe47aac33539d","date":1151698488,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"732b0bb4cb809b90ddaf1abce658bbceb75eb032","date":1180638816,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      actualTerm = termEnum.term();\n\n      // if there are no words return false\n      if (actualTerm == null) {\n        return false;\n      }\n\n      String currentField = actualTerm.field();\n\n      // if the next word doesn't have the same field return false\n      if (currentField != field) {\n        actualTerm = null;\n        return false;\n      }\n\n      return true;\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n      try {\n        // if there are no more words\n        if (!termEnum.next()) {\n          actualTerm = null;\n          return false;\n        }\n        // if the next word is in the field\n        actualTerm = termEnum.term();\n        String currentField = actualTerm.field();\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n        return true;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LuceneDictionary.LuceneIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      actualTerm = termEnum.term();\n\n      // if there are no words return false\n      if (actualTerm == null) {\n        return false;\n      }\n\n      String currentField = actualTerm.field();\n\n      // if the next word doesn't have the same field return false\n      if (currentField != field) {\n        actualTerm = null;\n        return false;\n      }\n\n      return true;\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      actualTerm = termEnum.term();\n\n      // if there are no words return false\n      if (actualTerm == null) {\n        return false;\n      }\n\n      String currentField = actualTerm.field();\n\n      // if the next word doesn't have the same field return false\n      if (currentField != field) {\n        actualTerm = null;\n        return false;\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66c7d9ba90489bb25ccef63953d2b19871ddca9b":["da63b3051a3d2a355b6ad088b8ca31f068790813"],"f372ce30b98339ec7deae785a29a96d2d3c07b12":["66c7d9ba90489bb25ccef63953d2b19871ddca9b"],"da63b3051a3d2a355b6ad088b8ca31f068790813":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96308b901685e8ec12a3856f788a7d9d98c22e50":["3c72e5007c94977b4be8746eab3fe47aac33539d"],"3c72e5007c94977b4be8746eab3fe47aac33539d":["f372ce30b98339ec7deae785a29a96d2d3c07b12"],"732b0bb4cb809b90ddaf1abce658bbceb75eb032":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["732b0bb4cb809b90ddaf1abce658bbceb75eb032"]},"commit2Childs":{"66c7d9ba90489bb25ccef63953d2b19871ddca9b":["f372ce30b98339ec7deae785a29a96d2d3c07b12"],"da63b3051a3d2a355b6ad088b8ca31f068790813":["66c7d9ba90489bb25ccef63953d2b19871ddca9b"],"f372ce30b98339ec7deae785a29a96d2d3c07b12":["3c72e5007c94977b4be8746eab3fe47aac33539d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da63b3051a3d2a355b6ad088b8ca31f068790813"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["732b0bb4cb809b90ddaf1abce658bbceb75eb032"],"3c72e5007c94977b4be8746eab3fe47aac33539d":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"732b0bb4cb809b90ddaf1abce658bbceb75eb032":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}