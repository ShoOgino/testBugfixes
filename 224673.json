{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.info.docCount));\n      assert delRatio <= 1.0;\n      return (info.info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","sourceNew":"  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.getDocCount() <= 0 ? 0.0f : ((float)delCount / (float)info.info.getDocCount()));\n      assert delRatio <= 1.0;\n      return (info.info.getDocCount() <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.info.docCount));\n      assert delRatio <= 1.0;\n      return (info.info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.getDocCount() <= 0 ? 0.0f : ((float)delCount / (float)info.info.getDocCount()));\n      assert delRatio <= 1.0;\n      return (info.info.getDocCount() <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","sourceNew":"  /** Return the byte size of the provided {@link\n   *  SegmentInfoPerCommit}, pro-rated by percentage of\n   *  non-deleted documents if {@link\n   *  #setCalibrateSizeByDeletes} is set. */\n  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.getDocCount() <= 0 ? 0.0f : ((float)delCount / (float)info.info.getDocCount()));\n      assert delRatio <= 1.0;\n      return (info.info.getDocCount() <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.getDocCount() <= 0 ? 0.0f : ((float)delCount / (float)info.info.getDocCount()));\n      assert delRatio <= 1.0;\n      return (info.info.getDocCount() <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","sourceNew":"  /** Return the byte size of the provided {@link\n   *  SegmentInfoPerCommit}, pro-rated by percentage of\n   *  non-deleted documents if {@link\n   *  #setCalibrateSizeByDeletes} is set. */\n  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    if (calibrateSizeByDeletes) {\n      return super.size(info);\n    }\n    return info.sizeInBytes();\n  }\n\n","sourceOld":"  /** Return the byte size of the provided {@link\n   *  SegmentInfoPerCommit}, pro-rated by percentage of\n   *  non-deleted documents if {@link\n   *  #setCalibrateSizeByDeletes} is set. */\n  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.info.getDocCount() <= 0 ? 0.0f : ((float)delCount / (float)info.info.getDocCount()));\n      assert delRatio <= 1.0;\n      return (info.info.getDocCount() <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfoPerCommit).mjava","sourceNew":"  /** Return the byte size of the provided {@link\n   *  SegmentCommitInfo}, pro-rated by percentage of\n   *  non-deleted documents if {@link\n   *  #setCalibrateSizeByDeletes} is set. */\n  protected long sizeBytes(SegmentCommitInfo info) throws IOException {\n    if (calibrateSizeByDeletes) {\n      return super.size(info);\n    }\n    return info.sizeInBytes();\n  }\n\n","sourceOld":"  /** Return the byte size of the provided {@link\n   *  SegmentInfoPerCommit}, pro-rated by percentage of\n   *  non-deleted documents if {@link\n   *  #setCalibrateSizeByDeletes} is set. */\n  protected long sizeBytes(SegmentInfoPerCommit info) throws IOException {\n    if (calibrateSizeByDeletes) {\n      return super.size(info);\n    }\n    return info.sizeInBytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}