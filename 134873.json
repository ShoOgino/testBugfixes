{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","commits":[{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","fbcfc050b9f253136eaa5950b57248b2109eac11"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fa64435b5902ce266c23755a4a00691a3285dab8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fbcfc050b9f253136eaa5950b57248b2109eac11","962cd4f5e313777f35da8f521265323e84184929"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fbcfc050b9f253136eaa5950b57248b2109eac11","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["6c8a2521797f14d1d697a17a0069f5619cd211a6"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa64435b5902ce266c23755a4a00691a3285dab8"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["962cd4f5e313777f35da8f521265323e84184929","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}