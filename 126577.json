{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","commits":[{"id":"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","date":1474482359,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","pathOld":"/dev/null","sourceNew":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream().filter(r -> nodesDown.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","pathOld":"/dev/null","sourceNew":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream().filter(r -> nodesDown.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","pathOld":"/dev/null","sourceNew":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream().filter(r -> nodesDown.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","sourceNew":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<String> nodesDownNames = nodesDown.stream()\n          .map(n -> n.coreNodeName)\n          .collect(Collectors.toList());\n      \n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream()\n          .filter(r -> !nodesDownNames.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream().filter(r -> nodesDown.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitTillNodesActive().mjava","sourceNew":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<String> nodesDownNames = nodesDown.stream()\n          .map(n -> n.coreNodeName)\n          .collect(Collectors.toList());\n      \n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream()\n          .filter(r -> !nodesDownNames.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":"  private void waitTillNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n\n      Collection<Replica> replicasToCheck = null;\n      replicasToCheck = replicas.stream().filter(r -> nodesDown.contains(r.getName()))\n          .collect(Collectors.toList());\n\n      for (Replica replica : replicasToCheck) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786"],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}