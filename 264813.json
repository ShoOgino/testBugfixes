{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuilder).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuilder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuilder).mjava","sourceNew":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuilder buffer )\n    {\n      boolean doMore = true;\n      while ( doMore && buffer.length() > 3 ) {\n        if ( ( buffer.length() + substCount > 5 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n        {\n          buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        // \"t\" occurs only as suffix of verbs.\n        else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else {\n          doMore = false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuilder buffer )\n    {\n      boolean doMore = true;\n      while ( doMore && buffer.length() > 3 ) {\n        if ( ( buffer.length() + substCount > 5 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n        {\n          buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        // \"t\" occurs only as suffix of verbs.\n        else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else {\n          doMore = false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}