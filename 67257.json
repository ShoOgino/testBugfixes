{"path":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","commits":[{"id":"94a2758d07e0d83d524af25cee0d8a04b6394f47","date":1357921039,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getNumericValues(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues getNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94a2758d07e0d83d524af25cee0d8a04b6394f47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}