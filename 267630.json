{"path":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","commits":[{"id":"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","date":1325088052,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testLanguageSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","sourceNew":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testLanguageSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","sourceNew":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testLanguageSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","sourceNew":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testLanguageSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testLanguageSet().mjava","sourceNew":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testLanguageSet() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"languageSet\", \"polish\");\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDmbYrk\", \"vDmbirk\", \"vambYrk\", \"vambirk\", \"vimbYrk\", \"vimbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","5a1a22b1ad88b436661458df567f3fdb446392a4"],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}