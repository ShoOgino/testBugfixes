{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","commits":[{"id":"d3f699a0385c570813a47bfb4d09035dfd11a651","date":1359988216,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = FieldCache.DEFAULT.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    AtomicReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new TextField(\"dv\", \"some text\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"dv\", 0L));\n    writer.addDocument(doc);\n    \n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    LeafReader subR = r.leaves().get(0).reader();\n    assertEquals(2, subR.numDocs());\n\n    Bits bits = DocValues.getDocsWithField(subR, \"dv\");\n    assertTrue(bits.get(0));\n    assertTrue(bits.get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3f699a0385c570813a47bfb4d09035dfd11a651":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3f699a0385c570813a47bfb4d09035dfd11a651"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d3f699a0385c570813a47bfb4d09035dfd11a651":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f699a0385c570813a47bfb4d09035dfd11a651","d4d69c535930b5cce125cff868d40f6373dc27d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}