{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#writeValuesMultipleBlocks(SortedNumericDocValues,long).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#writeValuesMultipleBlocks(SortedNumericDocValues,long).mjava","pathOld":"/dev/null","sourceNew":"  // Returns the offset to the jump-table for vBPV\n  private long writeValuesMultipleBlocks(SortedNumericDocValues values, long gcd) throws IOException {\n    long[] offsets = new long[ArrayUtil.oversize(1, Long.BYTES)];\n    int offsetsIndex = 0;\n    final long[] buffer = new long[NUMERIC_BLOCK_SIZE];\n    final ByteBuffersDataOutput encodeBuffer = ByteBuffersDataOutput.newResettableInstance();\n    int upTo = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n        buffer[upTo++] = values.nextValue();\n        if (upTo == NUMERIC_BLOCK_SIZE) {\n          offsets = ArrayUtil.grow(offsets, offsetsIndex+1);\n          offsets[offsetsIndex++] = data.getFilePointer();\n          writeBlock(buffer, NUMERIC_BLOCK_SIZE, gcd, encodeBuffer);\n          upTo = 0;\n        }\n      }\n    }\n    if (upTo > 0) {\n      offsets = ArrayUtil.grow(offsets, offsetsIndex+1);\n      offsets[offsetsIndex++] = data.getFilePointer();\n      writeBlock(buffer, upTo, gcd, encodeBuffer);\n    }\n\n    // All blocks has been written. Flush the offset jump-table\n    final long offsetsOrigo = data.getFilePointer();\n    for (int i = 0 ; i < offsetsIndex ; i++) {\n      data.writeLong(offsets[i]);\n    }\n    data.writeLong(offsetsOrigo);\n    return offsetsOrigo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#writeValuesMultipleBlocks(SortedNumericDocValues,long).mjava","pathOld":"/dev/null","sourceNew":"  // Returns the offset to the jump-table for vBPV\n  private long writeValuesMultipleBlocks(SortedNumericDocValues values, long gcd) throws IOException {\n    long[] offsets = new long[ArrayUtil.oversize(1, Long.BYTES)];\n    int offsetsIndex = 0;\n    final long[] buffer = new long[NUMERIC_BLOCK_SIZE];\n    final ByteBuffersDataOutput encodeBuffer = ByteBuffersDataOutput.newResettableInstance();\n    int upTo = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n        buffer[upTo++] = values.nextValue();\n        if (upTo == NUMERIC_BLOCK_SIZE) {\n          offsets = ArrayUtil.grow(offsets, offsetsIndex+1);\n          offsets[offsetsIndex++] = data.getFilePointer();\n          writeBlock(buffer, NUMERIC_BLOCK_SIZE, gcd, encodeBuffer);\n          upTo = 0;\n        }\n      }\n    }\n    if (upTo > 0) {\n      offsets = ArrayUtil.grow(offsets, offsetsIndex+1);\n      offsets[offsetsIndex++] = data.getFilePointer();\n      writeBlock(buffer, upTo, gcd, encodeBuffer);\n    }\n\n    // All blocks has been written. Flush the offset jump-table\n    final long offsetsOrigo = data.getFilePointer();\n    for (int i = 0 ; i < offsetsIndex ; i++) {\n      data.writeLong(offsets[i]);\n    }\n    data.writeLong(offsetsOrigo);\n    return offsetsOrigo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}