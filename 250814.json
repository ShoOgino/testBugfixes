{"path":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#test().mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    final int iterations = atLeast(100);\n    for (int i = 0; i < iterations; ++i) {\n      final int maxSize = 1 + random().nextInt(100);\n      final int numitems = random().nextInt(500);\n      final int maxitem = 1 + random().nextInt(100);\n      List<Integer> items = new ArrayList<>();\n      FrequencyTrackingRingBuffer<Integer> buffer = new FrequencyTrackingRingBuffer<>(maxSize);\n      for (int j = 0; j < numitems; ++j) {\n        final Integer item = random().nextInt(maxitem);\n        items.add(item);\n        buffer.add(item);\n      }\n      assertBuffer(buffer, maxSize, items);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29fc95de48dc0c0b44cef66830a1f0c6c163ed26","date":1418988133,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#test().mjava","sourceNew":"  public void test() {\n    final int iterations = atLeast(100);\n    for (int i = 0; i < iterations; ++i) {\n      final int maxSize = 2 + random().nextInt(100);\n      final int numitems = random().nextInt(5000);\n      final int maxitem = 1 + random().nextInt(100);\n      List<Integer> items = new ArrayList<>();\n      final int sentinel = random().nextInt(200);\n      FrequencyTrackingRingBuffer buffer = new FrequencyTrackingRingBuffer(maxSize, sentinel);\n      for (int j = 0; j < numitems; ++j) {\n        final Integer item = random().nextInt(maxitem);\n        items.add(item);\n        buffer.add(item);\n      }\n      assertBuffer(buffer, maxSize, sentinel, items);\n    }\n  }\n\n","sourceOld":"  public void test() {\n    final int iterations = atLeast(100);\n    for (int i = 0; i < iterations; ++i) {\n      final int maxSize = 1 + random().nextInt(100);\n      final int numitems = random().nextInt(500);\n      final int maxitem = 1 + random().nextInt(100);\n      List<Integer> items = new ArrayList<>();\n      FrequencyTrackingRingBuffer<Integer> buffer = new FrequencyTrackingRingBuffer<>(maxSize);\n      for (int j = 0; j < numitems; ++j) {\n        final Integer item = random().nextInt(maxitem);\n        items.add(item);\n        buffer.add(item);\n      }\n      assertBuffer(buffer, maxSize, items);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"]},"commit2Childs":{"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}