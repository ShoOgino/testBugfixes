{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#findEmptyLocation(BlockCacheLocation).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#findEmptyLocation(BlockCacheLocation).mjava","pathOld":"/dev/null","sourceNew":"  private boolean findEmptyLocation(BlockCacheLocation location) {\n    // This is a tight loop that will try and find a location to\n    // place the block before giving up\n    for (int j = 0; j < 10; j++) {\n      OUTER: for (int bankId = 0; bankId < banks.length; bankId++) {\n        AtomicInteger bitSetCounter = lockCounters[bankId];\n        BlockLocks bitSet = locks[bankId];\n        if (bitSetCounter.get() == numberOfBlocksPerBank) {\n          // if bitset is full\n          continue OUTER;\n        }\n        // this check needs to spin, if a lock was attempted but not obtained\n        // the rest of the bank should not be skipped\n        int bit = bitSet.nextClearBit(0);\n        INNER: while (bit != -1) {\n          if (bit >= numberOfBlocksPerBank) {\n            // bit set is full\n            continue OUTER;\n          }\n          if (!bitSet.set(bit)) {\n            // lock was not obtained\n            // this restarts at 0 because another block could have been unlocked\n            // while this was executing\n            bit = bitSet.nextClearBit(0);\n            continue INNER;\n          } else {\n            // lock obtained\n            location.setBankId(bankId);\n            location.setBlock(bit);\n            bitSetCounter.incrementAndGet();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#findEmptyLocation(BlockCacheLocation).mjava","pathOld":"/dev/null","sourceNew":"  private boolean findEmptyLocation(BlockCacheLocation location) {\n    // This is a tight loop that will try and find a location to\n    // place the block before giving up\n    for (int j = 0; j < 10; j++) {\n      OUTER: for (int bankId = 0; bankId < banks.length; bankId++) {\n        AtomicInteger bitSetCounter = lockCounters[bankId];\n        BlockLocks bitSet = locks[bankId];\n        if (bitSetCounter.get() == numberOfBlocksPerBank) {\n          // if bitset is full\n          continue OUTER;\n        }\n        // this check needs to spin, if a lock was attempted but not obtained\n        // the rest of the bank should not be skipped\n        int bit = bitSet.nextClearBit(0);\n        INNER: while (bit != -1) {\n          if (bit >= numberOfBlocksPerBank) {\n            // bit set is full\n            continue OUTER;\n          }\n          if (!bitSet.set(bit)) {\n            // lock was not obtained\n            // this restarts at 0 because another block could have been unlocked\n            // while this was executing\n            bit = bitSet.nextClearBit(0);\n            continue INNER;\n          } else {\n            // lock obtained\n            location.setBankId(bankId);\n            location.setBlock(bit);\n            bitSetCounter.incrementAndGet();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}