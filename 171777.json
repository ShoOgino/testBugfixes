{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg) {\n    try {\n      Clause.validate(name, val, true);\n      fail(\"expected exception containing \" + msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg) {\n    Exception e = expectThrows(Exception.class, () -> Clause.validate(name, val, true));\n    assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg) {\n    try {\n      Clause.validate(name, val, true);\n      fail(\"expected exception containing \" + msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg) {\n    Exception e = expectThrows(Exception.class, () -> Clause.validate(name, val, true));\n    assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg) {\n    try {\n      Clause.validate(name, val, true);\n      fail(\"expected exception containing \" + msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg) {\n    Exception e = expectThrows(Exception.class, () -> Clause.validate(name, val, true));\n    assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg) {\n    try {\n      Clause.validate(name, val, true);\n      fail(\"expected exception containing \" + msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":null,"sourceOld":"  private static void expectError(String name, Object val, String msg) {\n    Exception e = expectThrows(Exception.class, () -> Clause.validate(name, val, true));\n    assertTrue(\"expected exception containing \" + msg, e.getMessage().contains(msg));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"3f504512a03d978990cbff30db0522b354e846db":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["28288370235ed02234a64753cdbf0c6ec096304a"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["9f0e33082a86447f4f2b59a1a5f69a310500276a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["3f504512a03d978990cbff30db0522b354e846db","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"28288370235ed02234a64753cdbf0c6ec096304a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}