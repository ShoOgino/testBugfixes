{"path":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","commits":[{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,SortComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, SortComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}