{"path":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","commits":[{"id":"33adea025f43af3243278587a46b8d9fd2e8ccf9","date":1525885077,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"/dev/null","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(1, deletes.numPendingDeletes());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8","date":1535113998,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testResetOnUpdate().mjava","sourceNew":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","sourceOld":"  public void testResetOnUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        .setMaxBufferedDocs(3) // make sure we write one segment\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingDeletes deletes = newPendingDeletes(segmentInfo);\n    deletes.onNewReader(segmentReader, segmentInfo);\n    FieldInfo fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    List<DocValuesFieldUpdates> updates = Arrays.asList(singleUpdate(Arrays.asList(0, 1, DocIdSetIterator.NO_MORE_DOCS), 3, false));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    assertEquals(0, deletes.numPendingDeletes());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    Bits liveDocs = deletes.getLiveDocs();\n    deletes.onNewReader(segmentReader, segmentInfo);\n    // no changes we keep this update\n    assertSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertTrue(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n\n    segmentInfo.advanceDocValuesGen();\n    fieldInfo = new FieldInfo(\"_soft_deletes\", 1, false, false, false, IndexOptions.NONE, DocValuesType.NUMERIC, segmentInfo.getNextDocValuesGen(), Collections.emptyMap(), 0, 0, true);\n    updates = Arrays.asList(singleUpdate(Arrays.asList(1, DocIdSetIterator.NO_MORE_DOCS), 3, true));\n    for (DocValuesFieldUpdates update : updates) {\n      deletes.onDocValuesUpdate(fieldInfo, update.iterator());\n    }\n    // no changes we keep this update\n    assertNotSame(liveDocs, deletes.getLiveDocs());\n    assertTrue(deletes.getLiveDocs().get(0));\n    assertFalse(deletes.getLiveDocs().get(1));\n    assertTrue(deletes.getLiveDocs().get(2));\n    assertEquals(0, deletes.numPendingDeletes());\n    assertEquals(1, deletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["33adea025f43af3243278587a46b8d9fd2e8ccf9","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","b3f926ac330be2198e6be3ace82e76b8c3a3b2c8","f592209545c71895260367152601e9200399776d"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["f6652c943595e92c187ee904c382863013eae28f"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}