{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eceee20589caeb7460b16920df2a241d3e801b90","date":1583215654,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      // we can filter points when:\n      if (isVertexEquals(node, nextNode)  ||   // 1. they are the same,\n          isVertexEquals(prevNode, nextNode) || // 2.- each one starts and ends in each other\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon && // 3.- they are co-linear and both edges have the same value in .isNextEdgeFromPolygon\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        boolean nextEdgeFromPol = prevNode.isNextEdgeFromPolygon != node.isNextEdgeFromPolygon ? true : prevNode.isNextEdgeFromPolygon;\n        removeNode(node, nextEdgeFromPol);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","bugFix":["5ed90f8ba7e7be13d155f954862178b23a324125"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eceee20589caeb7460b16920df2a241d3e801b90":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eceee20589caeb7460b16920df2a241d3e801b90"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["eceee20589caeb7460b16920df2a241d3e801b90"],"eceee20589caeb7460b16920df2a241d3e801b90":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}