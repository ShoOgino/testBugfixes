{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newInetAddressExact(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newInetAddressPrefix(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0a21baa7591e89ae2649015a5a3db64cbe87a73","date":1456346302,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":null,"sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"<field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"<field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","date":1456349953,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":null,"sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2666c8ef916fe551b88266a876c0320db0683dd","date":1456397478,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:1.2.3.4>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"::FFFF:1.2.3.4\")).toString());\n    assertEquals(\"InetAddressPoint <field:[fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c]>\", new InetAddressPoint(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n    \n    assertEquals(\"field:[1.2.3.4 TO 1.2.3.4]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"1.2.3.4\")).toString());\n    assertEquals(\"field:[0:0:0:0:0:0:0:1 TO 0:0:0:0:0:0:0:1]\", InetAddressPoint.newExactQuery(\"field\", InetAddress.getByName(\"::1\")).toString());\n    \n    assertEquals(\"field:[1.2.3.0 TO 1.2.3.255]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"1.2.3.4\"), 24).toString());\n    assertEquals(\"field:[fdc8:57ed:f042:ad1:0:0:0:0 TO fdc8:57ed:f042:ad1:ffff:ffff:ffff:ffff]\", InetAddressPoint.newPrefixQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\"), 64).toString());\n    assertEquals(\"field:{fdc8:57ed:f042:ad1:f66d:4ff:fe90:ce0c}\", InetAddressPoint.newSetQuery(\"field\", InetAddress.getByName(\"fdc8:57ed:f042:0ad1:f66d:4ff:fe90:ce0c\")).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["dd4aa10c3623b9da92a555b8d04677af8fe86877"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","d2666c8ef916fe551b88266a876c0320db0683dd"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["dd4aa10c3623b9da92a555b8d04677af8fe86877","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"d2666c8ef916fe551b88266a876c0320db0683dd":["b9ccce763ea3c7e51eff749e584c061d8744b72d"]},"commit2Childs":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["d2666c8ef916fe551b88266a876c0320db0683dd"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"d2666c8ef916fe551b88266a876c0320db0683dd":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}