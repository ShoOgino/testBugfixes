{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushPolicySetup().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushPolicySetup().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlushPolicySetup() throws IOException {\n    Directory dir = newDirectory();\n    FlushByRamOrCountsPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(10);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    double maxMB = 1.0 + Math.ceil(random.nextDouble());\n    iwc.setRAMBufferSizeMB(maxMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertEquals((long) (maxMB * 1024. * 1024. * 2.),\n        flushPolicy.getMaxNetBytes());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushPolicySetup().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushPolicySetup().mjava","sourceNew":"  public void testFlushPolicySetup() throws IOException {\n    Directory dir = newDirectory();\n    FlushByRamOrCountsPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(10);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    double maxMB = 1.0 + Math.ceil(random.nextDouble());\n    iwc.setRAMBufferSizeMB(maxMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertEquals((long) (maxMB * 1024. * 1024. * 2.),\n        flushPolicy.getMaxNetBytes());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFlushPolicySetup() throws IOException {\n    Directory dir = newDirectory();\n    FlushByRamOrCountsPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(10);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    double maxMB = 1.0 + Math.ceil(random.nextDouble());\n    iwc.setRAMBufferSizeMB(maxMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertEquals((long) (maxMB * 1024. * 1024. * 2.),\n        flushPolicy.getMaxNetBytes());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushPolicySetup().mjava","sourceNew":null,"sourceOld":"  public void testFlushPolicySetup() throws IOException {\n    Directory dir = newDirectory();\n    FlushByRamOrCountsPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(10);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    double maxMB = 1.0 + Math.ceil(random.nextDouble());\n    iwc.setRAMBufferSizeMB(maxMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertEquals((long) (maxMB * 1024. * 1024. * 2.),\n        flushPolicy.getMaxNetBytes());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["962d04139994fce5193143ef35615499a9a96d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"962d04139994fce5193143ef35615499a9a96d78":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["962d04139994fce5193143ef35615499a9a96d78"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}