{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","commits":[{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<IndexableField>();\n        List<StorableField> storedList = new ArrayList<StorableField>();\n        \n        @Override\n        public Iterable<? extends IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<? extends StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<IndexableField>();\n        List<StorableField> storedList = new ArrayList<StorableField>();\n        \n        @Override\n        public Iterable<? extends IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<? extends StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"286d87eabbc79863e93070d6126d558a2ca0fb28","date":1352063339,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<IndexableField>();\n        List<StorableField> storedList = new ArrayList<StorableField>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<IndexableField>();\n        List<StorableField> storedList = new ArrayList<StorableField>();\n        \n        @Override\n        public Iterable<? extends IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<? extends StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<IndexableField>();\n        List<StorableField> storedList = new ArrayList<StorableField>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      IndexDocument docList = new IndexDocument() {\n        \n        List<IndexableField> list = new ArrayList<>();\n        List<StorableField> storedList = new ArrayList<>();\n        \n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          if (list.size() == 0) {\n            list.add(new IndexableField() {\n              @Override\n              public String name() {\n                return \"foo\";\n              }\n\n              @Override\n              public IndexableFieldType fieldType() {\n                return StringField.TYPE_NOT_STORED;\n              }\n\n              @Override\n              public float boost() {\n                return 5f;\n              }\n\n              @Override\n              public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) throws IOException {\n                return null;\n              }\n            });\n          }\n          return list;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return storedList;\n        }\n        \n      };\n      iw.addDocument(docList);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b35a5b70dfb7617f799444beea32ac58a2d14f","date":1453716281,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    expectThrows(UnsupportedOperationException.class, () -> {\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n    });\n\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["3a3635dad24b0681f0088f2ef680456482cdb451"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","sourceNew":null,"sourceOld":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    expectThrows(UnsupportedOperationException.class, () -> {\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<>();\n      list.add(new IndexableField() {\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n    });\n\n    DirectoryReader ir = DirectoryReader.open(iw);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["286d87eabbc79863e93070d6126d558a2ca0fb28"],"286d87eabbc79863e93070d6126d558a2ca0fb28":["1d028314cced5858683a1bb4741423d0f934257b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["2a1862266772deb28cdcb7d996b64d2177022687","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"05fe562aa248790944d43cdd478f512572835ba0":["d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a3635dad24b0681f0088f2ef680456482cdb451"],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["2a1862266772deb28cdcb7d996b64d2177022687"],"3a3635dad24b0681f0088f2ef680456482cdb451":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["3a3635dad24b0681f0088f2ef680456482cdb451","409324b31a1419d7c05a38211168cf317e39be77"],"2a1862266772deb28cdcb7d996b64d2177022687":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a3635dad24b0681f0088f2ef680456482cdb451"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acd9883560fd89e6448b2b447302fe543040cd4f":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"286d87eabbc79863e93070d6126d558a2ca0fb28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["acd9883560fd89e6448b2b447302fe543040cd4f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","05fe562aa248790944d43cdd478f512572835ba0"],"3a3635dad24b0681f0088f2ef680456482cdb451":["8fd5be977c105554c6a7b68afcdbc511439723ab","1d028314cced5858683a1bb4741423d0f934257b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"1d028314cced5858683a1bb4741423d0f934257b":["286d87eabbc79863e93070d6126d558a2ca0fb28"],"2a1862266772deb28cdcb7d996b64d2177022687":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3a3635dad24b0681f0088f2ef680456482cdb451","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["409324b31a1419d7c05a38211168cf317e39be77"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}