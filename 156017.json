{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}