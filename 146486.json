{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","commits":[{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08ca4cb3a06ab34530f0eca7cf4644621635968","date":1481597010,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":["4c630823e52a651e16e3a73743e11465ac856eed","54bb8da55080e4569804e0661b83a3c72cbd8d4d","28fc571bd8818afd7de714d775f89b3db6f6686c","85032ab568b3f50eabd577aaa994ba197db93758"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromDescriptor(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore createFromDescriptor(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromDescriptor(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore createFromDescriptor(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromDescriptor(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore createFromDescriptor(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCoreDescriptor(this, dcore);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      dcore.setConfigSetTrusted(coreConfig.isTrusted());\n      log.info(\"Creating SolrCore '{}' using configuration from {}, trusted={}\", dcore.getName(), coreConfig.getName(), dcore.isConfigSetTrusted());\n      try {\n        core = new SolrCore(this, dcore, coreConfig);\n      } catch (SolrException e) {\n        core = processCoreCreateException(e, dcore, coreConfig);\n      }\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore, core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      solrCores.removeCoreDescriptor(dcore);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3732e34f27916e98704736cc6924a34fffca249a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d528fd7ae22865015b756e0a03832e2051de2a9c"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["9856095f7afb5a607bf5e65077615ed91273508c","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"f08ca4cb3a06ab34530f0eca7cf4644621635968":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"d301cb76d81de80d07b44735622a04d49ed938eb":["28288370235ed02234a64753cdbf0c6ec096304a","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f08ca4cb3a06ab34530f0eca7cf4644621635968"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"3732e34f27916e98704736cc6924a34fffca249a":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["f08ca4cb3a06ab34530f0eca7cf4644621635968"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d301cb76d81de80d07b44735622a04d49ed938eb"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"30c8e5574b55d57947e989443dfde611646530ee":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f08ca4cb3a06ab34530f0eca7cf4644621635968"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"f08ca4cb3a06ab34530f0eca7cf4644621635968":["9856095f7afb5a607bf5e65077615ed91273508c","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"d301cb76d81de80d07b44735622a04d49ed938eb":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"3732e34f27916e98704736cc6924a34fffca249a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}