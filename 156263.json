{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","commits":[{"id":"dd6bbc7bb83faaa41918157227a3048310685b35","date":1172960487,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Collection).mjava","sourceNew":"  public void writeArray(String name, Iterator val) throws IOException {\n    writer.write('[');\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writer.write(',');\n      }\n      first=false;\n    }\n    decLevel();\n    writer.write(']');\n  }\n\n","sourceOld":"  public void writeArray(String name, Collection val) throws IOException {\n    writer.write('[');\n    int sz = val.size();\n    incLevel();\n    boolean first=true;\n    for (Object o : val) {\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      if (sz>1) indent();\n      writeVal(null, o);\n    }\n    decLevel();\n    writer.write(']');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13baf5514709a27de4ff67151d35b715138d158d","date":1186803122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  public void writeArray(String name, Iterator val) throws IOException {\n    writer.write('[');\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writer.write(',');\n      }\n      first=false;\n    }\n    decLevel();\n    writer.write(']');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13baf5514709a27de4ff67151d35b715138d158d":["dd6bbc7bb83faaa41918157227a3048310685b35"],"dd6bbc7bb83faaa41918157227a3048310685b35":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["13baf5514709a27de4ff67151d35b715138d158d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13baf5514709a27de4ff67151d35b715138d158d":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"dd6bbc7bb83faaa41918157227a3048310685b35":["13baf5514709a27de4ff67151d35b715138d158d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dd6bbc7bb83faaa41918157227a3048310685b35"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}