{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","commits":[{"id":"b50e78d06f282e14c7918c600c1f098b14171ead","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f178856a67334a68c3ebdce4ce88deb96881e750","date":1462492247,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2233462ade0e629affa69a6f1e8d0205e4d6e596","date":1462534852,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testRandomStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(collection1, q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 5);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 5);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a5a00236471b1e5f3c75017adb632328e120c3","date":1483544009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\" );\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\" );\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\" );\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\" );\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = new Integer(idx).toString();\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1000);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1000);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1000);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1000);\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f","date":1576114640,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).getFields();\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).fields;\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRandomStream().mjava","sourceNew":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      @SuppressWarnings({\"rawtypes\"})\n      Map fields = tuples4.get(0).getFields();\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomStream() throws Exception {\n\n    UpdateRequest update = new UpdateRequest();\n    for(int idx = 0; idx < 1000; ++idx){\n      String idxString = Integer.toString(idx);\n      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n    }\n    update.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"random\", RandomFacadeStream.class);\n\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      context.setSolrClientCache(cache);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples1 = getTuples(stream);\n      assert (tuples1.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples2 = getTuples(stream);\n      assert (tuples2.size() == 1000);\n\n\n      boolean different = false;\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples1, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples2, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples1.size(); i++) {\n        Tuple tuple1 = tuples1.get(i);\n        Tuple tuple2 = tuples2.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples3 = getTuples(stream);\n      assert (tuples3.size() == 1);\n\n      //Exercise the DeepRandomStream with higher rows\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples10 = getTuples(stream);\n      assert (tuples10.size() == 1000);\n\n      expression = StreamExpressionParser.parse(\"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"10001\\\", fl=\\\"id, a_i\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(context);\n      List<Tuple> tuples11 = getTuples(stream);\n      assert (tuples11.size() == 1000);\n\n      different = false;\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          different = true;\n          break;\n        }\n      }\n\n      assertTrue(different);\n\n      Collections.sort(tuples10, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n      Collections.sort(tuples11, new FieldComparator(\"id\", ComparatorOrder.ASCENDING));\n\n      for (int i = 0; i < tuples10.size(); i++) {\n        Tuple tuple1 = tuples10.get(i);\n        Tuple tuple2 = tuples11.get(i);\n        if (!tuple1.get(\"id\").equals(tuple2.get(id))) {\n          assert(tuple1.getLong(\"id\").equals(tuple2.get(\"a_i\")));\n        }\n      }\n\n\n\n      //Exercise the /stream handler\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \", q=\\\"*:*\\\", rows=\\\"1\\\", fl=\\\"id, a_i\\\")\");\n      JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      List<Tuple> tuples4 = getTuples(solrStream);\n      assert (tuples4.size() == 1);\n      //Assert no x-axis\n      assertNull(tuples4.get(0).get(\"x\"));\n\n\n      sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\"));\n      sParams.add(\"expr\", \"random(\" + COLLECTIONORALIAS + \")\");\n      jetty = cluster.getJettySolrRunner(0);\n      solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n      tuples4 = getTuples(solrStream);\n      assert(tuples4.size() == 500);\n      Map fields = tuples4.get(0).getFields();\n      assert(fields.containsKey(\"id\"));\n      assert(fields.containsKey(\"a_f\"));\n      assert(fields.containsKey(\"a_i\"));\n      assert(fields.containsKey(\"a_s\"));\n      //Assert the x-axis:\n      for(int i=0; i<tuples4.size(); i++) {\n        assertEquals(tuples4.get(i).getLong(\"x\").longValue(), i);\n      }\n\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["02a5a00236471b1e5f3c75017adb632328e120c3"],"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["02a5a00236471b1e5f3c75017adb632328e120c3"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["73450c0955930295d34703e7ddbfc6973b7a121a","f178856a67334a68c3ebdce4ce88deb96881e750"],"df724d84dab24a0cc54bec95a8680867adc7f171":["7107555998ea86d6f61e2ad770687d674fa8e012","1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f"],"f178856a67334a68c3ebdce4ce88deb96881e750":["73450c0955930295d34703e7ddbfc6973b7a121a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b50e78d06f282e14c7918c600c1f098b14171ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fa0fff8102ba352427001188190711b7295a1c2":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["0e15955b4980562a0c1c81d08654904f3fadb83b","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["628903f37b6c442da0d390db1c6af9a0e74d41a7","6fa0fff8102ba352427001188190711b7295a1c2"],"8c969f15cd04d31e520319c619a445ae21f02d72":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","02a5a00236471b1e5f3c75017adb632328e120c3"],"9ba1b632c041956c93c41aa1143d16a567014891":["804a8d5358fe7b7563b85ee7838714d720b89272"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["6fa0fff8102ba352427001188190711b7295a1c2"],"02a5a00236471b1e5f3c75017adb632328e120c3":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["0e15955b4980562a0c1c81d08654904f3fadb83b","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["0e15955b4980562a0c1c81d08654904f3fadb83b","b940572a59da1b42b6c20ab5278155b12816807a"],"7107555998ea86d6f61e2ad770687d674fa8e012":["6fa0fff8102ba352427001188190711b7295a1c2","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b50e78d06f282e14c7918c600c1f098b14171ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f":["df724d84dab24a0cc54bec95a8680867adc7f171","804a8d5358fe7b7563b85ee7838714d720b89272"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"f178856a67334a68c3ebdce4ce88deb96881e750":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b50e78d06f282e14c7918c600c1f098b14171ead":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"6fa0fff8102ba352427001188190711b7295a1c2":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b50e78d06f282e14c7918c600c1f098b14171ead","0e15955b4980562a0c1c81d08654904f3fadb83b"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["02a5a00236471b1e5f3c75017adb632328e120c3","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"804a8d5358fe7b7563b85ee7838714d720b89272":["9ba1b632c041956c93c41aa1143d16a567014891"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[],"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02a5a00236471b1e5f3c75017adb632328e120c3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f","7107555998ea86d6f61e2ad770687d674fa8e012"],"73450c0955930295d34703e7ddbfc6973b7a121a":["2233462ade0e629affa69a6f1e8d0205e4d6e596","f178856a67334a68c3ebdce4ce88deb96881e750"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7107555998ea86d6f61e2ad770687d674fa8e012":["df724d84dab24a0cc54bec95a8680867adc7f171"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","df724d84dab24a0cc54bec95a8680867adc7f171","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","58af973abe9f7c0faa777c1a6285fc7f72c171c5","491c9672ec42582fe43960452dbd37f1c80fe0f0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}