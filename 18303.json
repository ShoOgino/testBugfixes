{"path":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","commits":[{"id":"ac1242ce6d99813874fddfe4ca5f57779beddb22","date":1204500247,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      return false;\n    } else\n      return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d","date":1210334686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","sourceNew":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","sourceOld":"  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      return false;\n    } else\n      return true;\n  }\n\n","bugFix":null,"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902","date":1220978058,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","sourceNew":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n\n    //TODO: fix this\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","sourceOld":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","bugFix":null,"bugIntro":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7391c1f4ab1a6817de8a262f5c1b3de3cf190785","date":1222335791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","sourceNew":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","sourceOld":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex.out = new PrintStream(bos);\n\n    //TODO: fix this\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","bugFix":["ac1242ce6d99813874fddfe4ca5f57779beddb22","cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/util/_TestUtil#checkIndex(Directory).mjava","sourceNew":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","sourceOld":"  /** This runs the CheckIndex tool on the index in.  If any\n   *  issues are hit, a RuntimeException is thrown; else,\n   *  true is returned. */\n  public static boolean checkIndex(Directory dir) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["ac1242ce6d99813874fddfe4ca5f57779beddb22"],"7391c1f4ab1a6817de8a262f5c1b3de3cf190785":["cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"ac1242ce6d99813874fddfe4ca5f57779beddb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"]},"commit2Childs":{"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac1242ce6d99813874fddfe4ca5f57779beddb22"],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"ac1242ce6d99813874fddfe4ca5f57779beddb22":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"7391c1f4ab1a6817de8a262f5c1b3de3cf190785":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}