{"path":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","commits":[{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"/dev/null","sourceNew":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            fieldsData = b;\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            fieldsData = b;\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"7d7203a8194ca217ec527231120df075e9bec237":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0c804f7aa477229414a7e12882af490c241f64d":["7d7203a8194ca217ec527231120df075e9bec237"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["8a9e385641d717e641408d8fbbc62be8fc766357"],"7d7203a8194ca217ec527231120df075e9bec237":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d7203a8194ca217ec527231120df075e9bec237"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}