{"path":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","commits":[{"id":"cb28d79732042ac28cd68a04bcb1b6584c18d8c9","date":1462314713,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory using {@link buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9747d623c9ef9199fd77dc93059a05c02546da05","date":1462325252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","sourceNew":"  /**\n   * Returns an SslContextFactory using {@link #buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory using {@link buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory using {@link #buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory using {@link #buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#createContextFactory().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an SslContextFactory using {@link #buildServerSSLContext} if SSL should be used, else returns null.\n   */\n  @Override\n  public SslContextFactory createContextFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    // else...\n\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    try {\n      factory.setSslContext(buildServerSSLContext());\n    } catch (Exception e) { \n      throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e); \n    }\n    factory.setNeedClientAuth(isClientAuthMode());\n    return factory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["73450c0955930295d34703e7ddbfc6973b7a121a"],"9747d623c9ef9199fd77dc93059a05c02546da05":["cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9747d623c9ef9199fd77dc93059a05c02546da05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9747d623c9ef9199fd77dc93059a05c02546da05"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9747d623c9ef9199fd77dc93059a05c02546da05":["73450c0955930295d34703e7ddbfc6973b7a121a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"73450c0955930295d34703e7ddbfc6973b7a121a":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","cb28d79732042ac28cd68a04bcb1b6584c18d8c9","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["9747d623c9ef9199fd77dc93059a05c02546da05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}