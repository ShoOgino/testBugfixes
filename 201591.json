{"path":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator();\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator();\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator();\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator();\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator(null);\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator();\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59fc0e55b44c555c39d950def9414b5596c6ebe2","date":1327620010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator(null);\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator(null);\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicIndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator(null);\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["3cc749c053615f5871f3b95715fe292f34e70a53","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["3cc749c053615f5871f3b95715fe292f34e70a53","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["59fc0e55b44c555c39d950def9414b5596c6ebe2","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}