{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = BytesRef.HASH_PRIME * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = BytesRef.HASH_PRIME * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e115952d3c9f23ec56add53355123cc50f5d67e","date":1322315783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = BytesRef.HASH_PRIME * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e115952d3c9f23ec56add53355123cc50f5d67e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"1e115952d3c9f23ec56add53355123cc50f5d67e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1e115952d3c9f23ec56add53355123cc50f5d67e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1e115952d3c9f23ec56add53355123cc50f5d67e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}