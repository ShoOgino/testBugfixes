{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","commits":[{"id":"859b2291aebaa8cffe0ab3f919fc27e980c23999","date":1534305849,"type":0,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","pathOld":"/dev/null","sourceNew":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\";\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(\"EEE MMM d HH:mm:ss z yyyy\", Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-from-extract-contrib\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6383c8f942fbf6f463c167383e952d927aca0","date":1534307117,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","pathOld":"/dev/null","sourceNew":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\";\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(\"EEE MMM d HH:mm:ss z yyyy\", Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-from-extract-contrib\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d591fc1d6ccaf66fbb8ebcbcc27e1ecd91d524cc","date":1534446986,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","sourceNew":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\"; // \"Ansi C\" + timezone\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(\"EEE MMM d HH:mm:ss z yyyy\", Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-from-extract-contrib\");\n\n    // We might also test AKDT, but a bug in Java 9 (not in 8) causes this to fail\n    //assertParsedDate(\"Fri Oct 7 05:14:15 AKDT 2005\", Date.from(inst20051007131415()), \"parse-date-patterns-from-extract-contrib\"); // with timezone (not ANSI C) in DST\n    // see https://bugs.openjdk.java.net/browse/JDK-8189784\n  }\n\n","sourceOld":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\";\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(\"EEE MMM d HH:mm:ss z yyyy\", Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-from-extract-contrib\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c843fa9bddf5f2c12667fc941acd33da03c62a3","date":1535566664,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","sourceNew":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String dateFormat = \"EEE MMM d HH:mm:ss z yyyy\";\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\"; // asctime + timezone1\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    // ensure english locale and root locale return the same date\n    assertEquals(expectTs, DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli(),\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-default-config\");\n\n    // We might also test AKDT, but a bug in Java 9 (not in 8) causes this to fail\n    //assertParsedDate(\"Fri Oct 7 05:14:15 AKDT 2005\", Date.from(inst20051007131415()), \"parse-date-patterns-default-config\"); // with timezone (not asctime) in DST\n    // see https://bugs.openjdk.java.net/browse/JDK-8189784\n  }\n\n","sourceOld":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\"; // \"Ansi C\" + timezone\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(\"EEE MMM d HH:mm:ss z yyyy\", Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-from-extract-contrib\");\n\n    // We might also test AKDT, but a bug in Java 9 (not in 8) causes this to fail\n    //assertParsedDate(\"Fri Oct 7 05:14:15 AKDT 2005\", Date.from(inst20051007131415()), \"parse-date-patterns-from-extract-contrib\"); // with timezone (not ANSI C) in DST\n    // see https://bugs.openjdk.java.net/browse/JDK-8189784\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645","date":1535637223,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testAKSTZone().mjava","sourceNew":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String dateFormat = \"EEE MMM d HH:mm:ss z yyyy\";\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\"; // asctime + timezone1\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    // ensure english locale and root locale return the same date\n    assertEquals(expectTs, DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli(),\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-default-config\");\n\n    // A bug in Java 9 (not in 8) causes this to fail!  (not fixed yet?!)\n    // see https://bugs.openjdk.java.net/browse/JDK-8189784\n    if (System.getProperty(\"java.version\").startsWith(\"1.8.\")) {\n      // with daylight savings time timezone\n      assertParsedDate(\"Fri Oct 7 05:14:15 AKDT 2005\", Date.from(inst20051007131415()), \"parse-date-patterns-default-config\");\n    } else {\n      System.err.println(\"Didn't test AKDT because only Java 1.8 does this right!  This Java version is: \" + System.getProperty(\"java.version\"));\n    }\n  }\n\n","sourceOld":"  // this test has had problems when the JDK timezone is Americas/Metlakatla\n  public void testAKSTZone() throws IOException {\n    final String dateFormat = \"EEE MMM d HH:mm:ss z yyyy\";\n    final String inputString = \"Thu Nov 13 04:35:51 AKST 2008\"; // asctime + timezone1\n\n    final long expectTs = 1226583351000L;\n    assertEquals(expectTs,\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    // ensure english locale and root locale return the same date\n    assertEquals(expectTs, DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli(),\n        DateTimeFormatter.ofPattern(dateFormat, Locale.ENGLISH)\n            .withZone(ZoneId.of(\"UTC\")).parse(inputString, Instant::from).toEpochMilli());\n\n    assertParsedDate(inputString, Date.from(Instant.ofEpochMilli(expectTs)), \"parse-date-patterns-default-config\");\n\n    // We might also test AKDT, but a bug in Java 9 (not in 8) causes this to fail\n    //assertParsedDate(\"Fri Oct 7 05:14:15 AKDT 2005\", Date.from(inst20051007131415()), \"parse-date-patterns-default-config\"); // with timezone (not asctime) in DST\n    // see https://bugs.openjdk.java.net/browse/JDK-8189784\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d591fc1d6ccaf66fbb8ebcbcc27e1ecd91d524cc":["11d6383c8f942fbf6f463c167383e952d927aca0"],"859b2291aebaa8cffe0ab3f919fc27e980c23999":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11d6383c8f942fbf6f463c167383e952d927aca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","859b2291aebaa8cffe0ab3f919fc27e980c23999"],"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645":["2c843fa9bddf5f2c12667fc941acd33da03c62a3"],"2c843fa9bddf5f2c12667fc941acd33da03c62a3":["d591fc1d6ccaf66fbb8ebcbcc27e1ecd91d524cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9fa5ae65c9b6a63d49f8b2bfca43056fc288645"]},"commit2Childs":{"d591fc1d6ccaf66fbb8ebcbcc27e1ecd91d524cc":["2c843fa9bddf5f2c12667fc941acd33da03c62a3"],"859b2291aebaa8cffe0ab3f919fc27e980c23999":["11d6383c8f942fbf6f463c167383e952d927aca0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859b2291aebaa8cffe0ab3f919fc27e980c23999","11d6383c8f942fbf6f463c167383e952d927aca0"],"11d6383c8f942fbf6f463c167383e952d927aca0":["d591fc1d6ccaf66fbb8ebcbcc27e1ecd91d524cc"],"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c843fa9bddf5f2c12667fc941acd33da03c62a3":["a9fa5ae65c9b6a63d49f8b2bfca43056fc288645"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}