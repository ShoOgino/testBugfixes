{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#copy(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton.Builder#copy(LightAutomaton).mjava","sourceNew":"    /** Copies over all states/transitions from other. */\n    public void copy(Automaton other) {\n      int offset = getNumStates();\n      int otherNumStates = other.getNumStates();\n      for(int s=0;s<otherNumStates;s++) {\n        int newState = createState();\n        setAccept(newState, other.isAccept(s));\n      }\n      Transition t = new Transition();\n      for(int s=0;s<otherNumStates;s++) {\n        int count = other.initTransition(s, t);\n        for(int i=0;i<count;i++) {\n          other.getNextTransition(t);\n          addTransition(offset + s, offset + t.dest, t.min, t.max);\n        }\n      }\n    }\n\n","sourceOld":"    /** Copies over all states/transitions from other. */\n    public void copy(LightAutomaton other) {\n      int offset = getNumStates();\n      int otherNumStates = other.getNumStates();\n      for(int s=0;s<otherNumStates;s++) {\n        int newState = createState();\n        setAccept(newState, other.isAccept(s));\n      }\n      Transition t = new Transition();\n      for(int s=0;s<otherNumStates;s++) {\n        int count = other.initTransition(s, t);\n        for(int i=0;i<count;i++) {\n          other.getNextTransition(t);\n          addTransition(offset + s, offset + t.dest, t.min, t.max);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#copy(Automaton).mjava","pathOld":"/dev/null","sourceNew":"    /** Copies over all states/transitions from other. */\n    public void copy(Automaton other) {\n      int offset = getNumStates();\n      int otherNumStates = other.getNumStates();\n      for(int s=0;s<otherNumStates;s++) {\n        int newState = createState();\n        setAccept(newState, other.isAccept(s));\n      }\n      Transition t = new Transition();\n      for(int s=0;s<otherNumStates;s++) {\n        int count = other.initTransition(s, t);\n        for(int i=0;i<count;i++) {\n          other.getNextTransition(t);\n          addTransition(offset + s, offset + t.dest, t.min, t.max);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf14aa4e44c71553ea90d5f57b653b4caaddfd7f","date":1411139053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#copy(Automaton).mjava","sourceNew":"    /** Copies over all states/transitions from other. */\n    public void copy(Automaton other) {\n      int offset = getNumStates();\n      int otherNumStates = other.getNumStates();\n\n      // Copy all states\n      copyStates(other);\n      \n      // Copy all transitions\n      Transition t = new Transition();\n      for(int s=0;s<otherNumStates;s++) {\n        int count = other.initTransition(s, t);\n        for(int i=0;i<count;i++) {\n          other.getNextTransition(t);\n          addTransition(offset + s, offset + t.dest, t.min, t.max);\n        }\n      }\n    }\n\n","sourceOld":"    /** Copies over all states/transitions from other. */\n    public void copy(Automaton other) {\n      int offset = getNumStates();\n      int otherNumStates = other.getNumStates();\n      for(int s=0;s<otherNumStates;s++) {\n        int newState = createState();\n        setAccept(newState, other.isAccept(s));\n      }\n      Transition t = new Transition();\n      for(int s=0;s<otherNumStates;s++) {\n        int count = other.initTransition(s, t);\n        for(int i=0;i<count;i++) {\n          other.getNextTransition(t);\n          addTransition(offset + s, offset + t.dest, t.min, t.max);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf14aa4e44c71553ea90d5f57b653b4caaddfd7f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf14aa4e44c71553ea90d5f57b653b4caaddfd7f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"cf14aa4e44c71553ea90d5f57b653b4caaddfd7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["cf14aa4e44c71553ea90d5f57b653b4caaddfd7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}