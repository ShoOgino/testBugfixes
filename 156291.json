{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptions().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void xxxtestDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void xxxtestDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}