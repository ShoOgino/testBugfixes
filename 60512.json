{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","commits":[{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) return;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } catch (Exception e) {\n          exp.set(e);\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) {\n          }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            if (exp.get() != null) {\n              String msg = \"Parsing failed for xml, url:\" + s + \"rows processed in this xml:\" + count;\n              if (lastRow != null) msg += \"last row in this xml: \" + lastRow;\n              if (ABORT.equals(onError)) {\n                wrapAndThrow(SEVERE, exp.get(), msg);\n              } else if (SKIP.equals(onError)) {\n                wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n              } else {\n                LOG.warn(msg, exp.get());\n              }\n            }\n            return null;\n          }\n          count++;\n          return lastRow = row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String ,Object>> getRowIterator(final Reader data){\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if(isEnd.get()) return ;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) { }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            return null;\n          }\n          return row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198","date":1235539651,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) return;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } catch (Exception e) {\n          exp.set(e);\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) {\n          }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            if (exp.get() != null) {\n              String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n              if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n              if (ABORT.equals(onError)) {\n                wrapAndThrow(SEVERE, exp.get(), msg);\n              } else if (SKIP.equals(onError)) {\n                wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n              } else {\n                LOG.warn(msg, exp.get());\n              }\n            }\n            return null;\n          }\n          count++;\n          return lastRow = row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) return;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } catch (Exception e) {\n          exp.set(e);\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) {\n          }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            if (exp.get() != null) {\n              String msg = \"Parsing failed for xml, url:\" + s + \"rows processed in this xml:\" + count;\n              if (lastRow != null) msg += \"last row in this xml: \" + lastRow;\n              if (ABORT.equals(onError)) {\n                wrapAndThrow(SEVERE, exp.get(), msg);\n              } else if (SKIP.equals(onError)) {\n                wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n              } else {\n                LOG.warn(msg, exp.get());\n              }\n            }\n            return null;\n          }\n          count++;\n          return lastRow = row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b5d20090448d280035afb31f1fd2e67ff43336b","date":1258790174,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) return;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } catch (Exception e) {\n          exp.set(e);\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) {\n          }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            if (exp.get() != null) {\n              String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n              if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n              if (ABORT.equals(onError)) {\n                wrapAndThrow(SEVERE, exp.get(), msg);\n              } else if (SKIP.equals(onError)) {\n                wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n              } else {\n                LOG.warn(msg, exp.get());\n              }\n            }\n            return null;\n          }\n          count++;\n          return lastRow = row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"ad94625fb8d088209f46650c8097196fec67f00c":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}