{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1280741c654e60d3590156727fd5d8daa141efb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1280741c654e60d3590156727fd5d8daa141efb7","date":1420244446,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","bugFix":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride, replicaType);\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createJetty(File,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1280741c654e60d3590156727fd5d8daa141efb7","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["1280741c654e60d3590156727fd5d8daa141efb7"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"],"1280741c654e60d3590156727fd5d8daa141efb7":["9d22d0f5940f155267b250876fa797ff69e8e6e7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["b7605579001505896d48b07160075a5c8b8e128e","1280741c654e60d3590156727fd5d8daa141efb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"1280741c654e60d3590156727fd5d8daa141efb7":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}