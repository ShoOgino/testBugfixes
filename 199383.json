{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","commits":[{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarityProvider().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarityProvider().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarityProvider().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarityProvider().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1291e4568eb7d9463d751627596ef14baf4c1603":["6f7fee42303a18cc146043c96f66491311b345d9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["6f7fee42303a18cc146043c96f66491311b345d9"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","0f3cee3d20b0c786e6fca20539454262e29edcab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"6f7fee42303a18cc146043c96f66491311b345d9":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}