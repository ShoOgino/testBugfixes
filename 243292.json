{"path":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","sourceOld":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","sourceOld":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","sourceOld":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * and the <code>UpdateRequestProcessor</code> returned will be from that \n   * <code>DistributingUpdateProcessorFactory</code>\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get\n      (DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM, \"\");\n    final boolean skipToDistrib = ! distribPhase.trim().isEmpty();\n\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n      if (skipToDistrib \n          && chain[i] instanceof DistributingUpdateProcessorFactory) {\n        break;\n      }\n    }\n    return last;\n  }\n\n","sourceOld":"  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n    return last;\n  }\n\n","bugFix":null,"bugIntro":["3b39b0a814742154cd8171fc42aa5999019a4179"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b39b0a814742154cd8171fc42aa5999019a4179","date":1356923156,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof LogUpdateProcessorFactory)) {    // TODO: use a marker interface for this?\n          // skip anything that is not the log factory\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * and the <code>UpdateRequestProcessor</code> returned will be from that \n   * <code>DistributingUpdateProcessorFactory</code>\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get\n      (DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM, \"\");\n    final boolean skipToDistrib = ! distribPhase.trim().isEmpty();\n\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n      if (skipToDistrib \n          && chain[i] instanceof DistributingUpdateProcessorFactory) {\n        break;\n      }\n    }\n    return last;\n  }\n\n","bugFix":["d656bfb8102419b4568f368a9606efc4f059912e","e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof LogUpdateProcessorFactory)) {    // TODO: use a marker interface for this?\n          // skip anything that is not the log factory\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * and the <code>UpdateRequestProcessor</code> returned will be from that \n   * <code>DistributingUpdateProcessorFactory</code>\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get\n      (DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM, \"\");\n    final boolean skipToDistrib = ! distribPhase.trim().isEmpty();\n\n    for (int i = chain.length-1; i>=0; i--) {\n      processor = chain[i].getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n      if (skipToDistrib \n          && chain[i] instanceof DistributingUpdateProcessorFactory) {\n        break;\n      }\n    }\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc04e7d5cfaa61915e8bba4663e0aceac6e12008","date":1382964785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof LogUpdateProcessorFactory)) {    // TODO: use a marker interface for this?\n          // skip anything that is not the log factory\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.size() - 1; i >= 0; i--) {\n      UpdateRequestProcessorFactory factory = chain.get(i);\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.size() - 1; i >= 0; i--) {\n      UpdateRequestProcessorFactory factory = chain.get(i);\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.length-1; i>=0; i--) {\n      UpdateRequestProcessorFactory factory = chain[i];\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5fe1ea1e20c7450be523c41001a625ea3c15f5","date":1547007782,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#createProcessor(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) {\n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    return createProcessor(req, rsp, skipToDistrib, null);\n  }\n\n","sourceOld":"  /**\n   * Uses the factories in this chain to creates a new \n   * <code>UpdateRequestProcessor</code> instance specific for this request.  \n   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is \n   * non-blank, then any factory in this chain prior to the instance of \n   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, \n   * except for the log update processor factory.\n   *\n   * @see UpdateRequestProcessorFactory#getInstance\n   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM\n   */\n  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, \n                                                SolrQueryResponse rsp) \n  {\n    UpdateRequestProcessor processor = null;\n    UpdateRequestProcessor last = null;\n    \n    final String distribPhase = req.getParams().get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    final boolean skipToDistrib = distribPhase != null;\n    boolean afterDistrib = true;  // we iterate backwards, so true to start\n\n    for (int i = chain.size() - 1; i >= 0; i--) {\n      UpdateRequestProcessorFactory factory = chain.get(i);\n\n      if (skipToDistrib) {\n        if (afterDistrib) {\n          if (factory instanceof DistributingUpdateProcessorFactory) {\n            afterDistrib = false;\n          }\n        } else if (!(factory instanceof UpdateRequestProcessorFactory.RunAlways)) {\n          // skip anything that doesn't have the marker interface\n          continue;\n        }\n      }\n\n      processor = factory.getInstance(req, rsp, last);\n      last = processor == null ? last : processor;\n    }\n\n    return last;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["dc04e7d5cfaa61915e8bba4663e0aceac6e12008"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e2fe35ac47f8f51356d6c1724455d18f31c94fae","3b39b0a814742154cd8171fc42aa5999019a4179"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dc04e7d5cfaa61915e8bba4663e0aceac6e12008","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc04e7d5cfaa61915e8bba4663e0aceac6e12008":["3b39b0a814742154cd8171fc42aa5999019a4179"],"3b39b0a814742154cd8171fc42aa5999019a4179":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb5fe1ea1e20c7450be523c41001a625ea3c15f5"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fb5fe1ea1e20c7450be523c41001a625ea3c15f5"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"dc04e7d5cfaa61915e8bba4663e0aceac6e12008":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3b39b0a814742154cd8171fc42aa5999019a4179":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","dc04e7d5cfaa61915e8bba4663e0aceac6e12008"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3b39b0a814742154cd8171fc42aa5999019a4179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}