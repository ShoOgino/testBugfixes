{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedNearIntervals().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedNearIntervals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedNearIntervals().mjava","sourceNew":"  public void testUnorderedNearIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"hot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n            {},\n            { 0, 2, 2, 3, 6, 17 },\n            { 3, 5, 5, 6, 6, 21 },\n            { 3, 7 },\n            { 0, 2, 2, 3, 6, 17 },\n            {}\n        });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 2, 3, 15, 25);\n    assertMatch(mi, 6, 17, 41, 99);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 6, 6, 41, 46);\n    assertMatch(sub, 17, 17, 96, 99);\n    assertFalse(sub.next());\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        1, 0, 10\n    });\n\n    assertEquals(2, source.minExtent());\n  }\n\n","sourceOld":"  public void testUnorderedNearIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"hot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n            {},\n            { 0, 2, 2, 3, 6, 17 },\n            { 3, 5, 5, 6, 6, 21 },\n            { 3, 7 },\n            { 0, 2, 2, 3, 6, 17 },\n            {}\n        });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 2, 3, 15, 25);\n    assertMatch(mi, 6, 17, 41, 99);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 6, 6, 41, 46);\n    assertMatch(sub, 17, 17, 96, 99);\n    assertFalse(sub.next());\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        1, 0, 10\n    });\n\n    assertEquals(2, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedNearIntervals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedNearIntervals().mjava","sourceNew":"  public void testUnorderedNearIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"hot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n            {},\n            { 0, 2, 2, 3, 6, 17 },\n            { 3, 5, 5, 6, 6, 21 },\n            { 3, 7 },\n            { 0, 2, 2, 3, 6, 17 },\n            {}\n        });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 2, 3, 15, 25);\n    assertMatch(mi, 6, 17, 41, 99);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 6, 6, 41, 46);\n    assertMatch(sub, 17, 17, 96, 99);\n    assertFalse(sub.next());\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        1, 0, 10\n    });\n\n    assertEquals(2, source.minExtent());\n\n    checkVisits(source, 3, \"pease\", \"hot\");\n  }\n\n","sourceOld":"  public void testUnorderedNearIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"hot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n            {},\n            { 0, 2, 2, 3, 6, 17 },\n            { 3, 5, 5, 6, 6, 21 },\n            { 3, 7 },\n            { 0, 2, 2, 3, 6, 17 },\n            {}\n        });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 2, 3, 15, 25);\n    assertMatch(mi, 6, 17, 41, 99);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 6, 6, 41, 46);\n    assertMatch(sub, 17, 17, 96, 99);\n    assertFalse(sub.next());\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        1, 0, 10\n    });\n\n    assertEquals(2, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed67e557f509069144486ee34fd0275a6dcbe991"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}