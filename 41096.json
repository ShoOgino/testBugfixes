{"path":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"/dev/null","sourceNew":"  /* @override */\n  protected void setUp() throws Exception {\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir,anlzr);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir,anlzr);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  /* @override */\n  protected void setUp() throws Exception {\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir,anlzr);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir,anlzr);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  /* @override */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  /* @override */\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining--;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  /* @override */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n                                     IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining>0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\"+N_DOCS+\" must be primary and greater than 2!\");\n      }\n      addDoc(iw,i);\n      done[i] = true;\n      i = (i+4)%N_DOCS;\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5d8d97303550346f85fd577f90d64cf196cebd1","date":1262890343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining--;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, anlzr,\n            IndexWriter.MaxFieldLength.LIMITED);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["f5d8d97303550346f85fd577f90d64cf196cebd1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"777b7ef341decfee8757f492d8a154637cd7a384":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["777b7ef341decfee8757f492d8a154637cd7a384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["777b7ef341decfee8757f492d8a154637cd7a384"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"777b7ef341decfee8757f492d8a154637cd7a384":["f5d8d97303550346f85fd577f90d64cf196cebd1"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}