{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","commits":[{"id":"aec1849055a2ada9ab66fe871645565085cd5462","date":1400041327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary;\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["38bbc20b9f0152f78a6f08c072856630e9b89fa1","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary;\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary;\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","sourceNew":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary.get();\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary;\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":["aec1849055a2ada9ab66fe871645565085cd5462"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38bbc20b9f0152f78a6f08c072856630e9b89fa1","date":1571567239,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,Collection[SearchGroup[MutableValue]]).mjava","sourceNew":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(Utils.OBJECT_TO_STRING.apply(original.groupValue.toObject()), binary);\n        converted.groupValue = binary.get();\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<BytesRef>> fromMutable(SchemaField field, Collection<SearchGroup<MutableValue>> values) {\n    if (values == null) {\n      return null;\n    }\n    FieldType fieldType = field.getType();\n    List<SearchGroup<BytesRef>> result = new ArrayList<>(values.size());\n    for (SearchGroup<MutableValue> original : values) {\n      SearchGroup<BytesRef> converted = new SearchGroup<BytesRef>();\n      converted.sortValues = original.sortValues;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        converted.groupValue = binary.get();\n      } else {\n        converted.groupValue = null;\n      }\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":["aec1849055a2ada9ab66fe871645565085cd5462"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"aec1849055a2ada9ab66fe871645565085cd5462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aec1849055a2ada9ab66fe871645565085cd5462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"]},"commit2Childs":{"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aec1849055a2ada9ab66fe871645565085cd5462":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aec1849055a2ada9ab66fe871645565085cd5462","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}