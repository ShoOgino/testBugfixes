{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(COLLECTION,\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a258b47d5de034cf50e5f1bb82437bd735138fe8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(COLLECTION,\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258b47d5de034cf50e5f1bb82437bd735138fe8","date":1499373011,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION2, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testAliasHandling() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(COLLECTION,\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":["a64b273d51a6540272668680ece9f8b686ff0004"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION2, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testAliasHandling() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(COLLECTION,\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"177e0a3b3d5d15f9cc40e392177343f6945f0fec","date":1539157346,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION2, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testAliasHandling() throws Exception {\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION2, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testAliasHandling().mjava","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION2, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","bugFix":["177e0a3b3d5d15f9cc40e392177343f6945f0fec","a258b47d5de034cf50e5f1bb82437bd735138fe8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["177e0a3b3d5d15f9cc40e392177343f6945f0fec"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"177e0a3b3d5d15f9cc40e392177343f6945f0fec":["a258b47d5de034cf50e5f1bb82437bd735138fe8"],"e73d8d559120669b47658108d818b637df5456ea":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a258b47d5de034cf50e5f1bb82437bd735138fe8"],"a258b47d5de034cf50e5f1bb82437bd735138fe8":["a64b273d51a6540272668680ece9f8b686ff0004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e73d8d559120669b47658108d818b637df5456ea"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["a258b47d5de034cf50e5f1bb82437bd735138fe8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"177e0a3b3d5d15f9cc40e392177343f6945f0fec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e73d8d559120669b47658108d818b637df5456ea":[],"a258b47d5de034cf50e5f1bb82437bd735138fe8":["177e0a3b3d5d15f9cc40e392177343f6945f0fec","e73d8d559120669b47658108d818b637df5456ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}