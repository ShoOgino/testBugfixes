{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","sourceNew":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, Integer.valueOf(min));\n    ln_maxs.put(field, Integer.valueOf(max));\n    ln_steeps.put(field, Float.valueOf(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","sourceOld":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, Integer.valueOf(min));\n    ln_maxs.put(field, Integer.valueOf(max));\n    ln_steeps.put(field, Float.valueOf(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, Integer.valueOf(min));\n    ln_maxs.put(field, Integer.valueOf(max));\n    ln_steeps.put(field, Float.valueOf(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, Integer.valueOf(min));\n    ln_maxs.put(field, Integer.valueOf(max));\n    ln_steeps.put(field, Float.valueOf(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, Integer.valueOf(min));\n    ln_maxs.put(field, Integer.valueOf(max));\n    ln_steeps.put(field, Float.valueOf(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9454a6510e2db155fb01faa5c049b06ece95fab9","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}