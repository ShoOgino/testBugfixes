{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30981e39c01d6738e774177bc068fa8827e11950","date":1296088978,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      // Lock order: IW -> BD\n      if (bufferedDeletes.applyDeletes(readerPool, segmentInfos, merge.segments)) {\n        checkpoint();\n      }\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          message(\"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"30981e39c01d6738e774177bc068fa8827e11950":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["30981e39c01d6738e774177bc068fa8827e11950"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","30981e39c01d6738e774177bc068fa8827e11950"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","30981e39c01d6738e774177bc068fa8827e11950"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"30981e39c01d6738e774177bc068fa8827e11950":["06584e6e98d592b34e1329b384182f368d2025e8","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["30981e39c01d6738e774177bc068fa8827e11950","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}