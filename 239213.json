{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","commits":[{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8243520ae771d3127a521834a905f61f80a046a","date":1310998510,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8243520ae771d3127a521834a905f61f80a046a":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d8243520ae771d3127a521834a905f61f80a046a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d8243520ae771d3127a521834a905f61f80a046a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["d8243520ae771d3127a521834a905f61f80a046a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}