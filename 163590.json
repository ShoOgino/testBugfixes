{"path":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    BitSet newbits = (BitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","sourceNew":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","sourceOld":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    BitSet newbits = (BitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","sourceNew":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","sourceOld":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersection(DocSet).mjava","sourceNew":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","sourceOld":"  public DocSet intersection(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersection(this);\n    }\n\n    // Default... handle with bitsets.\n    OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());\n    newbits.and(other.getBits());\n    return new BitDocSet(newbits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["21400778a0bf704d187a4848279049f5d90276c8"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["30391436869a41b74d4ba7098c40d955b686a10c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["21400778a0bf704d187a4848279049f5d90276c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}