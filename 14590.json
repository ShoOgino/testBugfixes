{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    // nocommit\n    FixedBitSet seenOrds = new FixedBitSet((int)dv.getValueCount());\n    long maxOrd2 = -1;\n    OrdIterator iterator = null;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      iterator = dv.getOrds(i, iterator);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        // nocommit\n        seenOrds.set((int)ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988e3f44fe797ee94a0135abfe27e5872b99844d","date":1360563792,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    // nocommit\n    FixedBitSet seenOrds = new FixedBitSet((int)dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        // nocommit\n        seenOrds.set((int)ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    // nocommit\n    FixedBitSet seenOrds = new FixedBitSet((int)dv.getValueCount());\n    long maxOrd2 = -1;\n    OrdIterator iterator = null;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      iterator = dv.getOrds(i, iterator);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        // nocommit\n        seenOrds.set((int)ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ad8f8dd7b201036b715d4896eecb7db22aea32","date":1360887949,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    // nocommit\n    FixedBitSet seenOrds = new FixedBitSet((int)dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        // nocommit\n        seenOrds.set((int)ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          ordCount++;\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          ordCount++;\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,AtomicReader,SortedSetDocValues).mjava","sourceNew":null,"sourceOld":"  private static void checkSortedSetDocValues(String fieldName, AtomicReader reader, SortedSetDocValues dv) {\n    final long maxOrd = dv.getValueCount()-1;\n    OpenBitSet seenOrds = new OpenBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (long i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60ad8f8dd7b201036b715d4896eecb7db22aea32":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60ad8f8dd7b201036b715d4896eecb7db22aea32"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["f366ce28775e2b8ea4e06355009471328711666d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"60ad8f8dd7b201036b715d4896eecb7db22aea32":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f366ce28775e2b8ea4e06355009471328711666d":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["60ad8f8dd7b201036b715d4896eecb7db22aea32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}