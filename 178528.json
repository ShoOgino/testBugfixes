{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":null,"sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}