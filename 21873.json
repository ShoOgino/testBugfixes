{"path":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitGen) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitGen);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitGen, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitGen) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitGen);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitGen, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitGen) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitGen);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitGen, reserveCount);\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitVersion) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitVersion, reserveCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#saveCommitPoint(Long).mjava","sourceNew":"  /** \n   * Permanently prevent this commit point from being deleted (if it has not already) using a refrence count.\n   * <p> \n   * <b>NOTE:</b> Callers <em>MUST</em> call {@link #releaseCommitPoint} when finished using it\n   * in order to decrement the reference count, or the commit will be preserved in the Directory forever.\n   * </p>\n   *\n   * @param generation the generation of the IndexComit to save until released\n   * @see #getAndSaveLatestCommit\n   * @see #getAndSaveCommitPoint\n   * @see #releaseCommitPoint\n   * @throws IllegalStateException if generation is already too old to be saved\n   */\n  public synchronized void saveCommitPoint(Long generation) {\n    getAndSaveCommitPoint(generation); // will handle the logic for us, just ignore the results\n  }\n\n","sourceOld":"  /** Permanently prevent this commit point from being deleted.\n   * A counter is used to allow a commit point to be correctly saved and released\n   * multiple times. */\n  public synchronized void saveCommitPoint(Long indexCommitGen) {\n    AtomicInteger reserveCount = savedCommits.get(indexCommitGen);\n    if (reserveCount == null) reserveCount = new AtomicInteger();\n    reserveCount.incrementAndGet();\n    savedCommits.put(indexCommitGen, reserveCount);\n  }\n\n","bugFix":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"19f02bb04467ed179738a398a7da80bbbe161c16":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f02bb04467ed179738a398a7da80bbbe161c16"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","19f02bb04467ed179738a398a7da80bbbe161c16","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"19f02bb04467ed179738a398a7da80bbbe161c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}