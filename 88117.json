{"path":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","commits":[{"id":"a94e45463a0089149b0d148ae5369140e7f54b8c","date":1419231934,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil\n        .termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.get(shard);\n      if (cache == null) { // initialize\n        cache = new FastLRUCache<>();\n        cache.init(lruCacheInitArgs, null, null);\n        perShardTermStats.put(shard, cache);\n      }\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc9c42f0c1f89f2b3964f2d39efe57860e578838","date":1438774812,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.get(shard);\n      if (cache == null) { // initialize\n        cache = new FastLRUCache<>();\n        cache.init(lruCacheInitArgs, null, null);\n        perShardTermStats.put(shard, cache);\n      }\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil\n        .termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.get(shard);\n      if (cache == null) { // initialize\n        cache = new FastLRUCache<>();\n        cache.init(lruCacheInitArgs, null, null);\n        perShardTermStats.put(shard, cache);\n      }\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        FastLRUCache c = new FastLRUCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.get(shard);\n      if (cache == null) { // initialize\n        cache = new FastLRUCache<>();\n        cache.init(lruCacheInitArgs, null, null);\n        perShardTermStats.put(shard, cache);\n      }\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","bugFix":["a94e45463a0089149b0d148ae5369140e7f54b8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        FastLRUCache c = new FastLRUCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.get(shard);\n      if (cache == null) { // initialize\n        cache = new FastLRUCache<>();\n        cache.init(lruCacheInitArgs, null, null);\n        perShardTermStats.put(shard, cache);\n      }\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        CaffeineCache c = new CaffeineCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        FastLRUCache c = new FastLRUCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/LRUStatsCache#addToPerShardTermStats(SolrQueryRequest,String,String).mjava","sourceNew":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      @SuppressWarnings({\"unchecked\"})\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        @SuppressWarnings({\"rawtypes\"})\n        CaffeineCache c = new CaffeineCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void addToPerShardTermStats(SolrQueryRequest req, String shard, String termStatsString) {\n    Map<String,TermStats> termStats = StatsUtil.termStatsMapFromString(termStatsString);\n    if (termStats != null) {\n      SolrCache<String,TermStats> cache = perShardTermStats.computeIfAbsent(shard, s -> {\n        CaffeineCache c = new CaffeineCache<>();\n        Map<String, String> map = new HashMap<>(lruCacheInitArgs);\n        map.put(CommonParams.NAME, s);\n        c.init(map, null, null);\n        c.setState(SolrCache.State.LIVE);\n        return c;\n      });\n      for (Entry<String,TermStats> e : termStats.entrySet()) {\n        cache.put(e.getKey(), e.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a94e45463a0089149b0d148ae5369140e7f54b8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["df72a23fb74bebe914e3f3972063a884327c0436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["a94e45463a0089149b0d148ae5369140e7f54b8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["cc9c42f0c1f89f2b3964f2d39efe57860e578838","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"a94e45463a0089149b0d148ae5369140e7f54b8c":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a94e45463a0089149b0d148ae5369140e7f54b8c"],"4d7d3943904804560937e6239effeebda0f920e4":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"df72a23fb74bebe914e3f3972063a884327c0436":["4d7d3943904804560937e6239effeebda0f920e4","b0b597c65628ca9e73913a07e81691f8229bae35"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}