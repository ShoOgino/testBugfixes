{"path":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(this, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(this, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      final PointField pointField = (PointField) ft;\n      switch (pointField.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      final PointField pointField = (PointField) ft;\n      switch (pointField.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField) ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      final PointField pointField = (PointField) ft;\n      switch (pointField.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyRangeEndpointCalculator(this);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#createCalculator().mjava","sourceNew":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyRangeEndpointCalculator(this);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","sourceOld":"  /**\n   * Creates the right instance of {@link org.apache.solr.handler.component.RangeFacetRequest.RangeEndpointCalculator}\n   * depending on the field type of the schema field\n   */\n  private RangeEndpointCalculator<? extends Comparable<?>> createCalculator() {\n    RangeEndpointCalculator<?> calc;\n    FieldType ft = schemaField.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Trie field of unexpected type:\" + this.facetOn);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeEndpointCalculator(this, null);\n    } else if (ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(this);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(this);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(this);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(this);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(this, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on Point field of unexpected type:\" + this.facetOn);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + schemaField);\n    }\n\n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3d81baa64023bbb9b43f6d929ee168b105940d30","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["d3f6c7717a0f1decd1668144537943efcc70cd95","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"46dc9ac8b3e748407baaef82453138ff3974480c":["3d81baa64023bbb9b43f6d929ee168b105940d30","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}