{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c0b7c041280280c54063d34a48a0ee85332b1e3","date":1287540778,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":null,"sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":null,"sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testWildcard().mjava","sourceNew":null,"sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n\n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n    // Range queries:\n\n    // TODO: implement this on QueryParser\n    // Q0002E_INVALID_SYNTAX_CANNOT_PARSE: Syntax Error, cannot parse '[A TO\n    // C]': Lexical error at line 1, column 1. Encountered: \"[\" (91), after : \"\"\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9454a6510e2db155fb01faa5c049b06ece95fab9","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8c0b7c041280280c54063d34a48a0ee85332b1e3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8c0b7c041280280c54063d34a48a0ee85332b1e3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}