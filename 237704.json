{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","commits":[{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","sourceNew":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery2 bq = new BooleanQuery2();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery2 bq2 = new BooleanQuery2();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","sourceOld":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testNestedDisjunctions().mjava","sourceNew":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2.build(), BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(scorerSearcher, bq.build());\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","sourceOld":"  public void testNestedDisjunctions() throws IOException {\n    BooleanQuery2 bq = new BooleanQuery2();\n    bq.add(new TermQuery(new Term(F1, \"lucene\")), BooleanClause.Occur.SHOULD);\n    BooleanQuery2 bq2 = new BooleanQuery2();\n    bq2.add(new TermQuery(new Term(F2, \"lucene\")), BooleanClause.Occur.SHOULD);\n    bq2.add(new TermQuery(new Term(F2, \"search\")), BooleanClause.Occur.SHOULD);\n    bq.add(bq2, BooleanClause.Occur.SHOULD);\n    Map<Integer,Integer> tfs = getDocCounts(searcher, bq);\n    assertEquals(3, tfs.size()); // 3 documents\n    assertEquals(3, tfs.get(0).intValue()); // f1:lucene + f2:lucene + f2:search\n    assertEquals(2, tfs.get(1).intValue()); // f2:search + f2:lucene\n    assertEquals(2, tfs.get(2).intValue()); // f2:search + f2:lucene\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}