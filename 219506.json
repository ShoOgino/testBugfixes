{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8723a3379c08ae0b4ba0cf4f246306f86ad8362d","date":1287582680,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","date":1290598569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile ||\n       (noCFSRatio != 1.0 && !info.getUseCompoundFile()));\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a972864fea6b8b4d76cb25ee8986d49479f55dae","date":1290628098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile ||\n       (noCFSRatio != 1.0 && !info.getUseCompoundFile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a972864fea6b8b4d76cb25ee8986d49479f55dae":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a972864fea6b8b4d76cb25ee8986d49479f55dae"],"8017ab6544f30f93b106e419e7298173bad77f69":["7ab99e8c71442b92c320e218141dee04a9b91ce8","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","a972864fea6b8b4d76cb25ee8986d49479f55dae"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"3bb13258feba31ab676502787ab2e1779f129b7a":["8017ab6544f30f93b106e419e7298173bad77f69","a972864fea6b8b4d76cb25ee8986d49479f55dae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a972864fea6b8b4d76cb25ee8986d49479f55dae":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8017ab6544f30f93b106e419e7298173bad77f69":["3bb13258feba31ab676502787ab2e1779f129b7a"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["a972864fea6b8b4d76cb25ee8986d49479f55dae"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["8017ab6544f30f93b106e419e7298173bad77f69","5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}