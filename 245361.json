{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeByte((byte) ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.byteValueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert iters * encoder.byteBlockCount() >= encodedSize;\n\n    out.writeByte((byte) numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeByte((byte) ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.byteValueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert iters * encoder.byteBlockCount() >= encodedSize;\n\n    out.writeByte((byte) numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeByte((byte) ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.byteValueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert iters * encoder.byteBlockCount() >= encodedSize;\n\n    out.writeByte((byte) numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeByte((byte) ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.byteValueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert iters * encoder.byteBlockCount() >= encodedSize;\n\n    out.writeByte((byte) numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeByte((byte) ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.byteValueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert iters * encoder.byteBlockCount() >= encodedSize;\n\n    out.writeByte((byte) numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}