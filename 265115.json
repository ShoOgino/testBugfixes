{"path":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","commits":[{"id":"799dbf7b31f0667e6d3927ba742a910752688757","date":1335106915,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","pathOld":"/dev/null","sourceNew":"  // make sure we don't leak searchers (SOLR-3391)\n  public void testCloses() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(commit(\"openSearcher\",\"false\"));  // this was enough to trigger SOLR-3391\n\n    int maxDoc = random().nextInt(20) + 1;\n\n    // test different combinations of commits\n    for (int i=0; i<100; i++) {\n\n      if (random().nextInt(100) < 50) {\n        String id = Integer.toString(random().nextInt(maxDoc));\n        assertU(adoc(\"id\",id));\n      } else {\n        boolean soft = random().nextBoolean();\n        boolean optimize = random().nextBoolean();\n        boolean openSearcher = random().nextBoolean();\n\n        if (optimize) {\n          assertU(optimize(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        } else {\n          assertU(commit(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","sourceNew":"  // make sure we don't leak searchers (SOLR-3391)\n  public void testCloses() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(commit(\"openSearcher\",\"false\"));  // this was enough to trigger SOLR-3391\n\n    int maxDoc = random().nextInt(20) + 1;\n\n    // test different combinations of commits\n    for (int i=0; i<100; i++) {\n\n      if (random().nextInt(100) < 50) {\n        String id = Integer.toString(random().nextInt(maxDoc));\n        assertU(adoc(\"id\",id));\n      } else {\n        boolean soft = random().nextBoolean();\n        boolean optimize = random().nextBoolean();\n        boolean openSearcher = random().nextBoolean();\n\n        if (optimize) {\n          assertU(optimize(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        } else {\n          assertU(commit(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  // make sure we don't leak searchers (SOLR-3391)\n  public void testCloses() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(commit(\"openSearcher\",\"false\"));  // this was enough to trigger SOLR-3391\n\n    int maxDoc = random().nextInt(20) + 1;\n\n    // test different combinations of commits\n    for (int i=0; i<100; i++) {\n\n      if (random().nextInt(100) < 50) {\n        String id = Integer.toString(random().nextInt(maxDoc));\n        assertU(adoc(\"id\",id));\n      } else {\n        boolean soft = random().nextBoolean();\n        boolean optimize = random().nextBoolean();\n        boolean openSearcher = random().nextBoolean();\n\n        if (optimize) {\n          assertU(optimize(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        } else {\n          assertU(commit(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testCloses().mjava","sourceNew":"  // make sure we don't leak searchers (SOLR-3391)\n  public void testCloses() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(commit(\"openSearcher\",\"false\"));  // this was enough to trigger SOLR-3391\n\n    int maxDoc = random().nextInt(20) + 1;\n\n    // test different combinations of commits\n    for (int i=0; i<100; i++) {\n\n      if (random().nextInt(100) < 50) {\n        String id = Integer.toString(random().nextInt(maxDoc));\n        assertU(adoc(\"id\",id));\n      } else {\n        boolean soft = random().nextBoolean();\n        boolean optimize = random().nextBoolean();\n        boolean openSearcher = random().nextBoolean();\n\n        if (optimize) {\n          assertU(optimize(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        } else {\n          assertU(commit(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  // make sure we don't leak searchers (SOLR-3391)\n  public void testCloses() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(commit(\"openSearcher\",\"false\"));  // this was enough to trigger SOLR-3391\n\n    int maxDoc = random().nextInt(20) + 1;\n\n    // test different combinations of commits\n    for (int i=0; i<100; i++) {\n\n      if (random().nextInt(100) < 50) {\n        String id = Integer.toString(random().nextInt(maxDoc));\n        assertU(adoc(\"id\",id));\n      } else {\n        boolean soft = random().nextBoolean();\n        boolean optimize = random().nextBoolean();\n        boolean openSearcher = random().nextBoolean();\n\n        if (optimize) {\n          assertU(optimize(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        } else {\n          assertU(commit(\"openSearcher\",\"\"+openSearcher, \"softCommit\",\"\"+soft));\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["799dbf7b31f0667e6d3927ba742a910752688757","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["799dbf7b31f0667e6d3927ba742a910752688757"],"799dbf7b31f0667e6d3927ba742a910752688757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["799dbf7b31f0667e6d3927ba742a910752688757"],"799dbf7b31f0667e6d3927ba742a910752688757":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}