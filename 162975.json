{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","commits":[{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return sf.getType().getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return sf.getType().getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return sf.getType().getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return sf.getType().getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false);\n  }\n\n","bugFix":["e55782fb51a6e9789542818eb2161a3247f39ace"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","bugFix":null,"bugIntro":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47d74fab5d64854ddafa81b65ed399b192f2d947","date":1512411916,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        SynonymQueryStyle synonymQueryStyle = AS_SAME_TERM;\n        if (ft instanceof TextField) {\n          synonymQueryStyle = ((TextField)(ft)).getSynonymQueryStyle();\n        }\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries, synonymQueryStyle);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true, AS_SAME_TERM);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a33f2146a1bb5ab36a02a7fd15ade021142ea88","date":1595253088,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean,boolean).mjava","sourceNew":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.startsWith(\"_\") && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        SynonymQueryStyle synonymQueryStyle = AS_SAME_TERM;\n        if (ft instanceof TextField) {\n          synonymQueryStyle = ((TextField)(ft)).getSynonymQueryStyle();\n        }\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries, synonymQueryStyle);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true, AS_SAME_TERM);\n  }\n\n","sourceOld":"  // if raw==true, then it's possible for this method to return a RawQuery that will need to be transformed\n  // further before using.\n  protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw) throws SyntaxError {\n    checkNullField(field);\n\n    SchemaField sf;\n    if (field.equals(lastFieldName)) {\n      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields\n      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed \"foo_i\" each time.\n      sf = lastField;\n    } else {\n      // intercept magic field name of \"_\" to use as a hook for our\n      // own functions.\n      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {\n        MagicFieldName magic = MagicFieldName.get(field);\n        if (null != magic) {\n          subQParser = parser.subQuery(queryText, magic.subParser);\n          return subQParser.getQuery();\n        }\n      }\n\n      lastFieldName = field;\n      sf = lastField = schema.getFieldOrNull(field);\n    }\n\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();\n        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();\n        SynonymQueryStyle synonymQueryStyle = AS_SAME_TERM;\n        if (ft instanceof TextField) {\n          synonymQueryStyle = ((TextField)(ft)).getSynonymQueryStyle();\n        }\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted, fieldAutoGenPhraseQueries, fieldEnableGraphQueries, synonymQueryStyle);\n      } else {\n        if (raw) {\n          return new RawQuery(sf, queryText);\n        } else {\n          return ft.getFieldQuery(parser, sf, queryText);\n        }\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted, false, true, AS_SAME_TERM);\n  }\n\n","bugFix":["a91f19e3f7576973404e13b7ecfb8ae94f313921"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["47d74fab5d64854ddafa81b65ed399b192f2d947"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c03778630c4604270d88c148afb8c7de35b51d3c"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"47d74fab5d64854ddafa81b65ed399b192f2d947":["4aee4980038a10791618ea04e79233ce5cbf6607"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["e55782fb51a6e9789542818eb2161a3247f39ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["0d1728ac6bfc0cea61f3e27436b418295d9982a3","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"]},"commit2Childs":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"47d74fab5d64854ddafa81b65ed399b192f2d947":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"4aee4980038a10791618ea04e79233ce5cbf6607":["47d74fab5d64854ddafa81b65ed399b192f2d947"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"c03778630c4604270d88c148afb8c7de35b51d3c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"e55782fb51a6e9789542818eb2161a3247f39ace":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}