{"path":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map,DocumentsWriter.FlushState).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map,DocumentsWriter.FlushState).mjava","pathOld":"/dev/null","sourceNew":"  void shrinkFreePostings(Map threadsAndFields, DocumentsWriter.FlushState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map,SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map,DocumentsWriter.FlushState).mjava","sourceNew":"  void shrinkFreePostings(Map threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","sourceOld":"  void shrinkFreePostings(Map threadsAndFields, DocumentsWriter.FlushState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}