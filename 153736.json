{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#sortRptGroups(ArrayList[ArrayList[PhrasePositions]]).mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#sortRptGroups(ArrayList[ArrayList[PhrasePositions]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#sortRptGroups(ArrayList[ArrayList[PhrasePositions]]).mjava","sourceNew":"  /** sort each repetition group by (query) offset. \n   * Done only once (at first doc) and allows to initialize faster for each doc. */\n  private void sortRptGroups(ArrayList<ArrayList<PhrasePositions>> rgs) {\n    rptGroups = new PhrasePositions[rgs.size()][];\n    Comparator<PhrasePositions> cmprtr = new Comparator<PhrasePositions>() {\n      @Override\n      public int compare(PhrasePositions pp1, PhrasePositions pp2) {\n        return pp1.offset - pp2.offset;\n      }\n    };\n    for (int i=0; i<rptGroups.length; i++) {\n      PhrasePositions[] rg = rgs.get(i).toArray(new PhrasePositions[0]);\n      Arrays.sort(rg, cmprtr);\n      rptGroups[i] = rg;\n      for (int j=0; j<rg.length; j++) {\n        rg[j].rptInd = j; // we use this index for efficient re-queuing\n      }\n    }\n  }\n\n","sourceOld":"  /** sort each repetition group by (query) offset. \n   * Done only once (at first doc) and allows to initialize faster for each doc. */\n  private void sortRptGroups(ArrayList<ArrayList<PhrasePositions>> rgs) {\n    rptGroups = new PhrasePositions[rgs.size()][];\n    Comparator<PhrasePositions> cmprtr = new Comparator<PhrasePositions>() {\n      @Override\n      public int compare(PhrasePositions pp1, PhrasePositions pp2) {\n        return pp1.offset - pp2.offset;\n      }\n    };\n    for (int i=0; i<rptGroups.length; i++) {\n      PhrasePositions[] rg = rgs.get(i).toArray(new PhrasePositions[0]);\n      Arrays.sort(rg, cmprtr);\n      rptGroups[i] = rg;\n      for (int j=0; j<rg.length; j++) {\n        rg[j].rptInd = j; // we use this index for efficient re-queuing\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}