{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/ISOLatin1AccentFilter#removeAccents(char[],int).mjava","commits":[{"id":"967b81abdda07e0975b376eff34820e8adb6270d","date":1272916926,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/ISOLatin1AccentFilter#removeAccents(char[],int).mjava","pathOld":"lucene/backwards/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter#removeAccents(char[],int).mjava","sourceNew":"  /**\n   * To replace accented characters in a String by unaccented equivalents.\n   */\n  public final void removeAccents(char[] input, int length) {\n\n    // Worst-case length required:\n    final int maxSizeNeeded = 2*length;\n\n    int size = output.length;\n    while (size < maxSizeNeeded)\n      size *= 2;\n\n    if (size != output.length)\n      output = new char[size];\n\n    outputPos = 0;\n\n    int pos = 0;\n\n    for (int i=0; i<length; i++, pos++) {\n      final char c = input[pos];\n\n      // Quick test: if it's not in range then just keep\n      // current character\n      if (c < '\\u00c0' || c > '\\uFB06')\n        output[outputPos++] = c;\n      else {\n        switch (c) {\n        case '\\u00C0' : // À\n        case '\\u00C1' : // Á\n        case '\\u00C2' : // Â\n        case '\\u00C3' : // Ã\n        case '\\u00C4' : // Ä\n        case '\\u00C5' : // Å\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00C6' : // Æ\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00C7' : // Ç\n          output[outputPos++] = 'C';\n          break;\n        case '\\u00C8' : // È\n        case '\\u00C9' : // É\n        case '\\u00CA' : // Ê\n        case '\\u00CB' : // Ë\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00CC' : // Ì\n        case '\\u00CD' : // Í\n        case '\\u00CE' : // Î\n        case '\\u00CF' : // Ï\n          output[outputPos++] = 'I';\n          break;\n        case '\\u0132' : // Ĳ\n            output[outputPos++] = 'I';\n            output[outputPos++] = 'J';\n            break;\n        case '\\u00D0' : // Ð\n          output[outputPos++] = 'D';\n          break;\n        case '\\u00D1' : // Ñ\n          output[outputPos++] = 'N';\n          break;\n        case '\\u00D2' : // Ò\n        case '\\u00D3' : // Ó\n        case '\\u00D4' : // Ô\n        case '\\u00D5' : // Õ\n        case '\\u00D6' : // Ö\n        case '\\u00D8' : // Ø\n          output[outputPos++] = 'O';\n          break;\n        case '\\u0152' : // Œ\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00DE' : // Þ\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'H';\n          break;\n        case '\\u00D9' : // Ù\n        case '\\u00DA' : // Ú\n        case '\\u00DB' : // Û\n        case '\\u00DC' : // Ü\n          output[outputPos++] = 'U';\n          break;\n        case '\\u00DD' : // Ý\n        case '\\u0178' : // Ÿ\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u00E0' : // à\n        case '\\u00E1' : // á\n        case '\\u00E2' : // â\n        case '\\u00E3' : // ã\n        case '\\u00E4' : // ä\n        case '\\u00E5' : // å\n          output[outputPos++] = 'a';\n          break;\n        case '\\u00E6' : // æ\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00E7' : // ç\n          output[outputPos++] = 'c';\n          break;\n        case '\\u00E8' : // è\n        case '\\u00E9' : // é\n        case '\\u00EA' : // ê\n        case '\\u00EB' : // ë\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00EC' : // ì\n        case '\\u00ED' : // í\n        case '\\u00EE' : // î\n        case '\\u00EF' : // ï\n          output[outputPos++] = 'i';\n          break;\n        case '\\u0133' : // ĳ\n            output[outputPos++] = 'i';\n            output[outputPos++] = 'j';\n            break;\n        case '\\u00F0' : // ð\n          output[outputPos++] = 'd';\n          break;\n        case '\\u00F1' : // ñ\n          output[outputPos++] = 'n';\n          break;\n        case '\\u00F2' : // ò\n        case '\\u00F3' : // ó\n        case '\\u00F4' : // ô\n        case '\\u00F5' : // õ\n        case '\\u00F6' : // ö\n        case '\\u00F8' : // ø\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0153' : // œ\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00DF' : // ß\n          output[outputPos++] = 's';\n          output[outputPos++] = 's';\n          break;\n        case '\\u00FE' : // þ\n          output[outputPos++] = 't';\n          output[outputPos++] = 'h';\n          break;\n        case '\\u00F9' : // ù\n        case '\\u00FA' : // ú\n        case '\\u00FB' : // û\n        case '\\u00FC' : // ü\n          output[outputPos++] = 'u';\n          break;\n        case '\\u00FD' : // ý\n        case '\\u00FF' : // ÿ\n          output[outputPos++] = 'y';\n          break;\n        case '\\uFB00': // ﬀ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'f';\n            break;\n        case '\\uFB01': // ﬁ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'i';\n            break;\n        case '\\uFB02': // ﬂ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'l';\n            break;\n        // following 2 are commented as they can break the maxSizeNeeded (and doing *3 could be expensive)\n//        case '\\uFB03': // ﬃ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'i';\n//            break;\n//        case '\\uFB04': // ﬄ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'l';\n//            break;\n        case '\\uFB05': // ﬅ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 't';\n            break;\n        case '\\uFB06': // ﬆ\n            output[outputPos++] = 's';\n            output[outputPos++] = 't';\n          break;\n        default :\n          output[outputPos++] = c;\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * To replace accented characters in a String by unaccented equivalents.\n   */\n  public final void removeAccents(char[] input, int length) {\n\n    // Worst-case length required:\n    final int maxSizeNeeded = 2*length;\n\n    int size = output.length;\n    while (size < maxSizeNeeded)\n      size *= 2;\n\n    if (size != output.length)\n      output = new char[size];\n\n    outputPos = 0;\n\n    int pos = 0;\n\n    for (int i=0; i<length; i++, pos++) {\n      final char c = input[pos];\n\n      // Quick test: if it's not in range then just keep\n      // current character\n      if (c < '\\u00c0' || c > '\\uFB06')\n        output[outputPos++] = c;\n      else {\n        switch (c) {\n        case '\\u00C0' : // À\n        case '\\u00C1' : // Á\n        case '\\u00C2' : // Â\n        case '\\u00C3' : // Ã\n        case '\\u00C4' : // Ä\n        case '\\u00C5' : // Å\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00C6' : // Æ\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00C7' : // Ç\n          output[outputPos++] = 'C';\n          break;\n        case '\\u00C8' : // È\n        case '\\u00C9' : // É\n        case '\\u00CA' : // Ê\n        case '\\u00CB' : // Ë\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00CC' : // Ì\n        case '\\u00CD' : // Í\n        case '\\u00CE' : // Î\n        case '\\u00CF' : // Ï\n          output[outputPos++] = 'I';\n          break;\n        case '\\u0132' : // Ĳ\n            output[outputPos++] = 'I';\n            output[outputPos++] = 'J';\n            break;\n        case '\\u00D0' : // Ð\n          output[outputPos++] = 'D';\n          break;\n        case '\\u00D1' : // Ñ\n          output[outputPos++] = 'N';\n          break;\n        case '\\u00D2' : // Ò\n        case '\\u00D3' : // Ó\n        case '\\u00D4' : // Ô\n        case '\\u00D5' : // Õ\n        case '\\u00D6' : // Ö\n        case '\\u00D8' : // Ø\n          output[outputPos++] = 'O';\n          break;\n        case '\\u0152' : // Œ\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00DE' : // Þ\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'H';\n          break;\n        case '\\u00D9' : // Ù\n        case '\\u00DA' : // Ú\n        case '\\u00DB' : // Û\n        case '\\u00DC' : // Ü\n          output[outputPos++] = 'U';\n          break;\n        case '\\u00DD' : // Ý\n        case '\\u0178' : // Ÿ\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u00E0' : // à\n        case '\\u00E1' : // á\n        case '\\u00E2' : // â\n        case '\\u00E3' : // ã\n        case '\\u00E4' : // ä\n        case '\\u00E5' : // å\n          output[outputPos++] = 'a';\n          break;\n        case '\\u00E6' : // æ\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00E7' : // ç\n          output[outputPos++] = 'c';\n          break;\n        case '\\u00E8' : // è\n        case '\\u00E9' : // é\n        case '\\u00EA' : // ê\n        case '\\u00EB' : // ë\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00EC' : // ì\n        case '\\u00ED' : // í\n        case '\\u00EE' : // î\n        case '\\u00EF' : // ï\n          output[outputPos++] = 'i';\n          break;\n        case '\\u0133' : // ĳ\n            output[outputPos++] = 'i';\n            output[outputPos++] = 'j';\n            break;\n        case '\\u00F0' : // ð\n          output[outputPos++] = 'd';\n          break;\n        case '\\u00F1' : // ñ\n          output[outputPos++] = 'n';\n          break;\n        case '\\u00F2' : // ò\n        case '\\u00F3' : // ó\n        case '\\u00F4' : // ô\n        case '\\u00F5' : // õ\n        case '\\u00F6' : // ö\n        case '\\u00F8' : // ø\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0153' : // œ\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00DF' : // ß\n          output[outputPos++] = 's';\n          output[outputPos++] = 's';\n          break;\n        case '\\u00FE' : // þ\n          output[outputPos++] = 't';\n          output[outputPos++] = 'h';\n          break;\n        case '\\u00F9' : // ù\n        case '\\u00FA' : // ú\n        case '\\u00FB' : // û\n        case '\\u00FC' : // ü\n          output[outputPos++] = 'u';\n          break;\n        case '\\u00FD' : // ý\n        case '\\u00FF' : // ÿ\n          output[outputPos++] = 'y';\n          break;\n        case '\\uFB00': // ﬀ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'f';\n            break;\n        case '\\uFB01': // ﬁ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'i';\n            break;\n        case '\\uFB02': // ﬂ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'l';\n            break;\n        // following 2 are commented as they can break the maxSizeNeeded (and doing *3 could be expensive)\n//        case '\\uFB03': // ﬃ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'i';\n//            break;\n//        case '\\uFB04': // ﬄ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'l';\n//            break;\n        case '\\uFB05': // ﬅ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 't';\n            break;\n        case '\\uFB06': // ﬆ\n            output[outputPos++] = 's';\n            output[outputPos++] = 't';\n          break;\n        default :\n          output[outputPos++] = c;\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ISOLatin1AccentFilter#removeAccents(char[],int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/ISOLatin1AccentFilter#removeAccents(char[],int).mjava","sourceNew":"  /**\n   * To replace accented characters in a String by unaccented equivalents.\n   */\n  public final void removeAccents(char[] input, int length) {\n\n    // Worst-case length required:\n    final int maxSizeNeeded = 2*length;\n\n    int size = output.length;\n    while (size < maxSizeNeeded)\n      size *= 2;\n\n    if (size != output.length)\n      output = new char[size];\n\n    outputPos = 0;\n\n    int pos = 0;\n\n    for (int i=0; i<length; i++, pos++) {\n      final char c = input[pos];\n\n      // Quick test: if it's not in range then just keep\n      // current character\n      if (c < '\\u00c0' || c > '\\uFB06')\n        output[outputPos++] = c;\n      else {\n        switch (c) {\n        case '\\u00C0' : // À\n        case '\\u00C1' : // Á\n        case '\\u00C2' : // Â\n        case '\\u00C3' : // Ã\n        case '\\u00C4' : // Ä\n        case '\\u00C5' : // Å\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00C6' : // Æ\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00C7' : // Ç\n          output[outputPos++] = 'C';\n          break;\n        case '\\u00C8' : // È\n        case '\\u00C9' : // É\n        case '\\u00CA' : // Ê\n        case '\\u00CB' : // Ë\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00CC' : // Ì\n        case '\\u00CD' : // Í\n        case '\\u00CE' : // Î\n        case '\\u00CF' : // Ï\n          output[outputPos++] = 'I';\n          break;\n        case '\\u0132' : // Ĳ\n            output[outputPos++] = 'I';\n            output[outputPos++] = 'J';\n            break;\n        case '\\u00D0' : // Ð\n          output[outputPos++] = 'D';\n          break;\n        case '\\u00D1' : // Ñ\n          output[outputPos++] = 'N';\n          break;\n        case '\\u00D2' : // Ò\n        case '\\u00D3' : // Ó\n        case '\\u00D4' : // Ô\n        case '\\u00D5' : // Õ\n        case '\\u00D6' : // Ö\n        case '\\u00D8' : // Ø\n          output[outputPos++] = 'O';\n          break;\n        case '\\u0152' : // Œ\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00DE' : // Þ\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'H';\n          break;\n        case '\\u00D9' : // Ù\n        case '\\u00DA' : // Ú\n        case '\\u00DB' : // Û\n        case '\\u00DC' : // Ü\n          output[outputPos++] = 'U';\n          break;\n        case '\\u00DD' : // Ý\n        case '\\u0178' : // Ÿ\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u00E0' : // à\n        case '\\u00E1' : // á\n        case '\\u00E2' : // â\n        case '\\u00E3' : // ã\n        case '\\u00E4' : // ä\n        case '\\u00E5' : // å\n          output[outputPos++] = 'a';\n          break;\n        case '\\u00E6' : // æ\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00E7' : // ç\n          output[outputPos++] = 'c';\n          break;\n        case '\\u00E8' : // è\n        case '\\u00E9' : // é\n        case '\\u00EA' : // ê\n        case '\\u00EB' : // ë\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00EC' : // ì\n        case '\\u00ED' : // í\n        case '\\u00EE' : // î\n        case '\\u00EF' : // ï\n          output[outputPos++] = 'i';\n          break;\n        case '\\u0133' : // ĳ\n            output[outputPos++] = 'i';\n            output[outputPos++] = 'j';\n            break;\n        case '\\u00F0' : // ð\n          output[outputPos++] = 'd';\n          break;\n        case '\\u00F1' : // ñ\n          output[outputPos++] = 'n';\n          break;\n        case '\\u00F2' : // ò\n        case '\\u00F3' : // ó\n        case '\\u00F4' : // ô\n        case '\\u00F5' : // õ\n        case '\\u00F6' : // ö\n        case '\\u00F8' : // ø\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0153' : // œ\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00DF' : // ß\n          output[outputPos++] = 's';\n          output[outputPos++] = 's';\n          break;\n        case '\\u00FE' : // þ\n          output[outputPos++] = 't';\n          output[outputPos++] = 'h';\n          break;\n        case '\\u00F9' : // ù\n        case '\\u00FA' : // ú\n        case '\\u00FB' : // û\n        case '\\u00FC' : // ü\n          output[outputPos++] = 'u';\n          break;\n        case '\\u00FD' : // ý\n        case '\\u00FF' : // ÿ\n          output[outputPos++] = 'y';\n          break;\n        case '\\uFB00': // ﬀ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'f';\n            break;\n        case '\\uFB01': // ﬁ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'i';\n            break;\n        case '\\uFB02': // ﬂ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'l';\n            break;\n        // following 2 are commented as they can break the maxSizeNeeded (and doing *3 could be expensive)\n//        case '\\uFB03': // ﬃ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'i';\n//            break;\n//        case '\\uFB04': // ﬄ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'l';\n//            break;\n        case '\\uFB05': // ﬅ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 't';\n            break;\n        case '\\uFB06': // ﬆ\n            output[outputPos++] = 's';\n            output[outputPos++] = 't';\n          break;\n        default :\n          output[outputPos++] = c;\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * To replace accented characters in a String by unaccented equivalents.\n   */\n  public final void removeAccents(char[] input, int length) {\n\n    // Worst-case length required:\n    final int maxSizeNeeded = 2*length;\n\n    int size = output.length;\n    while (size < maxSizeNeeded)\n      size *= 2;\n\n    if (size != output.length)\n      output = new char[size];\n\n    outputPos = 0;\n\n    int pos = 0;\n\n    for (int i=0; i<length; i++, pos++) {\n      final char c = input[pos];\n\n      // Quick test: if it's not in range then just keep\n      // current character\n      if (c < '\\u00c0' || c > '\\uFB06')\n        output[outputPos++] = c;\n      else {\n        switch (c) {\n        case '\\u00C0' : // À\n        case '\\u00C1' : // Á\n        case '\\u00C2' : // Â\n        case '\\u00C3' : // Ã\n        case '\\u00C4' : // Ä\n        case '\\u00C5' : // Å\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00C6' : // Æ\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00C7' : // Ç\n          output[outputPos++] = 'C';\n          break;\n        case '\\u00C8' : // È\n        case '\\u00C9' : // É\n        case '\\u00CA' : // Ê\n        case '\\u00CB' : // Ë\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00CC' : // Ì\n        case '\\u00CD' : // Í\n        case '\\u00CE' : // Î\n        case '\\u00CF' : // Ï\n          output[outputPos++] = 'I';\n          break;\n        case '\\u0132' : // Ĳ\n            output[outputPos++] = 'I';\n            output[outputPos++] = 'J';\n            break;\n        case '\\u00D0' : // Ð\n          output[outputPos++] = 'D';\n          break;\n        case '\\u00D1' : // Ñ\n          output[outputPos++] = 'N';\n          break;\n        case '\\u00D2' : // Ò\n        case '\\u00D3' : // Ó\n        case '\\u00D4' : // Ô\n        case '\\u00D5' : // Õ\n        case '\\u00D6' : // Ö\n        case '\\u00D8' : // Ø\n          output[outputPos++] = 'O';\n          break;\n        case '\\u0152' : // Œ\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00DE' : // Þ\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'H';\n          break;\n        case '\\u00D9' : // Ù\n        case '\\u00DA' : // Ú\n        case '\\u00DB' : // Û\n        case '\\u00DC' : // Ü\n          output[outputPos++] = 'U';\n          break;\n        case '\\u00DD' : // Ý\n        case '\\u0178' : // Ÿ\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u00E0' : // à\n        case '\\u00E1' : // á\n        case '\\u00E2' : // â\n        case '\\u00E3' : // ã\n        case '\\u00E4' : // ä\n        case '\\u00E5' : // å\n          output[outputPos++] = 'a';\n          break;\n        case '\\u00E6' : // æ\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00E7' : // ç\n          output[outputPos++] = 'c';\n          break;\n        case '\\u00E8' : // è\n        case '\\u00E9' : // é\n        case '\\u00EA' : // ê\n        case '\\u00EB' : // ë\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00EC' : // ì\n        case '\\u00ED' : // í\n        case '\\u00EE' : // î\n        case '\\u00EF' : // ï\n          output[outputPos++] = 'i';\n          break;\n        case '\\u0133' : // ĳ\n            output[outputPos++] = 'i';\n            output[outputPos++] = 'j';\n            break;\n        case '\\u00F0' : // ð\n          output[outputPos++] = 'd';\n          break;\n        case '\\u00F1' : // ñ\n          output[outputPos++] = 'n';\n          break;\n        case '\\u00F2' : // ò\n        case '\\u00F3' : // ó\n        case '\\u00F4' : // ô\n        case '\\u00F5' : // õ\n        case '\\u00F6' : // ö\n        case '\\u00F8' : // ø\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0153' : // œ\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u00DF' : // ß\n          output[outputPos++] = 's';\n          output[outputPos++] = 's';\n          break;\n        case '\\u00FE' : // þ\n          output[outputPos++] = 't';\n          output[outputPos++] = 'h';\n          break;\n        case '\\u00F9' : // ù\n        case '\\u00FA' : // ú\n        case '\\u00FB' : // û\n        case '\\u00FC' : // ü\n          output[outputPos++] = 'u';\n          break;\n        case '\\u00FD' : // ý\n        case '\\u00FF' : // ÿ\n          output[outputPos++] = 'y';\n          break;\n        case '\\uFB00': // ﬀ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'f';\n            break;\n        case '\\uFB01': // ﬁ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'i';\n            break;\n        case '\\uFB02': // ﬂ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 'l';\n            break;\n        // following 2 are commented as they can break the maxSizeNeeded (and doing *3 could be expensive)\n//        case '\\uFB03': // ﬃ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'i';\n//            break;\n//        case '\\uFB04': // ﬄ\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'f';\n//            output[outputPos++] = 'l';\n//            break;\n        case '\\uFB05': // ﬅ\n            output[outputPos++] = 'f';\n            output[outputPos++] = 't';\n            break;\n        case '\\uFB06': // ﬆ\n            output[outputPos++] = 's';\n            output[outputPos++] = 't';\n          break;\n        default :\n          output[outputPos++] = c;\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["967b81abdda07e0975b376eff34820e8adb6270d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"967b81abdda07e0975b376eff34820e8adb6270d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["967b81abdda07e0975b376eff34820e8adb6270d"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"967b81abdda07e0975b376eff34820e8adb6270d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}