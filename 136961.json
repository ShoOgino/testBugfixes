{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","commits":[{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":2,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String]).mjava","sourceNew":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters) throws Exception {\n    this(numServers, hostContext, baseDir, solrXml, extraServlets, extraRequestFilters, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ae1e051eb54651f97786343944abe292d64b50","date":1425934288,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,Path,String,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class[#-extends-Filter],String],SSLConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, Path baseDir, String solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class<? extends Filter>, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    this(numServers, baseDir, solrXml, JettyConfig.builder()\n        .setContext(hostContext)\n        .withSSLConfig(sslConfig)\n        .withFilters(extraRequestFilters)\n        .withServlets(extraServlets)\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82ae1e051eb54651f97786343944abe292d64b50"],"82ae1e051eb54651f97786343944abe292d64b50":["c66158bb16e902a21272772f1b911f04b1a55abb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["82ae1e051eb54651f97786343944abe292d64b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"82ae1e051eb54651f97786343944abe292d64b50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c66158bb16e902a21272772f1b911f04b1a55abb":["82ae1e051eb54651f97786343944abe292d64b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}