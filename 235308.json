{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, postingsFlags);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,int).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, postingsFlags);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}