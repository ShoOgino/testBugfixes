{"path":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c17d12803da6cadc96b3cdf15b0b940eddb28de","date":1323710889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        tokStart = offsetAtt.startOffset();\n        tokEnd = offsetAtt.endOffset();\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        hasIllegalOffsets = (tokStart + termAtt.length()) != tokEnd;\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    if (hasIllegalOffsets) {\n      offsetAtt.setOffset(tokStart, tokEnd);\n    } else {\n      offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    }\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        tokStart = offsetAtt.startOffset();\n        tokEnd = offsetAtt.endOffset();\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        hasIllegalOffsets = (tokStart + termAtt.length()) != tokEnd;\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    if (hasIllegalOffsets) {\n      offsetAtt.setOffset(tokStart, tokEnd);\n    } else {\n      offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    }\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        tokStart = offsetAtt.startOffset();\n        tokEnd = offsetAtt.endOffset();\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        hasIllegalOffsets = (tokStart + termAtt.length()) != tokEnd;\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    if (hasIllegalOffsets) {\n      offsetAtt.setOffset(tokStart, tokEnd);\n    } else {\n      offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    }\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        tokStart = offsetAtt.startOffset();\n        tokEnd = offsetAtt.endOffset();\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        hasIllegalOffsets = (tokStart + termAtt.length()) != tokEnd;\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.toString(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.copyBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    if (hasIllegalOffsets) {\n      offsetAtt.setOffset(tokStart, tokEnd);\n    } else {\n      offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    }\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a7347509fad0711ac30cb15a746e9a3830a38ebd","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4ceb6a6c707ada1df8bde804e25c98668e699a18"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}