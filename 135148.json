{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//      if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//      clauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n//       // do not create modifier nodes with MOD_NONE\n//         if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//          clauses.add(q);\n//        //TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//       return new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n        if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n           q = new ModifierQueryNode(q, mods);\n        }\n        {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//      if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//      clauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n//       // do not create modifier nodes with MOD_NONE\n//         if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//          clauses.add(q);\n//        //TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//       return new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public \nQueryNode ModClause(CharSequence field) throws ParseException {QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\nif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n           q = new ModifierQueryNode(q, mods);\n        }\n        {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//      if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//      clauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n//       // do not create modifier nodes with MOD_NONE\n//         if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//          clauses.add(q);\n//        //TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//       return new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n        if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n           q = new ModifierQueryNode(q, mods);\n        }\n        {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"  final private QueryNode ModClause(CharSequence field) throws ParseException {QueryNode q;\n  ModifierQueryNode.Modifier modifier = ModifierQueryNode.Modifier.MOD_NONE;\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case NOT:\n    case PLUS:\n    case MINUS:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case PLUS:{\n        jj_consume_token(PLUS);\nmodifier = ModifierQueryNode.Modifier.MOD_REQ;\n        break;\n        }\n      case NOT:\n      case MINUS:{\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case MINUS:{\n          jj_consume_token(MINUS);\n          break;\n          }\n        case NOT:{\n          jj_consume_token(NOT);\n          break;\n          }\n        default:\n          jj_la1[3] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nmodifier = ModifierQueryNode.Modifier.MOD_NOT;\n        break;\n        }\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      break;\n      }\n    default:\n      jj_la1[5] = jj_gen;\n      ;\n    }\n    q = Clause(field);\nif (modifier != ModifierQueryNode.Modifier.MOD_NONE) {\n      q = new ModifierQueryNode(q, modifier);\n    }\n    {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//      if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//      clauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n//       // do not create modifier nodes with MOD_NONE\n//         if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//          q = new ModifierQueryNode(q, mods);\n//         }\n//          clauses.add(q);\n//        //TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//       return new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public \nQueryNode ModClause(CharSequence field) throws ParseException {QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\nif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n           q = new ModifierQueryNode(q, mods);\n        }\n        {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}