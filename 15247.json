{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#printStats(FSTCompiler[Object],long,double).mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#printStats(FSTCompiler[Object],long,double).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#printStats(Builder[Object],long,double).mjava","sourceNew":"  private static void printStats(FSTCompiler<Object> fstCompiler, long ramBytesUsed, double directAddressingMemoryIncreasePercent) {\n    System.out.println(\"directAddressingMaxOversizingFactor = \" + fstCompiler.getDirectAddressingMaxOversizingFactor());\n    System.out.println(\"ramBytesUsed = \"\n        + String.format(Locale.ENGLISH, \"%.2f MB\", ramBytesUsed / 1024d / 1024d)\n        + String.format(Locale.ENGLISH, \" (%.2f %% increase with direct addressing)\", directAddressingMemoryIncreasePercent));\n    System.out.println(\"num nodes = \" + fstCompiler.nodeCount);\n    long fixedLengthArcNodeCount = fstCompiler.directAddressingNodeCount + fstCompiler.binarySearchNodeCount;\n    System.out.println(\"num fixed-length-arc nodes = \" + fixedLengthArcNodeCount\n        + String.format(Locale.ENGLISH, \" (%.2f %% of all nodes)\",\n        ((double) fixedLengthArcNodeCount / fstCompiler.nodeCount * 100)));\n    System.out.println(\"num binary-search nodes = \" + (fstCompiler.binarySearchNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (fstCompiler.binarySearchNodeCount) / fixedLengthArcNodeCount * 100)));\n    System.out.println(\"num direct-addressing nodes = \" + (fstCompiler.directAddressingNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (fstCompiler.directAddressingNodeCount) / fixedLengthArcNodeCount * 100)));\n  }\n\n","sourceOld":"  private static void printStats(Builder<Object> builder, long ramBytesUsed, double directAddressingMemoryIncreasePercent) {\n    System.out.println(\"directAddressingMaxOversizingFactor = \" + builder.getDirectAddressingMaxOversizingFactor());\n    System.out.println(\"ramBytesUsed = \"\n        + String.format(Locale.ENGLISH, \"%.2f MB\", ramBytesUsed / 1024d / 1024d)\n        + String.format(Locale.ENGLISH, \" (%.2f %% increase with direct addressing)\", directAddressingMemoryIncreasePercent));\n    System.out.println(\"num nodes = \" + builder.nodeCount);\n    long fixedLengthArcNodeCount = builder.directAddressingNodeCount + builder.binarySearchNodeCount;\n    System.out.println(\"num fixed-length-arc nodes = \" + fixedLengthArcNodeCount\n        + String.format(Locale.ENGLISH, \" (%.2f %% of all nodes)\",\n        ((double) fixedLengthArcNodeCount / builder.nodeCount * 100)));\n    System.out.println(\"num binary-search nodes = \" + (builder.binarySearchNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (builder.binarySearchNodeCount) / fixedLengthArcNodeCount * 100)));\n    System.out.println(\"num direct-addressing nodes = \" + (builder.directAddressingNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (builder.directAddressingNodeCount) / fixedLengthArcNodeCount * 100)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#printStats(FSTCompiler[Object],long,double).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#printStats(Builder[Object],long,double).mjava","sourceNew":"  private static void printStats(FSTCompiler<Object> fstCompiler, long ramBytesUsed, double directAddressingMemoryIncreasePercent) {\n    System.out.println(\"directAddressingMaxOversizingFactor = \" + fstCompiler.getDirectAddressingMaxOversizingFactor());\n    System.out.println(\"ramBytesUsed = \"\n        + String.format(Locale.ENGLISH, \"%.2f MB\", ramBytesUsed / 1024d / 1024d)\n        + String.format(Locale.ENGLISH, \" (%.2f %% increase with direct addressing)\", directAddressingMemoryIncreasePercent));\n    System.out.println(\"num nodes = \" + fstCompiler.nodeCount);\n    long fixedLengthArcNodeCount = fstCompiler.directAddressingNodeCount + fstCompiler.binarySearchNodeCount;\n    System.out.println(\"num fixed-length-arc nodes = \" + fixedLengthArcNodeCount\n        + String.format(Locale.ENGLISH, \" (%.2f %% of all nodes)\",\n        ((double) fixedLengthArcNodeCount / fstCompiler.nodeCount * 100)));\n    System.out.println(\"num binary-search nodes = \" + (fstCompiler.binarySearchNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (fstCompiler.binarySearchNodeCount) / fixedLengthArcNodeCount * 100)));\n    System.out.println(\"num direct-addressing nodes = \" + (fstCompiler.directAddressingNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (fstCompiler.directAddressingNodeCount) / fixedLengthArcNodeCount * 100)));\n  }\n\n","sourceOld":"  private static void printStats(Builder<Object> builder, long ramBytesUsed, double directAddressingMemoryIncreasePercent) {\n    System.out.println(\"directAddressingMaxOversizingFactor = \" + builder.getDirectAddressingMaxOversizingFactor());\n    System.out.println(\"ramBytesUsed = \"\n        + String.format(Locale.ENGLISH, \"%.2f MB\", ramBytesUsed / 1024d / 1024d)\n        + String.format(Locale.ENGLISH, \" (%.2f %% increase with direct addressing)\", directAddressingMemoryIncreasePercent));\n    System.out.println(\"num nodes = \" + builder.nodeCount);\n    long fixedLengthArcNodeCount = builder.directAddressingNodeCount + builder.binarySearchNodeCount;\n    System.out.println(\"num fixed-length-arc nodes = \" + fixedLengthArcNodeCount\n        + String.format(Locale.ENGLISH, \" (%.2f %% of all nodes)\",\n        ((double) fixedLengthArcNodeCount / builder.nodeCount * 100)));\n    System.out.println(\"num binary-search nodes = \" + (builder.binarySearchNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (builder.binarySearchNodeCount) / fixedLengthArcNodeCount * 100)));\n    System.out.println(\"num direct-addressing nodes = \" + (builder.directAddressingNodeCount)\n        + String.format(Locale.ENGLISH, \" (%.2f %% of fixed-length-arc nodes)\",\n        ((double) (builder.directAddressingNodeCount) / fixedLengthArcNodeCount * 100)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}