{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(acceptDocs, minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return pointInPolygon(lat, lon);\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"087ab61b67c554befcfe6f666ca3bb613eac8fe3","date":1433956986,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(acceptDocs, minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.INSIDE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CROSSES;\n                                             } else {\n                                               return BKDTreeReader.Relation.OUTSIDE;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(acceptDocs, minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return pointInPolygon(lat, lon);\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context);\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.INSIDE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CROSSES;\n                                             } else {\n                                               return BKDTreeReader.Relation.OUTSIDE;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(acceptDocs, minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.INSIDE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CROSSES;\n                                             } else {\n                                               return BKDTreeReader.Relation.OUTSIDE;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context);\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context);\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        // TODO: make this more efficient: as we recurse the BKD tree we should check whether the\n        // bbox we are recursing into intersects our shape; Apache SIS may have (non-GPL!) code to do this?\n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.INSIDE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CROSSES;\n                                             } else {\n                                               return BKDTreeReader.Relation.OUTSIDE;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new Weight(this) {\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context);\n        final boolean exists = s != null && s.advance(doc) == doc;\n\n        if (exists) {\n          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + \", product of:\",\n              Explanation.match(getBoost(), \"boost\"), Explanation.match(queryNorm, \"queryNorm\"));\n        } else {\n          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + \" doesn't match id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        return new ConstantScoreScorer(this, score(), result.iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    // TODO: except that the polygon verify is costly!  The approximation should be all docs in all overlapping cells, and matches() should\n    // then check the polygon\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof BKDTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with BKDTreeDocValuesFormat: got: \" + sdv);\n        }\n        BKDTreeSortedNumericDocValues treeDV = (BKDTreeSortedNumericDocValues) sdv;\n        BKDTreeReader tree = treeDV.getBKDTreeReader();\n        \n        DocIdSet result = tree.intersect(minLat, maxLat, minLon, maxLon,\n                                         new BKDTreeReader.LatLonFilter() {\n                                           @Override\n                                           public boolean accept(double lat, double lon) {\n                                             return GeoUtils.pointInPolygon(polyLons, polyLats, lat, lon);\n                                           }\n\n                                           @Override\n                                           public BKDTreeReader.Relation compare(double cellLatMin, double cellLatMax, double cellLonMin, double cellLonMax) {\n                                             if (GeoUtils.rectWithinPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                         polyLons, polyLats,\n                                                                         minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             } else if (GeoUtils.rectCrossesPoly(cellLonMin, cellLatMin, cellLonMax, cellLatMax,\n                                                                                 polyLons, polyLats,\n                                                                                 minLon, minLat, maxLon, maxLat)) {\n                                               return BKDTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             } else {\n                                               return BKDTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             }\n                                           }\n                                         }, treeDV.delegate);\n\n        return new ConstantScoreScorer(this, score(), result.iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["087ab61b67c554befcfe6f666ca3bb613eac8fe3"],"f64b7098768253180859cd8faeae6b1a185b06ed":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"087ab61b67c554befcfe6f666ca3bb613eac8fe3":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"087ab61b67c554befcfe6f666ca3bb613eac8fe3":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["087ab61b67c554befcfe6f666ca3bb613eac8fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}