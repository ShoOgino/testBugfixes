{"path":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc, false);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().terms(\"id\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ee0394b8176abd7c90a4be8c05465be1879db79"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}