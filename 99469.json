{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73187ff81dbd931417f46f53360c5dcf390ebde2","date":1342466689,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec23248a1e6b0842fd81da59688eabdb082f981b","date":1355494087,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();\n    List<String> fragments = new ArrayList<String>( limitFragments );\n\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < limitFragments; n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();\n    List<String> fragments = new ArrayList<String>( limitFragments );\n\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < limitFragments; n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();\n    List<String> fragments = new ArrayList<>( limitFragments );\n\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < limitFragments; n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  @Override\n  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n\n    if( maxNumFragments < 0 ) {\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n    }\n\n    List<WeightedFragInfo> fragInfos = fieldFragList.getFragInfos();\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) {\n      return null;\n    }\n\n    if (discreteMultiValueHighlighting && values.length > 1) {\n      fragInfos = discreteMultiValueHighlighting(fragInfos, values);\n    }\n\n    fragInfos = getWeightedFragInfoList(fragInfos);\n    int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();\n    List<String> fragments = new ArrayList<String>( limitFragments );\n\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < limitFragments; n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["73187ff81dbd931417f46f53360c5dcf390ebde2","ec23248a1e6b0842fd81da59688eabdb082f981b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ec23248a1e6b0842fd81da59688eabdb082f981b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","73187ff81dbd931417f46f53360c5dcf390ebde2"],"ec23248a1e6b0842fd81da59688eabdb082f981b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","73187ff81dbd931417f46f53360c5dcf390ebde2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["73187ff81dbd931417f46f53360c5dcf390ebde2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["73187ff81dbd931417f46f53360c5dcf390ebde2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ec23248a1e6b0842fd81da59688eabdb082f981b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["ec23248a1e6b0842fd81da59688eabdb082f981b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}