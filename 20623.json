{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testAsyncCachingHitsClosedReader().mjava","commits":[{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testAsyncCachingHitsClosedReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testAsyncCachingHitsClosedReader() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"color\", \"red\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    w.close();\n\n    // Because our index has a single document, it also has a single segment. In that\n    // case, IndexSearcher will use the current thread for searching, so the only thing\n    // that runs via the executor is the caching of queries.\n    final CountDownLatch[] awaitCaching = new CountDownLatch[1];\n    awaitCaching[0] = new CountDownLatch(1);\n    final CountDownLatch[] cachingRan = new CountDownLatch[1];\n    cachingRan[0] = new CountDownLatch(1);\n    final AtomicBoolean success = new AtomicBoolean(false);\n    Executor executor = runnable -> {\n      new Thread(() -> {\n        try {\n          awaitCaching[0].await();\n          runnable.run();\n          success.set(true);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        } finally {\n          cachingRan[0].countDown();\n        }\n      }).start();\n    };\n\n    final IndexSearcher searcher = new IndexSearcher(reader, executor);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.search(new ConstantScoreQuery(new TermQuery(new Term(\"color\", \"red\"))), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n    awaitCaching[0].countDown();\n    cachingRan[0].await();\n    assertTrue(success.get());\n    assertEquals(Collections.singletonList(new TermQuery(new Term(\"color\", \"red\"))), queryCache.cachedQueries());\n\n    awaitCaching[0] = new CountDownLatch(1);\n    cachingRan[0] = new CountDownLatch(1);\n    success.set(false);\n    queryCache.clear();\n\n    searcher.search(new ConstantScoreQuery(new TermQuery(new Term(\"color\", \"red\"))), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n    reader.close();\n    awaitCaching[0].countDown();\n    cachingRan[0].await();\n    assertTrue(success.get());\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testAsyncCachingHitsClosedReader().mjava","sourceNew":null,"sourceOld":"  public void testAsyncCachingHitsClosedReader() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"color\", \"red\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    w.close();\n\n    // Because our index has a single document, it also has a single segment. In that\n    // case, IndexSearcher will use the current thread for searching, so the only thing\n    // that runs via the executor is the caching of queries.\n    final CountDownLatch[] awaitCaching = new CountDownLatch[1];\n    awaitCaching[0] = new CountDownLatch(1);\n    final CountDownLatch[] cachingRan = new CountDownLatch[1];\n    cachingRan[0] = new CountDownLatch(1);\n    final AtomicBoolean success = new AtomicBoolean(false);\n    Executor executor = runnable -> {\n      new Thread(() -> {\n        try {\n          awaitCaching[0].await();\n          runnable.run();\n          success.set(true);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        } finally {\n          cachingRan[0].countDown();\n        }\n      }).start();\n    };\n\n    final IndexSearcher searcher = new IndexSearcher(reader, executor);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.search(new ConstantScoreQuery(new TermQuery(new Term(\"color\", \"red\"))), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n    awaitCaching[0].countDown();\n    cachingRan[0].await();\n    assertTrue(success.get());\n    assertEquals(Collections.singletonList(new TermQuery(new Term(\"color\", \"red\"))), queryCache.cachedQueries());\n\n    awaitCaching[0] = new CountDownLatch(1);\n    cachingRan[0] = new CountDownLatch(1);\n    success.set(false);\n    queryCache.clear();\n\n    searcher.search(new ConstantScoreQuery(new TermQuery(new Term(\"color\", \"red\"))), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n    reader.close();\n    awaitCaching[0].countDown();\n    cachingRan[0].await();\n    assertTrue(success.get());\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}