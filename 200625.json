{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","commits":[{"id":"e6eff3a1335608b62ce74c7f052b277baedb721e","date":1382897865,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  protected SpatialStrategy makeSpatialStrategy(final Config config, Map<String, String> configMap,\n                                                SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, SPATIAL_FIELD) {\n      {\n        //protected field\n        this.pointsOnly = config.get(\"spatial.docPointsOnly\", false);\n      }\n    };\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","sourceNew":"  protected SpatialStrategy makeSpatialStrategy(final Config config, Map<String, String> configMap,\n                                                SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, SPATIAL_FIELD);\n    strategy.setPointsOnly(config.get(\"spatial.docPointsOnly\", false));\n    strategy.setPruneLeafyBranches(config.get(\"spatial.pruneLeafyBranches\", true));\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","sourceOld":"  protected SpatialStrategy makeSpatialStrategy(final Config config, Map<String, String> configMap,\n                                                SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, SPATIAL_FIELD) {\n      {\n        //protected field\n        this.pointsOnly = config.get(\"spatial.docPointsOnly\", false);\n      }\n    };\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeSpatialStrategy(Config,Map[String,String],SpatialContext).mjava","sourceNew":"  protected SpatialStrategy makeSpatialStrategy(final Config config, Map<String, String> configMap,\n                                                SpatialContext ctx) {\n    //TODO once strategies have factories, we could use them here.\n    final String strategyName = config.get(\"spatial.strategy\", \"rpt\");\n    switch (strategyName) {\n      case \"rpt\": return makeRPTStrategy(SPATIAL_FIELD, config, configMap, ctx);\n      case \"composite\": return makeCompositeStrategy(config, configMap, ctx);\n      //TODO add more as-needed\n      default: throw new IllegalStateException(\"Unknown spatial.strategy: \" + strategyName);\n    }\n  }\n\n","sourceOld":"  protected SpatialStrategy makeSpatialStrategy(final Config config, Map<String, String> configMap,\n                                                SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, SPATIAL_FIELD);\n    strategy.setPointsOnly(config.get(\"spatial.docPointsOnly\", false));\n    strategy.setPruneLeafyBranches(config.get(\"spatial.pruneLeafyBranches\", true));\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6eff3a1335608b62ce74c7f052b277baedb721e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"]},"commit2Childs":{"e6eff3a1335608b62ce74c7f052b277baedb721e":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}