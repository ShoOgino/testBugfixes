{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Random random = newRandom();\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(dir3, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(dir3, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Random random = newRandom();\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(dir3, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(dir3, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(dir3, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    File indexDir1 = new File(TEMP_DIR, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(TEMP_DIR, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(TEMP_DIR, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.addIndexes(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getConfig().getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bd82f9f7ac6b7ae532616311b08252338e335d","date":1297527663,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.setInfoStream(VERBOSE ? System.out : null);\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.setInfoStream(VERBOSE ? System.out : null);\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.setInfoStream(VERBOSE ? System.out : null);\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.setInfoStream(VERBOSE ? System.out : null);\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * full merge.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/full merge\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.forceMerge(1);\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with full merge\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.forceMerge(1);\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/optimize\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with optimize\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * full merge.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/full merge\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.forceMerge(1);\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with full merge\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.forceMerge(1);\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * full merge.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/full merge\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.forceMerge(1);\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with full merge\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.forceMerge(1);\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * full merge.\n   */\n  public void testNorms() throws IOException {\n    // test with a single index: index1\n    Directory dir1 = newDirectory();\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(random, dir1);\n    doTestNorms(random, dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n\n    Directory dir2 = newDirectory();\n\n    createIndex(random, dir2);\n    doTestNorms(random, dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = newDirectory();\n\n    createIndex(random, dir3);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now addIndexes/full merge\");\n    }\n    IndexWriter iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n        setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.addIndexes(dir1, dir2);\n    iw.forceMerge(1);\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(random, dir3);\n\n    // now with full merge\n    iw = new IndexWriter(\n        dir3,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, anlzr).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(5).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    iw.forceMerge(1);\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","08bd82f9f7ac6b7ae532616311b08252338e335d"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","08bd82f9f7ac6b7ae532616311b08252338e335d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","08bd82f9f7ac6b7ae532616311b08252338e335d"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","06584e6e98d592b34e1329b384182f368d2025e8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}