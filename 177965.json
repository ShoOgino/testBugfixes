{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final Terms terms = readerContext.reader().terms(indexedField);\n\n    return new IntDocValues(this) {\n      PostingsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.postings(null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new PostingsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final Terms terms = readerContext.reader().terms(indexedField);\n\n    return new IntDocValues(this) {\n      PostingsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.postings(null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new PostingsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}