{"path":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","commits":[{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"/dev/null","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"/dev/null","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"/dev/null","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8","date":1535113998,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testHardDeleteSoftDeleted().mjava","sourceNew":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testHardDeleteSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    assertTrue(pendingSoftDeletes.delete(1));\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(-1, pendingSoftDeletes.pendingDeleteCount); // transferred the delete\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","4a90cc8c90aa53ddf51fbd15019989ac269514a3","f592209545c71895260367152601e9200399776d"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}