{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    Thread.sleep(1000000000);\n//    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n//    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    Thread.sleep(1000000000);\n//    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n//    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n//    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df90d3a4877753a1be8bab8241becef2265e61cd","date":1519638982,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 300, TimeUnit.SECONDS, clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Pair<String, String> hint = (Pair<String, String>)op.getHints().get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'rate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(\"node\");\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1294fc81133ad1c53ea75edf471f5bea39621e68","date":1528194755,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  // JIRA closed 24-Feb-2018. Still apparently a problem.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFiredLatch.await(40000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(3, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":["d9ccfe45460d496c5e5e1b70396521dac842d966","9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"df90d3a4877753a1be8bab8241becef2265e61cd":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["df90d3a4877753a1be8bab8241becef2265e61cd"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["9c6c0dad4932399aec99b4818086cb1772773916","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a4422b331d00607258b0ed3e43934306e67764aa","d9ccfe45460d496c5e5e1b70396521dac842d966"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9c6c0dad4932399aec99b4818086cb1772773916":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["9c6c0dad4932399aec99b4818086cb1772773916"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","1294fc81133ad1c53ea75edf471f5bea39621e68"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"f592209545c71895260367152601e9200399776d":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","1294fc81133ad1c53ea75edf471f5bea39621e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["a4422b331d00607258b0ed3e43934306e67764aa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"df90d3a4877753a1be8bab8241becef2265e61cd":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["9c6c0dad4932399aec99b4818086cb1772773916"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["b70042a8a492f7054d480ccdd2be9796510d4327","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","f592209545c71895260367152601e9200399776d"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["df90d3a4877753a1be8bab8241becef2265e61cd"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"9c6c0dad4932399aec99b4818086cb1772773916":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}