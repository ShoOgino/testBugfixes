{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#writeRecursively(DataOutputStream,TSTNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#writeRecursively(DataOutputStream,TSTNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#writeRecursively(DataOutputStream,TSTNode).mjava","sourceNew":"  private void writeRecursively(DataOutputStream out, TSTNode node) throws IOException {\n    if (node == null) {\n      return;\n    }\n    out.writeChar(node.splitchar);\n    byte mask = 0;\n    if (node.relatives[TSTNode.LOKID] != null) mask |= LO_KID;\n    if (node.relatives[TSTNode.EQKID] != null) mask |= EQ_KID;\n    if (node.relatives[TSTNode.HIKID] != null) mask |= HI_KID;\n    if (node.data != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.data != null) {\n      out.writeLong(((Number)node.data).longValue());\n    }\n    writeRecursively(out, node.relatives[TSTNode.LOKID]);\n    writeRecursively(out, node.relatives[TSTNode.EQKID]);\n    writeRecursively(out, node.relatives[TSTNode.HIKID]);\n  }\n\n","sourceOld":"  private void writeRecursively(DataOutputStream out, TSTNode node) throws IOException {\n    if (node == null) {\n      return;\n    }\n    out.writeChar(node.splitchar);\n    byte mask = 0;\n    if (node.relatives[TSTNode.LOKID] != null) mask |= LO_KID;\n    if (node.relatives[TSTNode.EQKID] != null) mask |= EQ_KID;\n    if (node.relatives[TSTNode.HIKID] != null) mask |= HI_KID;\n    if (node.data != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.data != null) {\n      out.writeLong(((Number)node.data).longValue());\n    }\n    writeRecursively(out, node.relatives[TSTNode.LOKID]);\n    writeRecursively(out, node.relatives[TSTNode.EQKID]);\n    writeRecursively(out, node.relatives[TSTNode.HIKID]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":5,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#writeRecursively(DataOutput,TSTNode).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#writeRecursively(DataOutputStream,TSTNode).mjava","sourceNew":"  private void writeRecursively(DataOutput out, TSTNode node) throws IOException {\n    if (node == null) {\n      return;\n    }\n    out.writeString(new String(new char[] {node.splitchar}, 0, 1));\n    byte mask = 0;\n    if (node.relatives[TSTNode.LOKID] != null) mask |= LO_KID;\n    if (node.relatives[TSTNode.EQKID] != null) mask |= EQ_KID;\n    if (node.relatives[TSTNode.HIKID] != null) mask |= HI_KID;\n    if (node.data != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.data != null) {\n      out.writeLong(((Number)node.data).longValue());\n    }\n    writeRecursively(out, node.relatives[TSTNode.LOKID]);\n    writeRecursively(out, node.relatives[TSTNode.EQKID]);\n    writeRecursively(out, node.relatives[TSTNode.HIKID]);\n  }\n\n","sourceOld":"  private void writeRecursively(DataOutputStream out, TSTNode node) throws IOException {\n    if (node == null) {\n      return;\n    }\n    out.writeChar(node.splitchar);\n    byte mask = 0;\n    if (node.relatives[TSTNode.LOKID] != null) mask |= LO_KID;\n    if (node.relatives[TSTNode.EQKID] != null) mask |= EQ_KID;\n    if (node.relatives[TSTNode.HIKID] != null) mask |= HI_KID;\n    if (node.data != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.data != null) {\n      out.writeLong(((Number)node.data).longValue());\n    }\n    writeRecursively(out, node.relatives[TSTNode.LOKID]);\n    writeRecursively(out, node.relatives[TSTNode.EQKID]);\n    writeRecursively(out, node.relatives[TSTNode.HIKID]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a645276cbaf5dc96a42fd473b9019bde352996c8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a645276cbaf5dc96a42fd473b9019bde352996c8"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}