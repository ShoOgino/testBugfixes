{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","commits":[{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","sourceOld":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"085e5eccb1e06e3bfb487813880adc54c888dd02","date":1483875517,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","sourceOld":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","sourceOld":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    Automaton expectedDet = Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES);\n    Automaton actualDet = Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES);\n    if (Operations.sameLanguage(expectedDet, actualDet) == false) {\n      Set<String> expectedPaths = toPathStrings(expectedDet);\n      Set<String> actualPaths = toPathStrings(actualDet);\n      StringBuilder b = new StringBuilder();\n      b.append(\"expected:\\n\");\n      for(String path : expectedPaths) {\n        b.append(\"  \");\n        b.append(path);\n        if (actualPaths.contains(path) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n      b.append(\"actual:\\n\");\n      for(String path : actualPaths) {\n        b.append(\"  \");\n        b.append(path);\n        if (expectedPaths.contains(path) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n      fail(\"accepted language is different:\\n\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#assertSameLanguage(Automaton,Automaton).mjava","sourceNew":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    Automaton expectedDet = Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES);\n    Automaton actualDet = Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES);\n    if (Operations.sameLanguage(expectedDet, actualDet) == false) {\n      Set<String> expectedPaths = toPathStrings(expectedDet);\n      Set<String> actualPaths = toPathStrings(actualDet);\n      StringBuilder b = new StringBuilder();\n      b.append(\"expected:\\n\");\n      for(String path : expectedPaths) {\n        b.append(\"  \");\n        b.append(path);\n        if (actualPaths.contains(path) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n      b.append(\"actual:\\n\");\n      for(String path : actualPaths) {\n        b.append(\"  \");\n        b.append(path);\n        if (expectedPaths.contains(path) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n      fail(\"accepted language is different:\\n\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertSameLanguage(Automaton expected, Automaton actual) {\n    assertTrue(Operations.sameLanguage(\n      Operations.determinize(Operations.removeDeadStates(expected), DEFAULT_MAX_DETERMINIZED_STATES),\n      Operations.determinize(Operations.removeDeadStates(actual), DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["085e5eccb1e06e3bfb487813880adc54c888dd02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","085e5eccb1e06e3bfb487813880adc54c888dd02"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"085e5eccb1e06e3bfb487813880adc54c888dd02":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","085e5eccb1e06e3bfb487813880adc54c888dd02"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"085e5eccb1e06e3bfb487813880adc54c888dd02":["098528909bb70948871fd7ed865fafb87ed73964","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}