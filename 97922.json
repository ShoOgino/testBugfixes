{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70b55953b6a72596cb534ead735a8b849a473cac":["1d028314cced5858683a1bb4741423d0f934257b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70b55953b6a72596cb534ead735a8b849a473cac"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["70b55953b6a72596cb534ead735a8b849a473cac"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"70b55953b6a72596cb534ead735a8b849a473cac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}