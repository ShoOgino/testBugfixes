{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","commits":[{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantTopScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5794e5c995c57444b154b01a9f3c837cd530a77","acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}