{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","pathOld":"/dev/null","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","pathOld":"/dev/null","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PointWriter).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    // Not inside the try because we don't want to close it here:\n\n    try (PointReader reader = source.getReader(0, count);\n        HeapPointWriter writer = new HeapPointWriter(count, count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        reader.packedValue(scratchBytesRef1);\n        writer.append(scratchBytesRef1, reader.docID());\n      }\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}