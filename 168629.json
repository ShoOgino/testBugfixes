{"path":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","commits":[{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#setBottom(int).mjava","sourceNew":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  void setBottom(final int slot);\n\n","sourceOld":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  public abstract void setBottom(final int slot);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","sourceNew":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  void setBottom(final int slot) throws IOException;\n\n","sourceOld":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  void setBottom(final int slot);\n\n","bugFix":["901e951cec2e6af4e503209a6721c8834db23279"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#setBottom(int).mjava","sourceNew":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  void setBottom(final int slot) throws IOException;\n\n","sourceOld":"  /**\n   * Set the bottom slot, ie the \"weakest\" (sorted last)\n   * entry in the queue.  When {@link #compareBottom} is\n   * called, you should compare against this slot.  This\n   * will always be called before {@link #compareBottom}.\n   * \n   * @param slot the currently weakest (sorted last) slot in the queue\n   */\n  void setBottom(final int slot);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["901e951cec2e6af4e503209a6721c8834db23279","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}