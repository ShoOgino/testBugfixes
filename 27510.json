{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/CannedAnalyzer.CannedTokenizer#incrementToken().mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CannedAnalyzer.CannedTokenizer#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      if (upto < tokens.length) {\n        final Token token = tokens[upto++];     \n        // TODO: can we just capture/restoreState so\n        // we get all attrs...?\n        clearAttributes();      \n        termAtt.setEmpty();\n        termAtt.append(token.toString());\n        posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n        offsetAtt.setOffset(token.startOffset(), token.endOffset());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        final TokenAndPos token = tokens[upto++];\n        termAtt.setEmpty();\n        termAtt.append(token.token);\n        posIncrAtt.setPositionIncrement(token.pos - lastPos);\n        lastPos = token.pos;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CannedAnalyzer.CannedTokenizer#incrementToken().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CannedAnalyzer.CannedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      if (upto < tokens.length) {\n        final Token token = tokens[upto++];     \n        // TODO: can we just capture/restoreState so\n        // we get all attrs...?\n        clearAttributes();      \n        termAtt.setEmpty();\n        termAtt.append(token.toString());\n        posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n        offsetAtt.setOffset(token.startOffset(), token.endOffset());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      if (upto < tokens.length) {\n        final Token token = tokens[upto++];     \n        // TODO: can we just capture/restoreState so\n        // we get all attrs...?\n        clearAttributes();      \n        termAtt.setEmpty();\n        termAtt.append(token.toString());\n        posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n        offsetAtt.setOffset(token.startOffset(), token.endOffset());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}