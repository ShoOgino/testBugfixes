{"path":"lucene/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int[],int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an array backed by the given blocks.\n   * </p><p>\n   * Note: The blocks are used directly, so changes to the given block will\n   * affect the Packed32-structure.\n   * @param blocks   used as the internal backing array.\n   * @param valueCount   the number of values.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int[] blocks, int valueCount, int bitsPerValue) {\n    // TODO: Check that blocks.length is sufficient for holding length values\n    super(valueCount, bitsPerValue);\n    if (bitsPerValue > 31) {\n      throw new IllegalArgumentException(String.format(\n              \"This array only supports values of 31 bits or less. The \"\n                      + \"required number of bits was %d. The Packed64 \"\n                      + \"implementation allows values with more than 31 bits\",\n              bitsPerValue));\n    }\n    this.blocks = blocks;\n    updateCached();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int[],int,int).mjava","sourceNew":"  /**\n   * Creates an array backed by the given blocks.\n   * </p><p>\n   * Note: The blocks are used directly, so changes to the given block will\n   * affect the Packed32-structure.\n   * @param blocks   used as the internal backing array.\n   * @param valueCount   the number of values.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int[] blocks, int valueCount, int bitsPerValue) {\n    // TODO: Check that blocks.length is sufficient for holding length values\n    super(valueCount, bitsPerValue);\n    if (bitsPerValue > 31) {\n      throw new IllegalArgumentException(String.format(\n              \"This array only supports values of 31 bits or less. The \"\n                      + \"required number of bits was %d. The Packed64 \"\n                      + \"implementation allows values with more than 31 bits\",\n              bitsPerValue));\n    }\n    this.blocks = blocks;\n    updateCached();\n  }\n\n","sourceOld":"  /**\n   * Creates an array backed by the given blocks.\n   * </p><p>\n   * Note: The blocks are used directly, so changes to the given block will\n   * affect the Packed32-structure.\n   * @param blocks   used as the internal backing array.\n   * @param valueCount   the number of values.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int[] blocks, int valueCount, int bitsPerValue) {\n    // TODO: Check that blocks.length is sufficient for holding length values\n    super(valueCount, bitsPerValue);\n    if (bitsPerValue > 31) {\n      throw new IllegalArgumentException(String.format(\n              \"This array only supports values of 31 bits or less. The \"\n                      + \"required number of bits was %d. The Packed64 \"\n                      + \"implementation allows values with more than 31 bits\",\n              bitsPerValue));\n    }\n    this.blocks = blocks;\n    updateCached();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}