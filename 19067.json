{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","commits":[{"id":"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa","date":1379529236,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<String>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<String>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<String>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<String>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f3bfdf2fbf9eb7c32953111625b8149f767900","date":1398169177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    for (String name : oldIndexDirs.keySet()) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n\n      String path = dir.getAbsolutePath();\n      \n      List<String> args = new ArrayList<>();\n      if (random().nextBoolean()) {\n        args.add(\"-verbose\");\n      }\n      if (random().nextBoolean()) {\n        args.add(\"-delete-prior-commits\");\n      }\n      if (random().nextBoolean()) {\n        // TODO: need to better randomize this, but ...\n        //  - LuceneTestCase.FS_DIRECTORIES is private\n        //  - newFSDirectory returns BaseDirectoryWrapper\n        //  - BaseDirectoryWrapper doesn't expose delegate\n        Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n          SimpleFSDirectory.class : NIOFSDirectory.class;\n\n        args.add(\"-dir-impl\");\n        args.add(dirImpl.getName());\n      }\n      args.add(path);\n\n      IndexUpgrader upgrader = null;\n      try {\n        upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n      } catch (Exception e) {\n        throw new AssertionError(\"unable to parse args: \" + args, e);\n      }\n      upgrader.upgrade();\n      \n      Directory upgradedDir = newFSDirectory(dir);\n      try {\n        checkAllSegmentsUpgraded(upgradedDir);\n      } finally {\n        upgradedDir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["f1f3bfdf2fbf9eb7c32953111625b8149f767900"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f1f3bfdf2fbf9eb7c32953111625b8149f767900","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f1f3bfdf2fbf9eb7c32953111625b8149f767900","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}