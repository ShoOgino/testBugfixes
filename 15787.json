{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter#doTestMixup(FieldType,FieldType).mjava","commits":[{"id":"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8","date":1398861883,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter#doTestMixup(FieldType,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMixup(FieldType ft1, FieldType ft2) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // add 3 good docs\n    for (int i = 0; i < 3; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(i), Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    // add broken doc\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value1\", ft1));\n    doc.add(new Field(\"field\", \"value2\", ft2));\n    \n    // ensure broken doc hits exception\n    try {\n      iw.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      assertNotNull(iae.getMessage());\n      assertTrue(iae.getMessage().startsWith(\"all instances of a given field name must have the same term vectors settings\"));\n    }\n    \n    // ensure good docs are still ok\n    IndexReader ir = iw.getReader();\n    assertEquals(3, ir.numDocs());\n    \n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter#doTestMixup(FieldType,FieldType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter#doTestMixup(FieldType,FieldType).mjava","sourceNew":"  private void doTestMixup(FieldType ft1, FieldType ft2) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // add 3 good docs\n    for (int i = 0; i < 3; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(i), Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    // add broken doc\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value1\", ft1));\n    doc.add(new Field(\"field\", \"value2\", ft2));\n    \n    // ensure broken doc hits exception\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iw.addDocument(doc);\n    });\n    assertNotNull(expected.getMessage());\n    assertTrue(expected.getMessage().startsWith(\"all instances of a given field name must have the same term vectors settings\"));\n    \n    // ensure good docs are still ok\n    IndexReader ir = iw.getReader();\n    assertEquals(3, ir.numDocs());\n    \n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestMixup(FieldType ft1, FieldType ft2) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // add 3 good docs\n    for (int i = 0; i < 3; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(i), Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    \n    // add broken doc\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value1\", ft1));\n    doc.add(new Field(\"field\", \"value2\", ft2));\n    \n    // ensure broken doc hits exception\n    try {\n      iw.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      assertNotNull(iae.getMessage());\n      assertTrue(iae.getMessage().startsWith(\"all instances of a given field name must have the same term vectors settings\"));\n    }\n    \n    // ensure good docs are still ok\n    IndexReader ir = iw.getReader();\n    assertEquals(3, ir.numDocs());\n    \n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}