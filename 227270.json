{"path":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","commits":[{"id":"462dfb1d8690f192817503773f5b8b94a702246a","date":1280128992,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = directory.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = directory.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","date":1306408552,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = directory.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = directory.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = directory.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file, context);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file, context);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"462dfb1d8690f192817503773f5b8b94a702246a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["462dfb1d8690f192817503773f5b8b94a702246a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","462dfb1d8690f192817503773f5b8b94a702246a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["462dfb1d8690f192817503773f5b8b94a702246a","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["462dfb1d8690f192817503773f5b8b94a702246a","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"]},"commit2Childs":{"462dfb1d8690f192817503773f5b8b94a702246a":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","3242a09f703274d3b9283f2064a1a33064b53a1b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["462dfb1d8690f192817503773f5b8b94a702246a","3242a09f703274d3b9283f2064a1a33064b53a1b"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}