{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCaseJ4#startServer(Searchable).mjava","sourceNew":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","sourceOld":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCaseJ4#startServer(Searchable).mjava","sourceNew":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","sourceOld":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","sourceNew":null,"sourceOld":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","sourceNew":null,"sourceOld":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/RemoteTestCase#startServer(Searchable).mjava","sourceNew":null,"sourceOld":"  public static void startServer(Searchable searchable) throws Exception {\n    // publish it\n    // use our own factories for testing, so we can bind to an ephemeral port.\n    RMIClientSocketFactory clientFactory = new RMIClientSocketFactory() {\n      public Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n      }};\n\n    class TestRMIServerSocketFactory implements RMIServerSocketFactory {\n      ServerSocket socket;\n      public ServerSocket createServerSocket(int port) throws IOException {\n        return (socket = new ServerSocket(port));\n      }\n    };\n    TestRMIServerSocketFactory serverFactory = new TestRMIServerSocketFactory();\n    \n    LocateRegistry.createRegistry(0, clientFactory, serverFactory);\n    RemoteSearchable impl = new RemoteSearchable(searchable);\n    port = serverFactory.socket.getLocalPort();\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["43b04c27924fe393e38e9f0986e32c634f261859","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43b04c27924fe393e38e9f0986e32c634f261859"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"43b04c27924fe393e38e9f0986e32c634f261859":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}