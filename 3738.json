{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","commits":[{"id":"7a118fcb91dbf1aea61227687b4241d7b136558d","date":1323554852,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext(), null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext(), null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04d96eb3480582ebc4cc14711c2ca1a032791d75","date":1327856672,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a118fcb91dbf1aea61227687b4241d7b136558d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["7a118fcb91dbf1aea61227687b4241d7b136558d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["7a118fcb91dbf1aea61227687b4241d7b136558d","04d96eb3480582ebc4cc14711c2ca1a032791d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","04d96eb3480582ebc4cc14711c2ca1a032791d75","5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a118fcb91dbf1aea61227687b4241d7b136558d","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}