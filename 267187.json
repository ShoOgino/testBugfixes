{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","commits":[{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de43294c430a8d5ff73e51951f99d4df405ab9c6","date":1471378375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      // for the first element, check that remove is not supported\n      if (i == 0) {\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      // for the first element, check that remove is not supported\n      if (i == 0) {\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      // for the first element, check that remove is not supported\n      if (i == 0) {\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      // for the first element, check that remove is not supported\n      if (i == 0) {\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0936055c0eed56be3e4ae5c9db5b0e355390736a","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"de43294c430a8d5ff73e51951f99d4df405ab9c6":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["0936055c0eed56be3e4ae5c9db5b0e355390736a","de43294c430a8d5ff73e51951f99d4df405ab9c6"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0936055c0eed56be3e4ae5c9db5b0e355390736a","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de43294c430a8d5ff73e51951f99d4df405ab9c6":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","de43294c430a8d5ff73e51951f99d4df405ab9c6","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}