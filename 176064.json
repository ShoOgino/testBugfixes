{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String stringFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"date_dtdm\");  \n    assertTrue(stringFacet.contains(\"<lst name=\\\"(MISSING)\\\">\"));  \n    ArrayList<Double> string = (ArrayList<Double>)xmlToList(stringFacet, \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(string,stringTest);\n    \n    //Int String\n    String intStringFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"string_sd\"); \n    assertTrue(intStringFacet.contains(\"<lst name=\\\"(MISSING)\\\">\")&&!intStringFacet.contains(\"<lst name=\\\"str0\\\">\"));\n    List<Double> intString = (ArrayList<Double>)xmlToList(intStringFacet, \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(intString,intStringTest);\n    \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Double> intDate = (ArrayList<Double>)xmlToList(intDateFacet, \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(intDate,intDateTest);\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n    \n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String stringFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"date_dtdm\");  \n    assertTrue(stringFacet.contains(\"<lst name=\\\"(MISSING)\\\">\"));  \n    ArrayList<Double> string = (ArrayList<Double>)xmlToList(stringFacet, \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(string,stringTest);\n    \n    //Int String\n    String intStringFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"string_sd\"); \n    assertTrue(intStringFacet.contains(\"<lst name=\\\"(MISSING)\\\">\")&&!intStringFacet.contains(\"<lst name=\\\"str0\\\">\"));\n    List<Double> intString = (ArrayList<Double>)xmlToList(intStringFacet, \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(intString,intStringTest);\n    \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"missingf\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Double> intDate = (ArrayList<Double>)xmlToList(intDateFacet, \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(intDate,intDateTest);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n    \n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n    \n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    string.remove(0);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n    \n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    assertNotNull(getRawResponse(), getNode(xPath));\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    intString.remove(0);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}