{"path":"backwards/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the raw byte[] for the binary field.  Note that\n   * you must also call {@link #getBinaryLength} and {@link\n   * #getBinaryOffset} to know which range of bytes in this\n   * returned array belong to the field.<p>\n   * About reuse: if you pass in the result byte[] and it is\n   * used, likely the underlying implementation will hold\n   * onto this byte[] and return it in future calls to\n   * {@link #getBinaryValue()}.\n   * So if you subsequently re-use the same byte[] elsewhere\n   * it will alter this Fieldable's value.\n   * @param result  User defined buffer that will be used if\n   *  possible.  If this is null or not large enough, a new\n   *  buffer is allocated\n   * @return reference to the Field value as byte[].\n   */\n  abstract byte[] getBinaryValue(byte[] result);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","sourceNew":"  /**\n   * Return the raw byte[] for the binary field.  Note that\n   * you must also call {@link #getBinaryLength} and {@link\n   * #getBinaryOffset} to know which range of bytes in this\n   * returned array belong to the field.<p>\n   * About reuse: if you pass in the result byte[] and it is\n   * used, likely the underlying implementation will hold\n   * onto this byte[] and return it in future calls to\n   * {@link #getBinaryValue()}.\n   * So if you subsequently re-use the same byte[] elsewhere\n   * it will alter this Fieldable's value.\n   * @param result  User defined buffer that will be used if\n   *  possible.  If this is null or not large enough, a new\n   *  buffer is allocated\n   * @return reference to the Field value as byte[].\n   */\n  abstract byte[] getBinaryValue(byte[] result);\n\n","sourceOld":"  /**\n   * Return the raw byte[] for the binary field.  Note that\n   * you must also call {@link #getBinaryLength} and {@link\n   * #getBinaryOffset} to know which range of bytes in this\n   * returned array belong to the field.<p>\n   * About reuse: if you pass in the result byte[] and it is\n   * used, likely the underlying implementation will hold\n   * onto this byte[] and return it in future calls to\n   * {@link #getBinaryValue()}.\n   * So if you subsequently re-use the same byte[] elsewhere\n   * it will alter this Fieldable's value.\n   * @param result  User defined buffer that will be used if\n   *  possible.  If this is null or not large enough, a new\n   *  buffer is allocated\n   * @return reference to the Field value as byte[].\n   */\n  abstract byte[] getBinaryValue(byte[] result);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Fieldable#getBinaryValue(byte[]).mjava","sourceNew":"  /**\n   * Return the raw byte[] for the binary field.  Note that\n   * you must also call {@link #getBinaryLength} and {@link\n   * #getBinaryOffset} to know which range of bytes in this\n   * returned array belong to the field.<p>\n   * About reuse: if you pass in the result byte[] and it is\n   * used, likely the underlying implementation will hold\n   * onto this byte[] and return it in future calls to\n   * {@link #getBinaryValue()}.\n   * So if you subsequently re-use the same byte[] elsewhere\n   * it will alter this Fieldable's value.\n   * @param result  User defined buffer that will be used if\n   *  possible.  If this is null or not large enough, a new\n   *  buffer is allocated\n   * @return reference to the Field value as byte[].\n   */\n  abstract byte[] getBinaryValue(byte[] result);\n\n","sourceOld":"  /**\n   * Return the raw byte[] for the binary field.  Note that\n   * you must also call {@link #getBinaryLength} and {@link\n   * #getBinaryOffset} to know which range of bytes in this\n   * returned array belong to the field.<p>\n   * About reuse: if you pass in the result byte[] and it is\n   * used, likely the underlying implementation will hold\n   * onto this byte[] and return it in future calls to\n   * {@link #getBinaryValue()}.\n   * So if you subsequently re-use the same byte[] elsewhere\n   * it will alter this Fieldable's value.\n   * @param result  User defined buffer that will be used if\n   *  possible.  If this is null or not large enough, a new\n   *  buffer is allocated\n   * @return reference to the Field value as byte[].\n   */\n  abstract byte[] getBinaryValue(byte[] result);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}