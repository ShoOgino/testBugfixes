{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":["15e716649e2bd79a98b5e68c464154ea4c44677a","15e716649e2bd79a98b5e68c464154ea4c44677a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes, Map<String, String> readerAttributes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes, readerAttributes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean,Map[String,String]).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes, Map<String, String> readerAttributes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes, readerAttributes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,IOUtils.IOFunction[SegmentCommitInfo,SegmentReader],SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static StandardDirectoryReader open(IndexWriter writer, IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFunction,\n                                      SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final SegmentReader reader = readerFunction.apply(info);\n        if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n          // Steal the ref:\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.decRef();\n          segmentInfos.remove(infosUpto);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["68496c2200e559fb7802f7575427b7a482659afb","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15e716649e2bd79a98b5e68c464154ea4c44677a":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}