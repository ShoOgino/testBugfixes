{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#getTuples(TupleStream).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        if(tupleStream instanceof ParallelStream) {\n          ParallelStream p = (ParallelStream) tupleStream;\n          assert(t.getMetrics() == p.getEofTuples()); // Make sure the EOF tuples are properly set on the final EOF tuple\n        }\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#getTuples(TupleStream).mjava","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}