{"path":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection commits = new ArrayList();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see IndexReader#listCommits */\n  public static Collection listCommits(Directory dir) throws IOException {\n\n    final String[] files = dir.listAll();\n\n    Collection commits = new ArrayList();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n    \n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f011f01db72fa6f556a9a0843944ecee2de4aaa8","date":1255806907,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection commits = new ArrayList();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}