{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = FieldCache.DEFAULT.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = DocValues.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = FieldCache.DEFAULT.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = DocValues.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = FieldCache.DEFAULT.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = DocValues.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = FieldCache.DEFAULT.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79f4baae2da134b5766bbbcba6d3b353ccd70304","date":1404748190,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/DisjointSpatialFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Bits docsWithField;\n    if (field == null) {\n      docsWithField = null;//all docs\n    } else {\n      //NOTE By using the FieldCache we re-use a cache\n      // which is nice but loading it in this way might be slower than say using an\n      // intersects filter against the world bounds. So do we add a method to the\n      // strategy, perhaps?  But the strategy can't cache it.\n      docsWithField = DocValues.getDocsWithField(context.reader(), field);\n\n      final int maxDoc = context.reader().maxDoc();\n      if (docsWithField.length() != maxDoc )\n        throw new IllegalStateException(\"Bits length should be maxDoc (\"+maxDoc+\") but wasn't: \"+docsWithField);\n\n      if (docsWithField instanceof Bits.MatchNoBits) {\n        return null;//match nothing\n      } else if (docsWithField instanceof Bits.MatchAllBits) {\n        docsWithField = null;//all docs\n      }\n    }\n\n    //not so much a chain but a way to conveniently invert the Filter\n    DocIdSet docIdSet = new ChainedFilter(new Filter[]{intersectsFilter}, ChainedFilter.ANDNOT).getDocIdSet(context, acceptDocs);\n    return BitsFilteredDocIdSet.wrap(docIdSet, docsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79f4baae2da134b5766bbbcba6d3b353ccd70304":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"56572ec06f1407c066d6b7399413178b33176cd8":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79f4baae2da134b5766bbbcba6d3b353ccd70304"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79f4baae2da134b5766bbbcba6d3b353ccd70304":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["79f4baae2da134b5766bbbcba6d3b353ccd70304","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}