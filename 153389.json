{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getBaseUrl(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String coreNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(coreNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getBaseUrl(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceca2bff80f22f2c69257979e86498558a4c2691","date":1393261456,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getBaseUrl(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getBaseUrl(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) throws InterruptedException {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    final String thisNode = getNodeName();\n    try {\n      zkStateReader.waitForState(cd.getCollectionName(), 320, TimeUnit.SECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        String shardId = c.getShardId(thisNode, cd.getName());\n        if (shardId != null) {\n          cd.getCloudDescriptor().setShardId(shardId);\n          return true;\n        }\n        return false;\n      });\n    }\n    catch (TimeoutException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out getting shard id for core: \" + cd.getName());\n    }\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) throws InterruptedException {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    final String thisNode = getNodeName();\n    try {\n      zkStateReader.waitForState(cd.getCollectionName(), 320, TimeUnit.SECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        String shardId = c.getShardId(thisNode, cd.getName());\n        if (shardId != null) {\n          cd.getCloudDescriptor().setShardId(shardId);\n          return true;\n        }\n        return false;\n      });\n    }\n    catch (TimeoutException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out getting shard id for core: \" + cd.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) throws InterruptedException {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    final String thisNode = getNodeName();\n    try {\n      zkStateReader.waitForState(cd.getCollectionName(), 320, TimeUnit.SECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        String shardId = c.getShardId(thisNode, cd.getName());\n        if (shardId != null) {\n          cd.getCloudDescriptor().setShardId(shardId);\n          return true;\n        }\n        return false;\n      });\n    }\n    catch (TimeoutException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out getting shard id for core: \" + cd.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.debug(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.debug(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.debug(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"waiting to find shard id in clusterstate for {}\", cd.getName());\n    }\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private void waitForShardId(CoreDescriptor cd) {\n    log.debug(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(cd.getCollectionName(), getNodeName(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"962cd4f5e313777f35da8f521265323e84184929":["191128ac5b85671b1671e2c857437694283b6ebf"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"ad4957cde742defe6db19689abdc267c5d948066":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fbcfc050b9f253136eaa5950b57248b2109eac11","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["849494cf2f3a96af5c8c84995108ddd8456fcd04","ceca2bff80f22f2c69257979e86498558a4c2691"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["191128ac5b85671b1671e2c857437694283b6ebf","962cd4f5e313777f35da8f521265323e84184929"],"ceca2bff80f22f2c69257979e86498558a4c2691":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["ceca2bff80f22f2c69257979e86498558a4c2691"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"]},"commit2Childs":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","ceca2bff80f22f2c69257979e86498558a4c2691"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad4957cde742defe6db19689abdc267c5d948066","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ceca2bff80f22f2c69257979e86498558a4c2691":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}