{"path":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","commits":[{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","pathOld":"/dev/null","sourceNew":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","pathOld":"/dev/null","sourceNew":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ab8af690923dc6fb1e56000575813136fef82b","date":1535773145,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","sourceNew":null,"sourceOld":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c692eaaa4ea31017e43d18209fdea78687586e","date":1536385910,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","pathOld":"/dev/null","sourceNew":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5832050525b97d61021a45dac2330a707639600d","date":1550867222,"type":4,"author":"Erick","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","sourceNew":null,"sourceOld":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/logging/TestLogWatcher#testLog4jWatcherRepeat().mjava","sourceNew":null,"sourceOld":"  // This seems weird to do the same thing twice, this is valid. We need to test whether listeners are replaced....\n  @Test\n  public void testLog4jWatcherRepeat() {\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(config, null);\n\n    assertEquals(watcher.getLastEvent(), -1);\n\n    log.warn(\"This is a test message\");\n\n    assertTrue(watcher.getLastEvent() > -1);\n\n    SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());\n    assertEquals(events.size(), 1);\n\n    SolrDocument event = events.get(0);\n    assertEquals(event.get(\"logger\"), \"org.apache.solr.logging.TestLogWatcher\");\n    assertEquals(event.get(\"message\"), \"This is a test message\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0ab8af690923dc6fb1e56000575813136fef82b":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c692eaaa4ea31017e43d18209fdea78687586e":["d0ab8af690923dc6fb1e56000575813136fef82b"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["30c692eaaa4ea31017e43d18209fdea78687586e","5832050525b97d61021a45dac2330a707639600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93baf46bd12096e0de407258b3b32cfaaf58e448"],"5832050525b97d61021a45dac2330a707639600d":["30c692eaaa4ea31017e43d18209fdea78687586e"]},"commit2Childs":{"d0ab8af690923dc6fb1e56000575813136fef82b":["30c692eaaa4ea31017e43d18209fdea78687586e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"30c692eaaa4ea31017e43d18209fdea78687586e":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","5832050525b97d61021a45dac2330a707639600d"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["d0ab8af690923dc6fb1e56000575813136fef82b"],"5832050525b97d61021a45dac2330a707639600d":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}