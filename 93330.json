{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetSlices().mjava","commits":[{"id":"f387f03a79cf25a7fdb71d13c026d8e1b82669ad","date":1531758418,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetSlices() throws Exception {\n    assertNull(new IndexSearcher(new MultiReader()).getSlices());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader r = w.getReader();\n    w.close();\n\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n                                   new LinkedBlockingQueue<Runnable>(),\n                                   new NamedThreadFactory(\"TestIndexSearcher\"));\n    IndexSearcher s = new IndexSearcher(r, service);\n    IndexSearcher.LeafSlice[] slices = s.getSlices();\n    assertNotNull(slices);\n    assertEquals(1, slices.length);\n    assertEquals(1, slices[0].leaves.length);\n    assertTrue(slices[0].leaves[0] == r.leaves().get(0));\n    service.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetSlices() throws Exception {\n    assertNull(new IndexSearcher(new MultiReader()).getSlices());\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader r = w.getReader();\n    w.close();\n\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n                                   new LinkedBlockingQueue<Runnable>(),\n                                   new NamedThreadFactory(\"TestIndexSearcher\"));\n    IndexSearcher s = new IndexSearcher(r, service);\n    IndexSearcher.LeafSlice[] slices = s.getSlices();\n    assertNotNull(slices);\n    assertEquals(1, slices.length);\n    assertEquals(1, slices[0].leaves.length);\n    assertTrue(slices[0].leaves[0] == r.leaves().get(0));\n    service.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f387f03a79cf25a7fdb71d13c026d8e1b82669ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f387f03a79cf25a7fdb71d13c026d8e1b82669ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f387f03a79cf25a7fdb71d13c026d8e1b82669ad"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f387f03a79cf25a7fdb71d13c026d8e1b82669ad"],"f387f03a79cf25a7fdb71d13c026d8e1b82669ad":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}