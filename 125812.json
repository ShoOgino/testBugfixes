{"path":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d78974d33c1244e0810e0dc8f1c6371faceac9","date":1338918242,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197070b7f9191af8b5d8598b579393d4a67e32f0","date":1341843740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase();\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/WordBreakSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"rawtypes\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(@SuppressWarnings(\"unchecked\") NamedList config,\n      SolrCore core) {\n    String name = super.init(config, core);\n    combineWords = boolParam(config, PARAM_COMBINE_WORDS);\n    breakWords = boolParam(config, PARAM_BREAK_WORDS);\n    wbsp = new WordBreakSpellChecker();\n    String bstb = strParam(config, PARAM_BREAK_SUGGESTION_TIE_BREAKER);\n    if (bstb != null) {\n      bstb = bstb.toUpperCase(Locale.ROOT);\n      if (bstb.equals(BreakSuggestionTieBreaker.SUM_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_SUMMED_FREQUENCY;\n      } else if (bstb.equals(BreakSuggestionTieBreaker.MAX_FREQ.name())) {\n        sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n      } else {\n        throw new IllegalArgumentException(\"Invalid value for parameter \"\n            + PARAM_BREAK_SUGGESTION_TIE_BREAKER + \" : \" + bstb);\n      }\n    } else {\n      sortMethod = BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;\n    }\n    int mc = intParam(config, PARAM_MAX_CHANGES);\n    if (mc > 0) {\n      wbsp.setMaxChanges(mc);\n    }\n    int mcl = intParam(config, PARAM_MAX_COMBINE_WORD_LENGTH);\n    if (mcl > 0) {\n      wbsp.setMaxCombineWordLength(mcl);\n    }\n    int mbwl = intParam(config, PARAM_MIN_BREAK_WORD_LENGTH);\n    if (mbwl > 0) {\n      wbsp.setMinBreakWordLength(mbwl);\n    }\n    int me = intParam(config, PARAM_MAX_EVALUATIONS);\n    if (me > 0) {\n      wbsp.setMaxEvaluations(me);\n    }\n    int msf = intParam(config, PARAM_MIN_SUGGESTION_FREQUENCY);\n    if (msf > 0) {\n      wbsp.setMinSuggestionFrequency(msf);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d78974d33c1244e0810e0dc8f1c6371faceac9":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56d78974d33c1244e0810e0dc8f1c6371faceac9","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["56d78974d33c1244e0810e0dc8f1c6371faceac9","197070b7f9191af8b5d8598b579393d4a67e32f0"],"197070b7f9191af8b5d8598b579393d4a67e32f0":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"46d8ada1fff8d18cb197c38c7983225162599948":["56d78974d33c1244e0810e0dc8f1c6371faceac9","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"56d78974d33c1244e0810e0dc8f1c6371faceac9":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","197070b7f9191af8b5d8598b579393d4a67e32f0","46d8ada1fff8d18cb197c38c7983225162599948"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","bd25fa3647fa73152703b8dccb4fb5f43633de20","46d8ada1fff8d18cb197c38c7983225162599948"],"197070b7f9191af8b5d8598b579393d4a67e32f0":["2acf500f78aa12b92e371fd89c719291986b6b90"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}