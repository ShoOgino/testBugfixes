{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    return makeName(path == null || path.length == 0 ? Collections.emptyList() : Arrays.asList(path),\n        name);\n\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    return makeName(path == null || path.length == 0 ? Collections.emptyList() : Arrays.asList(path),\n        name);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    return makeName(path == null || path.length == 0 ? Collections.emptyList() : Arrays.asList(path),\n        name);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#mkName(String,String...).mjava","sourceNew":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    return makeName(path == null || path.length == 0 ? Collections.emptyList() : Arrays.asList(path),\n        name);\n\n  }\n\n","sourceOld":"  /**\n   * This method creates a hierarchical name with arbitrary levels of hierarchy\n   *\n   * @param name the final segment of the name, must not be null or empty.\n   * @param path optional path segments, starting from the top level. Empty or null\n   *             segments will be skipped.\n   * @return fully-qualified name using dotted notation, with all valid hierarchy\n   * segments prepended to the name.\n   */\n  public static String mkName(String name, String... path) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name must not be empty\");\n    }\n    if (path == null || path.length == 0) {\n      return name;\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (String s : path) {\n        if (s == null || s.isEmpty()) {\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append('.');\n        }\n        sb.append(s);\n      }\n      if (sb.length() > 0) {\n        sb.append('.');\n      }\n      sb.append(name);\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["52275555c0ae3b55430cef26ad7fca3f02440944"],"a117d95183986014a31f25bb04e5464ca06d6068":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["0265144286422ad99682a00904cc2536b79c8535"],"b0b597c65628ca9e73913a07e81691f8229bae35":["52275555c0ae3b55430cef26ad7fca3f02440944","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"52275555c0ae3b55430cef26ad7fca3f02440944":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}