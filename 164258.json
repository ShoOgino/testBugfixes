{"path":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(12, 12, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(13, 13, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(9, 9, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b11987928068249b275ba9d322b48872b5cea81a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(12, 12, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(13, 13, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(9, 9, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11987928068249b275ba9d322b48872b5cea81a","date":1557425626,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(9, 9, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(7, 7, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(12, 12, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(13, 13, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(9, 9, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n  }\n\n","bugFix":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(9, 9, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(7, 7, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73d1467175b0c041295320312cbb1dbba0bb86eb","date":1559889257,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13526\") // 2019-06-07\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":["e4d551dd5406e7a716dc72acae21169c24942299"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4d551dd5406e7a716dc72acae21169c24942299","date":1560243780,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13526\") // 2019-06-07\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","bugFix":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#createCollectionUpdateAndQueryDistributed().mjava","sourceNew":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void createCollectionUpdateAndQueryDistributed() throws Exception {\n    // Admin request will use PKI inter-node auth from Overseer, and succeed\n    createCollection(COLLECTION);\n    \n    // Now update three documents\n    assertAuthMetricsMinimums(1, 1, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    Pair<String,Integer> result = post(baseUrl + \"/\" + COLLECTION + \"/update?commit=true\", \"[{\\\"id\\\" : \\\"1\\\"}, {\\\"id\\\": \\\"2\\\"}, {\\\"id\\\": \\\"3\\\"}]\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n    \n    // First a non distributed query\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*&distrib=false\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n    // Now do a distributed query, using JWTAuth for inter-node\n    result = get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTestToken);\n    assertEquals(Integer.valueOf(200), result.second());\n    assertAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n    \n    // Delete\n    assertEquals(200, get(baseUrl + \"/admin/collections?action=DELETE&name=\" + COLLECTION, jwtTestToken).second().intValue());\n    assertAuthMetricsMinimums(11, 11, 0, 0, 0, 0);\n    assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73d1467175b0c041295320312cbb1dbba0bb86eb":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"3f504512a03d978990cbff30db0522b354e846db":["e4d551dd5406e7a716dc72acae21169c24942299"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["b11987928068249b275ba9d322b48872b5cea81a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4d551dd5406e7a716dc72acae21169c24942299":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"b11987928068249b275ba9d322b48872b5cea81a":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"73d1467175b0c041295320312cbb1dbba0bb86eb":["e4d551dd5406e7a716dc72acae21169c24942299"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e4d551dd5406e7a716dc72acae21169c24942299":["3f504512a03d978990cbff30db0522b354e846db"],"b11987928068249b275ba9d322b48872b5cea81a":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["b11987928068249b275ba9d322b48872b5cea81a","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}