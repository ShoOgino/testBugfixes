{"path":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testBoost().mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testBoost().mjava","pathOld":"/dev/null","sourceNew":"    public void testBoost() throws IOException {\n        // NOTE: uses index build in *this* setUp\n\n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n      // test for correct application of query normalization\n      // must use a non score normalizing method for this.\n      Query q = csrq(\"data\",\"1\",\"6\",T,T);\n      q.setBoost(100);\n      search.search(q,null, new HitCollector() {\n                public void collect(int doc, float score) {\n                    assertEquals(\"score for doc \" + doc +\" was not correct\",\n                                 1.0f, score);\n                }\n            });\n\n\n      //\n      // Ensure that boosting works to score one clause of a query higher\n      // than another.\n      //\n      Query q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(.1f);\n      Query q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      BooleanQuery bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      Hits hits = search.search(bq);\n      assertEquals(1, hits.id(0));\n      assertEquals(0, hits.id(1));\n      assertTrue(hits.score(0) > hits.score(1));\n\n      q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(10f);\n      q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      hits = search.search(bq);\n      assertEquals(0, hits.id(0));\n      assertEquals(1, hits.id(1));\n      assertTrue(hits.score(0) > hits.score(1));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testBoost().mjava","sourceNew":"    public void testBoost() throws IOException {\n        // NOTE: uses index build in *this* setUp\n\n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n      // test for correct application of query normalization\n      // must use a non score normalizing method for this.\n      Query q = csrq(\"data\",\"1\",\"6\",T,T);\n      q.setBoost(100);\n      search.search(q,null, new HitCollector() {\n                public void collect(int doc, float score) {\n                    assertEquals(\"score for doc \" + doc +\" was not correct\",\n                                 1.0f, score);\n                }\n            });\n\n\n      //\n      // Ensure that boosting works to score one clause of a query higher\n      // than another.\n      //\n      Query q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(.1f);\n      Query q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      BooleanQuery bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n      assertEquals(1, hits[0].doc);\n      assertEquals(0, hits[1].doc);\n      assertTrue(hits[0].score > hits[1].score);\n\n      q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(10f);\n      q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      hits = search.search(bq, null, 1000).scoreDocs;\n      assertEquals(0, hits[0].doc);\n      assertEquals(1, hits[1].doc);\n      assertTrue(hits[0].score > hits[1].score);\n    }\n\n","sourceOld":"    public void testBoost() throws IOException {\n        // NOTE: uses index build in *this* setUp\n\n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n      // test for correct application of query normalization\n      // must use a non score normalizing method for this.\n      Query q = csrq(\"data\",\"1\",\"6\",T,T);\n      q.setBoost(100);\n      search.search(q,null, new HitCollector() {\n                public void collect(int doc, float score) {\n                    assertEquals(\"score for doc \" + doc +\" was not correct\",\n                                 1.0f, score);\n                }\n            });\n\n\n      //\n      // Ensure that boosting works to score one clause of a query higher\n      // than another.\n      //\n      Query q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(.1f);\n      Query q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      BooleanQuery bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      Hits hits = search.search(bq);\n      assertEquals(1, hits.id(0));\n      assertEquals(0, hits.id(1));\n      assertTrue(hits.score(0) > hits.score(1));\n\n      q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(10f);\n      q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      hits = search.search(bq);\n      assertEquals(0, hits.id(0));\n      assertEquals(1, hits.id(1));\n      assertTrue(hits.score(0) > hits.score(1));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testBoost().mjava","sourceNew":null,"sourceOld":"    public void testBoost() throws IOException {\n        // NOTE: uses index build in *this* setUp\n\n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n      // test for correct application of query normalization\n      // must use a non score normalizing method for this.\n      Query q = csrq(\"data\",\"1\",\"6\",T,T);\n      q.setBoost(100);\n      search.search(q,null, new HitCollector() {\n                public void collect(int doc, float score) {\n                    assertEquals(\"score for doc \" + doc +\" was not correct\",\n                                 1.0f, score);\n                }\n            });\n\n\n      //\n      // Ensure that boosting works to score one clause of a query higher\n      // than another.\n      //\n      Query q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(.1f);\n      Query q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      BooleanQuery bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n      assertEquals(1, hits[0].doc);\n      assertEquals(0, hits[1].doc);\n      assertTrue(hits[0].score > hits[1].score);\n\n      q1 = csrq(\"data\",\"A\",\"A\",T,T);  // matches document #0\n      q1.setBoost(10f);\n      q2 = csrq(\"data\",\"Z\",\"Z\",T,T);  // matches document #1\n      bq = new BooleanQuery(true);\n      bq.add(q1, BooleanClause.Occur.SHOULD);\n      bq.add(q2, BooleanClause.Occur.SHOULD);\n\n      hits = search.search(bq, null, 1000).scoreDocs;\n      assertEquals(0, hits[0].doc);\n      assertEquals(1, hits[1].doc);\n      assertTrue(hits[0].score > hits[1].score);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"c5f8e44d5e9627993851287f67e8360a36cb302a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}