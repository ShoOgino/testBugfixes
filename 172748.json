{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}