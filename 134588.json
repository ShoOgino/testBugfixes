{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215","date":1433359369,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    new CollectionAdminRequest.Reload().setCollectionName(collectionName).process(cloudClient);\n\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      new CollectionAdminRequest.SplitShard()\n              .setCollectionName(\"non_existent_collection\")\n              .setShardName(\"non_existent_shard\")\n              .process(cloudClient);\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      CollectionAdminRequest.splitShard(\"non_existent_collection\")\n          .setShardName(\"non_existent_shard\")\n          .process(cluster.getSolrClient());\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    new CollectionAdminRequest.Reload().setCollectionName(collectionName).process(cloudClient);\n\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      new CollectionAdminRequest.SplitShard()\n              .setCollectionName(\"non_existent_collection\")\n              .setShardName(\"non_existent_shard\")\n              .process(cloudClient);\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      CollectionAdminRequest.splitShard(\"non_existent_collection\")\n          .setShardName(\"non_existent_shard\")\n          .process(cluster.getSolrClient());\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    new CollectionAdminRequest.Reload().setCollectionName(collectionName).process(cloudClient);\n\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      new CollectionAdminRequest.SplitShard()\n              .setCollectionName(\"non_existent_collection\")\n              .setShardName(\"non_existent_shard\")\n              .process(cloudClient);\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cloudClient).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        \"Split shard for non existent collection should have failed\",\n        () -> CollectionAdminRequest\n            .splitShard(\"non_existent_collection\")\n            .setShardName(\"non_existent_shard\")\n            .process(cluster.getSolrClient())\n    );\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      CollectionAdminRequest.splitShard(\"non_existent_collection\")\n          .setShardName(\"non_existent_shard\")\n          .process(cluster.getSolrClient());\n      fail(\"Split shard for non existent collection should have failed\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        \"Split shard for non existent collection should have failed\",\n        () -> CollectionAdminRequest\n            .splitShard(\"non_existent_collection\")\n            .setShardName(\"non_existent_shard\")\n            .process(cluster.getSolrClient())\n    );\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        \"Split shard for non existent collection should have failed\",\n        () -> CollectionAdminRequest\n            .splitShard(\"non_existent_collection\")\n            .setShardName(\"non_existent_shard\")\n            .process(cluster.getSolrClient())\n    );\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        \"Split shard for non existent collection should have failed\",\n        () -> CollectionAdminRequest\n            .splitShard(\"non_existent_collection\")\n            .setShardName(\"non_existent_shard\")\n            .process(cluster.getSolrClient())\n    );\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    NamedList<Object> resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection\n        = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    // Reload the collection\n    CollectionAdminRequest.reloadCollection(collectionName).process(cluster.getSolrClient());\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        \"Split shard for non existent collection should have failed\",\n        () -> CollectionAdminRequest\n            .splitShard(\"non_existent_collection\")\n            .setShardName(\"non_existent_shard\")\n            .process(cluster.getSolrClient())\n    );\n\n    resp = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient()).getResponse();\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"db96734b79e26d948b59f68bd4564c4836a71acf":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["db96734b79e26d948b59f68bd4564c4836a71acf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["92f789dbd1886e4b468e61b0def88b29a3f55228","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["db96734b79e26d948b59f68bd4564c4836a71acf"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"db96734b79e26d948b59f68bd4564c4836a71acf":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}