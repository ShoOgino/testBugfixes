{"path":"src/java/org/apache/lucene/index/TermsHash#recyclePostings(RawPostingList[],int).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#recyclePostings(RawPostingList[],int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","sourceNew":"  synchronized public void recyclePostings(final RawPostingList[] postings, final int numPostings) {\n\n    assert postings.length >= numPostings;\n\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","sourceOld":"  synchronized void recyclePostings(Posting[] postings, int numPostings) {\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#recyclePostings(RawPostingList[],int).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#recyclePostings(RawPostingList[],int).mjava","sourceNew":"  synchronized public void recyclePostings(final RawPostingList[] postings, final int numPostings) {\n\n    assert postings.length >= numPostings;\n\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","sourceOld":"  synchronized public void recyclePostings(final RawPostingList[] postings, final int numPostings) {\n\n    assert postings.length >= numPostings;\n\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}