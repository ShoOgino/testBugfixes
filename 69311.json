{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":["334c1175813aea771a71728cd2c4ee4754fd0603"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteQueries(query)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteQueries(query)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteQueries(query)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteQueries(query);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3762f22fc1bf57957efeaf962d3393a5bb1b151","date":1400601035,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteQueries(query)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * Deletes the document(s) matching the provided query.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param query the query to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Query query) throws IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteQueries(query)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Query)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c3762f22fc1bf57957efeaf962d3393a5bb1b151":["7af110b00ea8df9429309d83e38e0533d82e144f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":["7af110b00ea8df9429309d83e38e0533d82e144f","c3762f22fc1bf57957efeaf962d3393a5bb1b151"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3762f22fc1bf57957efeaf962d3393a5bb1b151"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["c3762f22fc1bf57957efeaf962d3393a5bb1b151","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b7605579001505896d48b07160075a5c8b8e128e"],"c3762f22fc1bf57957efeaf962d3393a5bb1b151":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}