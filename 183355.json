{"path":"src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","commits":[{"id":"340571b4c22d459277d2871f31d309a3d9f1e785","date":1264097536,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"src/test/org/apache/lucene/util/ArrayUtilTest#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"340571b4c22d459277d2871f31d309a3d9f1e785":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["340571b4c22d459277d2871f31d309a3d9f1e785"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["340571b4c22d459277d2871f31d309a3d9f1e785"],"340571b4c22d459277d2871f31d309a3d9f1e785":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}