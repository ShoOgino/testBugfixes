{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":null,"sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}