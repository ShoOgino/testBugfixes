{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","commits":[{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2471b6d10532bd030255898b2d4a4c228b37b7a8","date":1202408541,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   * Note that autoCommit defaults to true, but starting in 3.0\n   * it will be hardwired to false.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   * Note that autoCommit defaults to true, but starting in 3.0\n   * it will be hardwired to false.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, true, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fe21c514098be354a174a3bd1f657d6a2c28060","date":1231032556,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated Use {@link #IndexWriter(Directory, Analyzer, MaxFieldLength)}\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(String,Analyzer,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>path</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated Use {@link #IndexWriter(Directory, Analyzer, MaxFieldLength)}\n   */\n  public IndexWriter(String path, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, true, null, false, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["e82780afe6097066eb5befb86e9432f077667e3d"],"4fe21c514098be354a174a3bd1f657d6a2c28060":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["4fe21c514098be354a174a3bd1f657d6a2c28060"],"e82780afe6097066eb5befb86e9432f077667e3d":["2471b6d10532bd030255898b2d4a4c228b37b7a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"2471b6d10532bd030255898b2d4a4c228b37b7a8":["235efcba838a273934c5dd0ef66bb07c7fb0d718"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"4fe21c514098be354a174a3bd1f657d6a2c28060":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["2471b6d10532bd030255898b2d4a4c228b37b7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"e82780afe6097066eb5befb86e9432f077667e3d":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["4fe21c514098be354a174a3bd1f657d6a2c28060"],"2471b6d10532bd030255898b2d4a4c228b37b7a8":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}