{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int,int).mjava","commits":[{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":0,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int following(int matchEndIndex, int targetIdx) {\n    if (targetIdx >= getText().getEndIndex()) {\n      if (currentCache == baseIter.last()) {\n        return DONE;\n      }\n      return currentCache = baseIter.last();\n    }\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) {\n      currentCache = baseIter.last();\n      return DONE;\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return currentCache = afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return currentCache = afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *one more time*; BI's are sometimes expensive.\n\n    // Find closest break to target\n    final int beforeIdx = baseIter.preceding(targetIdx);\n    if (targetIdx - beforeIdx < afterIdx - targetIdx && beforeIdx > matchEndIndex) {\n      return currentCache = beforeIdx;\n    }\n    return currentCache = afterIdx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int following(int matchEndIndex, int targetIdx) {\n    if (targetIdx >= getText().getEndIndex()) {\n      if (currentCache == baseIter.last()) {\n        return DONE;\n      }\n      return currentCache = baseIter.last();\n    }\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) {\n      currentCache = baseIter.last();\n      return DONE;\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return currentCache = afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return currentCache = afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *one more time*; BI's are sometimes expensive.\n\n    // Find closest break to target\n    final int beforeIdx = baseIter.preceding(targetIdx);\n    if (targetIdx - beforeIdx < afterIdx - targetIdx && beforeIdx > matchEndIndex) {\n      return currentCache = beforeIdx;\n    }\n    return currentCache = afterIdx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"]},"commit2Childs":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}