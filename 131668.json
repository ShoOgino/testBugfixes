{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","commits":[{"id":"b41d447200403aa7ef7498f40bfa84da3422924d","date":1363972030,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","pathOld":"/dev/null","sourceNew":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","sourceNew":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":["b41d447200403aa7ef7498f40bfa84da3422924d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","sourceNew":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.shutdown();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.shutdown();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","sourceNew":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.shutdown();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.shutdown();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1d185571493c800641d61907f7fd906d135beb1","date":1449568506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyFileException().mjava","sourceNew":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (AssertionError ex) {\n        // This is fine: we tripped IW's assert that all files it's about to fsync do exist:\n        assertTrue(ex.getMessage().matches(\"file .* does not exist; files=\\\\[.*\\\\]\"));\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // See LUCENE-4870 TooManyOpenFiles errors are thrown as\n  // FNFExceptions which can trigger data loss.\n  public void testTooManyFileException() throws Exception {\n\n    // Create failure that throws Too many open files exception randomly\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n\n      @Override\n      public MockDirectoryWrapper.Failure reset() {\n        doFail = false;\n        return this;\n      }\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail) {\n          if (random().nextBoolean()) {\n            throw new FileNotFoundException(\"some/file/name.ext (Too many open files)\");\n          }\n        }\n      }\n    };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // The exception is only thrown on open input\n    dir.setFailOnOpenInput(true);\n    dir.failOn(failure);\n\n    // Create an index with one document\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add a document\n    iw.commit();\n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n    iw.close();\n\n    // Open and close the index a few times\n    for (int i = 0; i < 10; i++) {\n      failure.setDoFail();\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        iw = new IndexWriter(dir, iwc);\n      } catch (CorruptIndexException ex) {\n        // Exceptions are fine - we are running out of file handlers here\n        continue;\n      } catch (FileNotFoundException | NoSuchFileException ex) {\n        continue;\n      }\n      failure.clearDoFail();\n      iw.close();\n      ir = DirectoryReader.open(dir);\n      assertEquals(\"lost document after iteration: \" + i, 1, ir.numDocs());\n      ir.close();\n    }\n\n    // Check if document is still there\n    failure.clearDoFail();\n    ir = DirectoryReader.open(dir);\n    assertEquals(1, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["b41d447200403aa7ef7498f40bfa84da3422924d"],"a1d185571493c800641d61907f7fd906d135beb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1d185571493c800641d61907f7fd906d135beb1"],"b41d447200403aa7ef7498f40bfa84da3422924d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a1d185571493c800641d61907f7fd906d135beb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b41d447200403aa7ef7498f40bfa84da3422924d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a1d185571493c800641d61907f7fd906d135beb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b41d447200403aa7ef7498f40bfa84da3422924d":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}