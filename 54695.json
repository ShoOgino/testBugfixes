{"path":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","sourceNew":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype\n   * @param newTerm\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","sourceOld":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype\n   * @param newTerm\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f7a67b528a360bdc01ea05af57e6459fe42ac0","date":1346299172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","sourceNew":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype existing Token\n   * @param newTerm new term text\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","sourceOld":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype\n   * @param newTerm\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","sourceNew":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype existing Token\n   * @param newTerm new term text\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","sourceOld":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype\n   * @param newTerm\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b01ceb41370c7281988f8a8b6ae62fc15d5d8de1","date":1399070016,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","sourceNew":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype existing Token\n   * @param newTerm new term text\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    positionLength = prototype.positionLength;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","sourceOld":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype existing Token\n   * @param newTerm new term text\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Token#reinit(Token,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.\n   * @param prototype existing Token\n   * @param newTerm new term text\n   */\n  public void reinit(Token prototype, String newTerm) {\n    setEmpty().append(newTerm);\n    positionIncrement = prototype.positionIncrement;\n    positionLength = prototype.positionLength;\n    flags = prototype.flags;\n    startOffset = prototype.startOffset;\n    endOffset = prototype.endOffset;\n    type = prototype.type;\n    payload =  prototype.payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["b01ceb41370c7281988f8a8b6ae62fc15d5d8de1"],"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"b01ceb41370c7281988f8a8b6ae62fc15d5d8de1":["27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["05a14b2611ead08655a2b2bdc61632eb31316e57","b01ceb41370c7281988f8a8b6ae62fc15d5d8de1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["27f7a67b528a360bdc01ea05af57e6459fe42ac0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"b01ceb41370c7281988f8a8b6ae62fc15d5d8de1":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}