{"path":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#handleConflict(Map[String,Object],List[String],String,Object,Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#handleConflict(Map[String,Object],List[String],String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public void handleConflict(Map<String,Object> container, List<String> path, String key, Object current, Object previous) {\n      boolean handleAsList = isList(container, path, key, current, previous);\n      if (handleAsList) {\n        container.put(key, makeList(current, previous) );\n        return;\n      }\n\n      if (previous instanceof Map && current instanceof Map) {\n        Map<String,Object> prevMap = (Map<String,Object>)previous;\n        Map<String,Object> currMap = (Map<String,Object>)current;\n        if (prevMap.size() == 0) return;\n        mergeMap(prevMap, currMap, path);\n        container.put(key, prevMap);\n        return;\n      }\n\n      // if we aren't handling as a list, and we aren't handling as a map, then just overwrite (i.e. nothing else to do)\n      return;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#handleConflict(Map[String,Object],List[String],String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public void handleConflict(Map<String,Object> container, List<String> path, String key, Object current, Object previous) {\n      boolean handleAsList = isList(container, path, key, current, previous);\n      if (handleAsList) {\n        container.put(key, makeList(current, previous) );\n        return;\n      }\n\n      if (previous instanceof Map && current instanceof Map) {\n        Map<String,Object> prevMap = (Map<String,Object>)previous;\n        Map<String,Object> currMap = (Map<String,Object>)current;\n        if (prevMap.size() == 0) return;\n        mergeMap(prevMap, currMap, path);\n        container.put(key, prevMap);\n        return;\n      }\n\n      // if we aren't handling as a list, and we aren't handling as a map, then just overwrite (i.e. nothing else to do)\n      return;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#handleConflict(Map[String,Object],List[String],String,Object,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#handleConflict(Map[String,Object],List[String],String,Object,Object).mjava","sourceNew":"    public void handleConflict(Map<String,Object> container, List<String> path, String key, Object current, Object previous) {\n      boolean handleAsList = isList(container, path, key, current, previous);\n      if (handleAsList) {\n        container.put(key, makeList(current, previous) );\n        return;\n      }\n\n      if (previous instanceof Map && current instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String,Object> prevMap = (Map<String,Object>)previous;\n        @SuppressWarnings({\"unchecked\"})\n        Map<String,Object> currMap = (Map<String,Object>)current;\n        if (prevMap.size() == 0) return;\n        mergeMap(prevMap, currMap, path);\n        container.put(key, prevMap);\n        return;\n      }\n\n      // if we aren't handling as a list, and we aren't handling as a map, then just overwrite (i.e. nothing else to do)\n      return;\n    }\n\n","sourceOld":"    public void handleConflict(Map<String,Object> container, List<String> path, String key, Object current, Object previous) {\n      boolean handleAsList = isList(container, path, key, current, previous);\n      if (handleAsList) {\n        container.put(key, makeList(current, previous) );\n        return;\n      }\n\n      if (previous instanceof Map && current instanceof Map) {\n        Map<String,Object> prevMap = (Map<String,Object>)previous;\n        Map<String,Object> currMap = (Map<String,Object>)current;\n        if (prevMap.size() == 0) return;\n        mergeMap(prevMap, currMap, path);\n        container.put(key, prevMap);\n        return;\n      }\n\n      // if we aren't handling as a list, and we aren't handling as a map, then just overwrite (i.e. nothing else to do)\n      return;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}