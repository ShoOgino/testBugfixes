{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"/dev/null","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & DefaultStoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, UTF8));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["560e2ea4254f72003898bd4d74a0971828130864"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, UTF8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & DefaultStoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, UTF8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}