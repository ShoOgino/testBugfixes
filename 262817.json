{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","commits":[{"id":"d0c238d519ed8e8343ab723bcc8f1846786e42a6","date":1409789996,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, fieldName);\n    args.put(StatsParams.STATS_CALC_DISTINCT, \"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","sourceNew":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n  }\n\n","sourceOld":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, fieldName);\n    args.put(StatsParams.STATS_CALC_DISTINCT, \"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","sourceNew":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n  }\n\n","sourceOld":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, fieldName);\n    args.put(StatsParams.STATS_CALC_DISTINCT, \"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n        , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n        , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","sourceNew":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n\n    assertQ(\"cardinality\", \n            req(\"q\",\"*:*\", \"stats\", \"true\", \"stats.field\", \"{!cardinality=true}\"+fieldName)\n            , \"//lst[@name='\"+fieldName+\"']/long[@name='cardinality'][.='9']\");\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7062fc1cf235b04a88adfc21dc68e040c82561","date":1431110643,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValuedDouble().mjava","sourceNew":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n    SolrQueryRequest req3 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, countDistinct=true, distinctValues=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2, req3 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n\n    assertQ(\"cardinality\", \n            req(\"q\",\"*:*\", \"stats\", \"true\", \"stats.field\", \"{!cardinality=true}\"+fieldName)\n            , \"//lst[@name='\"+fieldName+\"']/long[@name='cardinality'][.='9']\");\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsDocValuesAndMultiValuedDouble() throws Exception {\n    SolrCore core = h.getCore();\n    String fieldName = \"cat_floatDocValues\";\n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(fieldName);\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(fieldName, ONE_ONE, new FVal(0, 0)));\n\n    Doc d1 = createDocValuesDocument(types, fieldName,  \"1\", -1, 3, 5);\n    updateJ(toJSON(d1), null);\n\n    Doc d2 = createDocValuesDocument(types, fieldName,  \"2\", 3, -2, 6);\n    updateJ(toJSON(d2), null);\n\n    Doc d3 = createDocValuesDocument(types, fieldName,  \"3\", 16, -3, 11);\n    updateJ(toJSON(d3), null);\n\n    assertU(commit());\n\n    final SolrParams baseParams = params(CommonParams.Q, \"*:*\",\n                                         \"indent\", \"true\",\n                                         StatsParams.STATS, \"true\");\n\n    SolrQueryRequest req1 = req(baseParams, \n                                StatsParams.STATS_CALC_DISTINCT, \"true\",\n                                StatsParams.STATS_FIELD, fieldName);\n    SolrQueryRequest req2 = req(baseParams, \n                                StatsParams.STATS_FIELD,\n                                \"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}\" + fieldName);\n\n    for (SolrQueryRequest req : new SolrQueryRequest[] { req1, req2 }) {\n      assertQ(\"test status on docValues and multiValued: \" + req.toString(), req\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='min'][.='-3.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='max'][.='16.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='count'][.='12']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sum'][.='38.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='mean'][.='3.1666666666666665']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='stddev'][.='5.638074031784151']\"\n              , \"//lst[@name='\" + fieldName + \"']/double[@name='sumOfSquares'][.='470.0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='missing'][.='0']\"\n              , \"//lst[@name='\" + fieldName + \"']/long[@name='countDistinct'][.='9']\"\n              // always comes along with countDistinct\n              , \"count(//lst[@name='\" + fieldName + \"']/arr[@name='distinctValues']/float)=9\"\n              // if new default stats are added, this will break - update test to assert values for each\n              ,\"count(//lst[@name='\" + fieldName + \"']/*)=10\"\n              );\n    }\n\n    assertQ(\"cardinality\", \n            req(\"q\",\"*:*\", \"stats\", \"true\", \"stats.field\", \"{!cardinality=true}\"+fieldName)\n            , \"//lst[@name='\"+fieldName+\"']/long[@name='cardinality'][.='9']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0c238d519ed8e8343ab723bcc8f1846786e42a6","d12bbc45d641864ffe03291bc30f178eb34e434c"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e7062fc1cf235b04a88adfc21dc68e040c82561"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["2e7062fc1cf235b04a88adfc21dc68e040c82561"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}