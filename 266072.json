{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","commits":[{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n      \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFiles(Arrays.asList(new String[] {\"test\", \"test2\"}));\n    dir.close();\n  }\n\n","sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n      \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n    dir.close();\n  }\n\n","sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFiles(Arrays.asList(new String[] {\"test\", \"test2\"}));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n    dir.close();\n  }\n\n","sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n      \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n    dir.close();\n  }\n\n","sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n      \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n    dir.close();\n  }\n\n","sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n      \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes(Directory).mjava","sourceNew":null,"sourceOld":"  public static void testCopyBytes(Directory dir) throws Exception {\n      \n    // make random file\n    IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n    byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n    final int size = TestUtil.nextInt(random(), 1, 1777777);\n    int upto = 0;\n    int byteUpto = 0;\n    while (upto < size) {\n      bytes[byteUpto++] = value(upto);\n      upto++;\n      if (byteUpto == bytes.length) {\n        out.writeBytes(bytes, 0, bytes.length);\n        byteUpto = 0;\n      }\n    }\n      \n    out.writeBytes(bytes, 0, byteUpto);\n    assertEquals(size, out.getFilePointer());\n    out.close();\n    assertEquals(size, dir.fileLength(\"test\"));\n      \n    // copy from test -> test2\n    final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n    out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        out.writeByte(in.readByte());\n        upto++;\n      } else {\n        final int chunk = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        out.copyBytes(in, chunk);\n        upto += chunk;\n      }\n    }\n    assertEquals(size, upto);\n    out.close();\n    in.close();\n      \n    // verify\n    IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n    upto = 0;\n    while (upto < size) {\n      if (random().nextBoolean()) {\n        final byte v = in2.readByte();\n        assertEquals(value(upto), v);\n        upto++;\n      } else {\n        final int limit = Math.min(\n                                   TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n        in2.readBytes(bytes, 0, limit);\n        for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n          assertEquals(value(upto), bytes[byteIdx]);\n          upto++;\n        }\n      }\n    }\n    in2.close();\n      \n    dir.deleteFile(\"test\");\n    dir.deleteFile(\"test2\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["c15a75016387504d70a40cba6e9314b8885307f0","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["c15a75016387504d70a40cba6e9314b8885307f0","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["c15a75016387504d70a40cba6e9314b8885307f0","b470f36a9372c97283360b1304eacbde22df6c0d"],"c15a75016387504d70a40cba6e9314b8885307f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["c15a75016387504d70a40cba6e9314b8885307f0"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c15a75016387504d70a40cba6e9314b8885307f0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"c15a75016387504d70a40cba6e9314b8885307f0":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}