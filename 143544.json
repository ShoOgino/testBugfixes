{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"/dev/null","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}