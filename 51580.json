{"path":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","commits":[{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n\n    // find the state that has minimum amount of threads waiting\n    Iterator<ThreadState> it = getActivePerThreadsIterator();\n    ThreadState minThreadState = null;\n    while (it.hasNext()) {\n      ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      }\n    }\n\n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n    // find the state that has minimum amount of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n\n    // find the state that has minimum amount of threads waiting\n    Iterator<ThreadState> it = getActivePerThreadsIterator();\n    ThreadState minThreadState = null;\n    while (it.hasNext()) {\n      ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      }\n    }\n\n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    // Find the state that has minimum number of threads waiting\n    // noocommit -- can't another thread lock the\n    // minThreadState we just got?\n    minThreadState = minContendedThreadState();\n\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n    // find the state that has minimum amount of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(true);\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    // Find the state that has minimum number of threads waiting\n    // noocommit -- can't another thread lock the\n    // minThreadState we just got?\n    minThreadState = minContendedThreadState();\n\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      ThreadState newState = newThreadState();\n      if (newState != null) {\n        minThreadState = newState;\n        threadBindings.put(requestingThread, newState);\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78248211b373c5a9b53071bf888805d4fab51bd3","date":1303919265,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(true);\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78248211b373c5a9b53071bf888805d4fab51bd3"],"f6f4cae61e16730201371ab7e9912721c19324e7":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78248211b373c5a9b53071bf888805d4fab51bd3":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["78248211b373c5a9b53071bf888805d4fab51bd3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","a3776dccca01c11e7046323cfad46a3b4a471233"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["f6f4cae61e16730201371ab7e9912721c19324e7"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff78505662c0b741e2663a9f38a4889c12a32c9f","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"78248211b373c5a9b53071bf888805d4fab51bd3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}