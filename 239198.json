{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#next().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Advances to the next log entry in the updates log and returns the log entry itself.\n     * Returns null if there are no more log entries in the updates log.<br>\n     * <p>\n     * <b>NOTE:</b> after the reader has exhausted, you can call again this method since the updates\n     * log might have been updated with new entries.\n     */\n    public Object next() throws IOException, InterruptedException {\n      while (!tlogs.isEmpty()) {\n        lastPositionInTLog = tlogReader.currentPos();\n        Object o = tlogReader.next();\n\n        if (o != null) {\n          pointer.set(currentTlog.tlogFile);\n          nextToLastVersion = lastVersion;\n          lastVersion = getVersion(o);\n          numRecordsReadInCurrentTlog++;\n          return o;\n        }\n\n        if (tlogs.size() > 1) { // if the current tlog is not the newest one, we can advance to the next one\n          tlogReader.close();\n          tlogs.removeLast();\n          currentTlog = tlogs.peekLast();\n          tlogReader = currentTlog.getReader(0);\n          pointer.set(currentTlog.tlogFile);\n          numRecordsReadInCurrentTlog = 0;\n          log.debug(\"Init new tlog reader for {} - tlogReader = {}\", currentTlog.tlogFile, tlogReader);\n        } else {\n          // the only tlog left is the new tlog which is currently being written,\n          // we should not remove it as we have to try to read it again later.\n          return null;\n        }\n      }\n\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#next().mjava","sourceNew":null,"sourceOld":"    /**\n     * Advances to the next log entry in the updates log and returns the log entry itself.\n     * Returns null if there are no more log entries in the updates log.<br>\n     * <p>\n     * <b>NOTE:</b> after the reader has exhausted, you can call again this method since the updates\n     * log might have been updated with new entries.\n     */\n    public Object next() throws IOException, InterruptedException {\n      while (!tlogs.isEmpty()) {\n        lastPositionInTLog = tlogReader.currentPos();\n        Object o = tlogReader.next();\n\n        if (o != null) {\n          pointer.set(currentTlog.tlogFile);\n          nextToLastVersion = lastVersion;\n          lastVersion = getVersion(o);\n          numRecordsReadInCurrentTlog++;\n          return o;\n        }\n\n        if (tlogs.size() > 1) { // if the current tlog is not the newest one, we can advance to the next one\n          tlogReader.close();\n          tlogs.removeLast();\n          currentTlog = tlogs.peekLast();\n          tlogReader = currentTlog.getReader(0);\n          pointer.set(currentTlog.tlogFile);\n          numRecordsReadInCurrentTlog = 0;\n          log.debug(\"Init new tlog reader for {} - tlogReader = {}\", currentTlog.tlogFile, tlogReader);\n        } else {\n          // the only tlog left is the new tlog which is currently being written,\n          // we should not remove it as we have to try to read it again later.\n          return null;\n        }\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}