{"path":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","commits":[{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94","date":1257897915,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap<String,Integer> termMap = new TreeMap<String,Integer>();\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator<String> termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = termIterator.next();\n      Integer termFreq = termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap<String,Integer> termMap = new TreeMap<String,Integer>();\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator<String> termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = termIterator.next();\n      Integer termFreq = termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap<String,Integer> termMap = new TreeMap<String,Integer>();\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), Integer.valueOf((terms.docFreq())));\n    }\n\n    Iterator<String> termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = termIterator.next();\n      Integer termFreq = termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["a4df60738409662c962b4ed3201d830cd3c14530"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4df60738409662c962b4ed3201d830cd3c14530"],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4256bc1b3c94786287ccdfc751230374521843cf":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}