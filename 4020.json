{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#verifyServletState(HttpSolrServer,SolrRequest).mjava","commits":[{"id":"6122889c0d9dbc6211cd4ab44633264fb906e74d","date":1411769054,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#verifyServletState(HttpSolrServer,SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyServletState(HttpSolrServer server, SolrRequest request) {\n    // check query String\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = server.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          // in either case, it should be in the parameters\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","date":1411813593,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#verifyServletState(HttpSolrServer,SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyServletState(HttpSolrServer server, SolrRequest request) {\n    // check query String\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = server.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          // in either case, it should be in the parameters\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#verifyServletState(HttpSolrClient,SolrRequest).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#verifyServletState(HttpSolrServer,SolrRequest).mjava","sourceNew":"  private void verifyServletState(HttpSolrClient client, SolrRequest request) {\n    // check query String\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          // in either case, it should be in the parameters\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyServletState(HttpSolrServer server, SolrRequest request) {\n    // check query String\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = server.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          // in either case, it should be in the parameters\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["6122889c0d9dbc6211cd4ab44633264fb906e74d"],"6122889c0d9dbc6211cd4ab44633264fb906e74d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6122889c0d9dbc6211cd4ab44633264fb906e74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6122889c0d9dbc6211cd4ab44633264fb906e74d","a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6122889c0d9dbc6211cd4ab44633264fb906e74d":["bafca15d8e408346a67f4282ad1143b88023893b","a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}