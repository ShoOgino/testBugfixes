{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","commits":[{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          setUpInternal();\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n\n          // TODO: [DW] should this really be this way? We could use\n          // JUnit's MultipleFailureException and propagate both?\n          base.evaluate();\n          tearDownInternal();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","sourceNew":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n          setUpInternal();\n          final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n          try {\n            // But we will collect errors from statements below and wrap them\n            // into a multiple so that tearDownInternal is called.\n            base.evaluate();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n          \n          try {\n            tearDownInternal();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n\n          MultipleFailureException.assertEmpty(errors);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          setUpInternal();\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n\n          // TODO: [DW] should this really be this way? We could use\n          // JUnit's MultipleFailureException and propagate both?\n          base.evaluate();\n          tearDownInternal();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","sourceNew":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n          setUpInternal();\n          final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n          try {\n            // But we will collect errors from statements below and wrap them\n            // into a multiple so that tearDownInternal is called.\n            base.evaluate();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n          \n          try {\n            tearDownInternal();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n\n          MultipleFailureException.assertEmpty(errors);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          setUpInternal();\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n\n          // TODO: [DW] should this really be this way? We could use\n          // JUnit's MultipleFailureException and propagate both?\n          base.evaluate();\n          tearDownInternal();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","sourceNew":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n          setUpInternal();\n          final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n          try {\n            // But we will collect errors from statements below and wrap them\n            // into a multiple so that tearDownInternal is called.\n            base.evaluate();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n          \n          try {\n            tearDownInternal();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n \n          MultipleFailureException.assertEmpty(errors);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n          setUpInternal();\n          final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n          try {\n            // But we will collect errors from statements below and wrap them\n            // into a multiple so that tearDownInternal is called.\n            base.evaluate();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n          \n          try {\n            tearDownInternal();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n\n          MultipleFailureException.assertEmpty(errors);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.InternalSetupTeardownRule#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Statement apply(final Statement base, Description description) {\n      return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n          // We simulate the previous behavior of @Before in that\n          // if any statement below us fails, we just propagate the original\n          // exception and do not call tearDownInternal.\n          setUpInternal();\n          final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n          try {\n            // But we will collect errors from statements below and wrap them\n            // into a multiple so that tearDownInternal is called.\n            base.evaluate();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n          \n          try {\n            tearDownInternal();\n          } catch (Throwable t) {\n            errors.add(t);\n          }\n \n          MultipleFailureException.assertEmpty(errors);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["1e6d0f38037e0125421d8e737992d511b5567b26","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"1e6d0f38037e0125421d8e737992d511b5567b26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["1e6d0f38037e0125421d8e737992d511b5567b26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1e6d0f38037e0125421d8e737992d511b5567b26":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6d0f38037e0125421d8e737992d511b5567b26"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}