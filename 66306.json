{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(SolrResourceLoader,IndexSchema).mjava","commits":[{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(SolrResourceLoader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(SolrResourceLoader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(SolrResourceLoader,IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}