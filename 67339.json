{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","sourceNew":"\t//Test multiple input words are having variants produced\n\tpublic void testMultiWord() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant jonathan\",queryTerms.contains(new Term(\"name\",\"jonathan\")));\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","sourceOld":"\t//Test multiple input words are having variants produced\n\tpublic void testMultiWord() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant jonathan\",queryTerms.contains(new Term(\"name\",\"jonathan\")));\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","sourceNew":"  //Test multiple input words are having variants produced\n  public void testMultiWord() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"\t//Test multiple input words are having variants produced\n\tpublic void testMultiWord() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant jonathan\",queryTerms.contains(new Term(\"name\",\"jonathan\")));\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testMultiWord().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testMultiWord().mjava","sourceNew":"  //Test multiple input words are having variants produced\n  public void testMultiWord() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  //Test multiple input words are having variants produced\n  public void testMultiWord() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["e141595402370bee958745de8b1c9de1fa182581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e141595402370bee958745de8b1c9de1fa182581":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}