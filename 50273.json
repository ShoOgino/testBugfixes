{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","commits":[{"id":"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesFriendsStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\");\n    indexr(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\");\n    indexr(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\");\n    indexr(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\");\n    indexr(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\");\n    indexr(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    indexr(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n    indexr(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\");\n\n    commit();\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"bill->from_s\\\",\" +\n                               \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"bill->from_s\\\",\" +\n           \"gather=\\\"to_s\\\",\"+\n           \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                    expr+\",\"+\n                   \"walk=\\\"node->from_s\\\",\" +\n                   \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n            expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n           \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n           \"walk=\\\"from_s->from_s\\\",\" +\n           \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n             expr+\",\"+\n            \"walk=\\\"node->from_s\\\",\" +\n            \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesFriendsStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(1L));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(2L));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(0L));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(2L));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(1L));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(2L));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesFriendsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n    //Test scatter branches, leaves and trackTraversal\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"gather=\\\"to_s\\\",\"+\n        \"scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(0).getStrings(\"ancestors\").size() == 0);\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    List<String> ancestors = tuples.get(1).getStrings(\"ancestors\");\n    System.out.println(\"##################### Ancestors:\"+ancestors);\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(2).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n    ancestors = tuples.get(3).getStrings(\"ancestors\");\n    assert(ancestors.size() == 1);\n    assert(ancestors.get(0).equals(\"bill\"));\n\n    // Test query root\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"sam\"));\n\n\n    // Test query root scatter branches\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(1)));\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n\n    //Test two traversals in the same expression\n    String expr3 = \"hashJoin(\"+expr2+\", hashed=\"+expr2+\", on=\\\"node\\\")\";\n\n    HashJoinStream hstream = (HashJoinStream)factory.constructStream(expr3);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    hstream.setStreamContext(context);\n\n    tuples = getTuples(hstream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"steve\"));\n\n    //=================================\n\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    //Add a cycle from jim to bill\n    new UpdateRequest()\n        .add(id, \"6\", \"from_s\", \"jim\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .add(id, \"7\", \"from_s\", \"sam\", \"to_s\", \"bill\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    expr = \"gatherNodes(collection1, \" +\n        \"search(collection1, q=\\\"message_t:jim\\\", fl=\\\"from_s\\\", sort=\\\"from_s asc\\\"),\"+\n        \"walk=\\\"from_s->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", trackTraversal=\\\"true\\\")\";\n\n    expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->from_s\\\",\" +\n        \"gather=\\\"to_s\\\", scatter=\\\"branches, leaves\\\", trackTraversal=\\\"true\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n    assertTrue(tuples.size() == 7);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"ann\"));\n    assertTrue(tuples.get(0).getLong(\"level\").equals(new Long(2)));\n    //Bill should now have one ancestor\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"bill\"));\n    assertTrue(tuples.get(1).getLong(\"level\").equals(new Long(0)));\n    assertTrue(tuples.get(1).getStrings(\"ancestors\").size() == 2);\n    List<String> anc = tuples.get(1).getStrings(\"ancestors\");\n\n    Collections.sort(anc);\n    assertTrue(anc.get(0).equals(\"jim\"));\n    assertTrue(anc.get(1).equals(\"sam\"));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"jim\"));\n    assertTrue(tuples.get(2).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"kip\"));\n    assertTrue(tuples.get(3).getLong(\"level\").equals(new Long(2)));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"max\"));\n    assertTrue(tuples.get(4).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(5).getString(\"node\").equals(\"sam\"));\n    assertTrue(tuples.get(5).getLong(\"level\").equals(new Long(1)));\n    assertTrue(tuples.get(6).getString(\"node\").equals(\"steve\"));\n    assertTrue(tuples.get(6).getLong(\"level\").equals(new Long(2)));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"73450c0955930295d34703e7ddbfc6973b7a121a":["0e15955b4980562a0c1c81d08654904f3fadb83b","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"79728e71d79579147b18f43e27a36e34be4986e2":["73450c0955930295d34703e7ddbfc6973b7a121a","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["79728e71d79579147b18f43e27a36e34be4986e2"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["d470c8182e92b264680e34081b75e70a9f2b3c89","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["79728e71d79579147b18f43e27a36e34be4986e2","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["0e15955b4980562a0c1c81d08654904f3fadb83b","b940572a59da1b42b6c20ab5278155b12816807a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d470c8182e92b264680e34081b75e70a9f2b3c89","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["0e15955b4980562a0c1c81d08654904f3fadb83b","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"73450c0955930295d34703e7ddbfc6973b7a121a":["79728e71d79579147b18f43e27a36e34be4986e2","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"79728e71d79579147b18f43e27a36e34be4986e2":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","0e15955b4980562a0c1c81d08654904f3fadb83b"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"0e15955b4980562a0c1c81d08654904f3fadb83b":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}