{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","commits":[{"id":"8e62b7f13f75a65dc61e64f71e4eccdd2c162605","date":1389835348,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(IOUtils.CHARSET_UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(IOUtils.CHARSET_UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(IOUtils.CHARSET_UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FreeTextLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    int grams = (params.get(NGRAMS) != null) \n        ? Integer.parseInt(params.get(NGRAMS).toString()) \n        : FreeTextSuggester.DEFAULT_GRAMS;\n    \n    byte separator = (params.get(SEPARATOR) != null) \n        ? params.get(SEPARATOR).toString().getBytes(StandardCharsets.UTF_8)[0]\n        : FreeTextSuggester.DEFAULT_SEPARATOR;\n    \n    return new FreeTextSuggester(indexAnalyzer, queryAnalyzer, grams, separator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["8e62b7f13f75a65dc61e64f71e4eccdd2c162605","7d89d7e4e5101347833eea558851bf4209218619"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e62b7f13f75a65dc61e64f71e4eccdd2c162605":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["8e62b7f13f75a65dc61e64f71e4eccdd2c162605"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8e62b7f13f75a65dc61e64f71e4eccdd2c162605"],"8e62b7f13f75a65dc61e64f71e4eccdd2c162605":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}