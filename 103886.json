{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testSortOptimizationEqualValues().mjava","commits":[{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testSortOptimizationEqualValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortOptimizationEqualValues() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());\n    final int numDocs = atLeast(10000);\n    for (int i = 1; i <= numDocs; ++i) {\n      final Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"my_field1\", 100)); // all docs have the same value of my_field1\n      doc.add(new IntPoint(\"my_field1\", 100));\n      doc.add(new NumericDocValuesField(\"my_field2\", numDocs - i)); // diff values for the field my_field2\n      writer.addDocument(doc);\n      if (i == 7000) writer.flush(); // two segments\n    }\n    final IndexReader reader = DirectoryReader.open(writer);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final int numHits = 3;\n    final int totalHitsThreshold = 3;\n\n    { // test that sorting on a single field with equal values uses the optimization\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on a single field with equal values and after parameter uses the optimization\n      final int afterValue = 100;\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      FieldDoc after = new FieldDoc(10, Float.NaN, new Integer[] {afterValue});\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, after, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on main field with equal values + another field for tie breaks doesn't use optimization\n      final SortField sortField1 = new SortField(\"my_field1\", SortField.Type.INT);\n      final SortField sortField2 = new SortField(\"my_field2\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField1, sortField2);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]); // sort on 1st field as expected\n        assertEquals(i, fieldDoc.fields[1]); // sort on 2nd field as expected\n      }\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      assertEquals(topDocs.totalHits.value, numDocs); // assert that all documents were collected => optimization was not run\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e977a403f93a917f75266c88727eadb89e4f64fc","date":1600866583,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testSortOptimizationEqualValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testSortOptimizationEqualValues().mjava","sourceNew":"  public void testSortOptimizationEqualValues() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());\n    final int numDocs = atLeast(10000);\n    for (int i = 1; i <= numDocs; ++i) {\n      final Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"my_field1\", 100)); // all docs have the same value of my_field1\n      doc.add(new IntPoint(\"my_field1\", 100));\n      doc.add(new NumericDocValuesField(\"my_field2\", numDocs - i)); // diff values for the field my_field2\n      writer.addDocument(doc);\n      if (i == 7000) writer.flush(); // two segments\n    }\n    final IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final int numHits = 3;\n    final int totalHitsThreshold = 3;\n\n    { // test that sorting on a single field with equal values uses the optimization\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on a single field with equal values and after parameter uses the optimization\n      final int afterValue = 100;\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      FieldDoc after = new FieldDoc(10, Float.NaN, new Integer[] {afterValue});\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, after, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on main field with equal values + another field for tie breaks doesn't use optimization\n      final SortField sortField1 = new SortField(\"my_field1\", SortField.Type.INT);\n      final SortField sortField2 = new SortField(\"my_field2\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField1, sortField2);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]); // sort on 1st field as expected\n        assertEquals(i, fieldDoc.fields[1]); // sort on 2nd field as expected\n      }\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      assertEquals(topDocs.totalHits.value, numDocs); // assert that all documents were collected => optimization was not run\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortOptimizationEqualValues() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());\n    final int numDocs = atLeast(10000);\n    for (int i = 1; i <= numDocs; ++i) {\n      final Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"my_field1\", 100)); // all docs have the same value of my_field1\n      doc.add(new IntPoint(\"my_field1\", 100));\n      doc.add(new NumericDocValuesField(\"my_field2\", numDocs - i)); // diff values for the field my_field2\n      writer.addDocument(doc);\n      if (i == 7000) writer.flush(); // two segments\n    }\n    final IndexReader reader = DirectoryReader.open(writer);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final int numHits = 3;\n    final int totalHitsThreshold = 3;\n\n    { // test that sorting on a single field with equal values uses the optimization\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on a single field with equal values and after parameter uses the optimization\n      final int afterValue = 100;\n      final SortField sortField = new SortField(\"my_field1\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField);\n      FieldDoc after = new FieldDoc(10, Float.NaN, new Integer[] {afterValue});\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, after, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]);\n      }\n      assertTrue(topDocs.totalHits.value < numDocs); // assert that some docs were skipped => optimization was run\n    }\n\n    { // test that sorting on main field with equal values + another field for tie breaks doesn't use optimization\n      final SortField sortField1 = new SortField(\"my_field1\", SortField.Type.INT);\n      final SortField sortField2 = new SortField(\"my_field2\", SortField.Type.INT);\n      final Sort sort = new Sort(sortField1, sortField2);\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      searcher.search(new MatchAllDocsQuery(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      for (int i = 0; i < numHits; i++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[i];\n        assertEquals(100, fieldDoc.fields[0]); // sort on 1st field as expected\n        assertEquals(i, fieldDoc.fields[1]); // sort on 2nd field as expected\n      }\n      assertEquals(topDocs.scoreDocs.length, numHits);\n      assertEquals(topDocs.totalHits.value, numDocs); // assert that all documents were collected => optimization was not run\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e977a403f93a917f75266c88727eadb89e4f64fc":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e977a403f93a917f75266c88727eadb89e4f64fc"]},"commit2Childs":{"e977a403f93a917f75266c88727eadb89e4f64fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e977a403f93a917f75266c88727eadb89e4f64fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}