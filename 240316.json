{"path":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","date":1492601294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42af8b6faf51a231cccd4dc271c9f088c248dd17","date":1591153057,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n\n    // SOLR-11334\n    args.put(\"hl.fl\", \"title, text\"); // comma then space\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 2, highlightFieldNames\n        .size());\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\",\n        highlightFieldNames.contains(\"title\"));\n    assertTrue(\"Expected to highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"\\\"\",\n        highlightFieldNames.contains(\"\"));\n\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"bar_s\", \"test\", // dynamic stored\n        \"bar_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n\n    // SOLR-5127\n    args.put(\"hl.fl\", (random().nextBoolean() ? \"foo_*,bar_*\" : \"bar_*,foo_*\"));\n    lrf = h.getRequestFactory(\"\", 0, 10, args);\n    // hl.fl ordering need not be preserved in output\n    final Set<String> highlightedSetExpected = new HashSet<String>();\n    highlightedSetExpected.add(\"foo_s\");\n    highlightedSetExpected.add(\"bar_s\");\n    try (LocalSolrQueryRequest localRequest = lrf.makeRequest(\"test\")) {\n      highlighter = HighlightComponent.getHighlighter(h.getCore());\n      final Set<String> highlightedSetActual = new HashSet<String>(\n          Arrays.asList(highlighter.getHighlightFields(null,\n              localRequest, new String[] {})));\n      assertEquals(highlightedSetExpected, highlightedSetActual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"28288370235ed02234a64753cdbf0c6ec096304a":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","5ff704ef91e9ae30ca59babb23ece85720701b60"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42af8b6faf51a231cccd4dc271c9f088c248dd17":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42af8b6faf51a231cccd4dc271c9f088c248dd17"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"30c8e5574b55d57947e989443dfde611646530ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","42af8b6faf51a231cccd4dc271c9f088c248dd17"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"42af8b6faf51a231cccd4dc271c9f088c248dd17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9":["28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}