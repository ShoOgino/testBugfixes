{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","commits":[{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: decRefs incoming reader on throwing an exception\n  static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77925d097d69ba9a9806554c5afe4779fafa142d","date":1365611122,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","sourceNew":"  /** Expert: creates a searcher from the provided {@link\n   *  IndexReader} using the provided {@link\n   *  SearcherFactory}.  NOTE: this decRefs incoming reader\n   * on throwing an exception. */\n  public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","sourceOld":"  // NOTE: decRefs incoming reader on throwing an exception\n  static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","sourceNew":"  /** Expert: creates a searcher from the provided {@link\n   *  IndexReader} using the provided {@link\n   *  SearcherFactory}.  NOTE: this decRefs incoming reader\n   * on throwing an exception. */\n  public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader, IndexReader previousReader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader, previousReader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","sourceOld":"  /** Expert: creates a searcher from the provided {@link\n   *  IndexReader} using the provided {@link\n   *  SearcherFactory}.  NOTE: this decRefs incoming reader\n   * on throwing an exception. */\n  public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#getSearcher(SearcherFactory,IndexReader).mjava","sourceNew":"  /** Expert: creates a searcher from the provided {@link\n   *  IndexReader} using the provided {@link\n   *  SearcherFactory}.  NOTE: this decRefs incoming reader\n   * on throwing an exception. */\n  public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader, IndexReader previousReader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader, previousReader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","sourceOld":"  /** Expert: creates a searcher from the provided {@link\n   *  IndexReader} using the provided {@link\n   *  SearcherFactory}.  NOTE: this decRefs incoming reader\n   * on throwing an exception. */\n  public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException {\n    boolean success = false;\n    final IndexSearcher searcher;\n    try {\n      searcher = searcherFactory.newSearcher(reader);\n      if (searcher.getIndexReader() != reader) {\n        throw new IllegalStateException(\"SearcherFactory must wrap exactly the provided reader (got \" + searcher.getIndexReader() + \" but expected \" + reader + \")\");\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        reader.decRef();\n      }\n    }\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["77925d097d69ba9a9806554c5afe4779fafa142d"],"77925d097d69ba9a9806554c5afe4779fafa142d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["77925d097d69ba9a9806554c5afe4779fafa142d","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"77925d097d69ba9a9806554c5afe4779fafa142d":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"c380c22ff3b659b2d7412a3335f853d354d17568":["77925d097d69ba9a9806554c5afe4779fafa142d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}