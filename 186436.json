{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"/dev/null","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    int count = 0;\r\n    for (int k=0; k<repetitions; k++) {\r\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n        PerfTask task = (PerfTask) it.next();\r\n        long waitMore = nextStartTime - System.currentTimeMillis();\r\n        if (waitMore > 0) {\r\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n          Thread.sleep(waitMore);\r\n        }\r\n        nextStartTime += delayStep; // this aims at avarage rate. \r\n        count += task.runAndMaybeStats(letChildReport);\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    int count = 0;\r\n    boolean exhausted = false;\r\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\r\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n        PerfTask task = (PerfTask) it.next();\r\n        long waitMore = nextStartTime - System.currentTimeMillis();\r\n        if (waitMore > 0) {\r\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n          Thread.sleep(waitMore);\r\n        }\r\n        nextStartTime += delayStep; // this aims at avarage rate. \r\n        try {\r\n          count += task.runAndMaybeStats(letChildReport);\r\n        } catch (NoMoreDataException e) {\r\n          exhausted = true;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    int count = 0;\r\n    for (int k=0; k<repetitions; k++) {\r\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n        PerfTask task = (PerfTask) it.next();\r\n        long waitMore = nextStartTime - System.currentTimeMillis();\r\n        if (waitMore > 0) {\r\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n          Thread.sleep(waitMore);\r\n        }\r\n        nextStartTime += delayStep; // this aims at avarage rate. \r\n        count += task.runAndMaybeStats(letChildReport);\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    boolean exhausted = false;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\n        PerfTask task = (PerfTask) it.next();\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    int count = 0;\r\n    boolean exhausted = false;\r\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\r\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n        PerfTask task = (PerfTask) it.next();\r\n        long waitMore = nextStartTime - System.currentTimeMillis();\r\n        if (waitMore > 0) {\r\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n          Thread.sleep(waitMore);\r\n        }\r\n        nextStartTime += delayStep; // this aims at avarage rate. \r\n        try {\r\n          count += task.runAndMaybeStats(letChildReport);\r\n        } catch (NoMoreDataException e) {\r\n          exhausted = true;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\n","bugFix":null,"bugIntro":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"774d97e6f8928526e14d363d098229df30c5e3ca","date":1190106306,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\n        PerfTask task = (PerfTask) it.next();\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    boolean exhausted = false;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\n        PerfTask task = (PerfTask) it.next();\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d6b7628166e3e58a411c83f120233cbaf3fc052","date":1199324898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustableTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (Iterator it = tasks.iterator(); it.hasNext();) {\n        PerfTask task = (PerfTask) it.next();\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":["774d97e6f8928526e14d363d098229df30c5e3ca","3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17545f768b4195b31e1007eedb907431f58f7833","date":1199373641,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustableTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3353540ef2debe4c4c017e9d86e2c60f9e784336","date":1258197258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        long waitMore = nextStartTime - System.currentTimeMillis();\n        if (waitMore > 0) {\n          //System.out.println(\"wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n          Thread.sleep(waitMore);\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          count += task.runAndMaybeStats(letChildReport);\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c8ee4a3c7836e15334241f70e67745db535320","date":1263810494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["17545f768b4195b31e1007eedb907431f58f7833"],"774d97e6f8928526e14d363d098229df30c5e3ca":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["774d97e6f8928526e14d363d098229df30c5e3ca"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c8ee4a3c7836e15334241f70e67745db535320":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"17545f768b4195b31e1007eedb907431f58f7833":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["89c8ee4a3c7836e15334241f70e67745db535320"]},"commit2Childs":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"774d97e6f8928526e14d363d098229df30c5e3ca":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["774d97e6f8928526e14d363d098229df30c5e3ca"],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["17545f768b4195b31e1007eedb907431f58f7833"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["89c8ee4a3c7836e15334241f70e67745db535320"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"89c8ee4a3c7836e15334241f70e67745db535320":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"17545f768b4195b31e1007eedb907431f58f7833":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}