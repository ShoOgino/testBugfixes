{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          boolean pass = tag.isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          boolean pass = tag.isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":null,"sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          boolean pass = tag.isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":null,"sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          boolean pass = tag.isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","9837f40c922407d857991971de6def18eda0857b"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ae23947c41339ea2b352422bb762dfb4a17077":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9837f40c922407d857991971de6def18eda0857b":["33ae23947c41339ea2b352422bb762dfb4a17077"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33ae23947c41339ea2b352422bb762dfb4a17077","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"33ae23947c41339ea2b352422bb762dfb4a17077":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["33ae23947c41339ea2b352422bb762dfb4a17077"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}