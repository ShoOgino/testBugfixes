{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3802d95c3a31be21ea2971945049b711d95ef8d5","date":1455055616,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":["275f40e1400de0b5ab5e33051ac11e8973813a2c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c64189697927b548f74ba66dfa5051548662938","date":1455059336,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"275f40e1400de0b5ab5e33051ac11e8973813a2c","date":1465569625,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n        req(\"q\", \"id:\" + t(i), \"indent\", \"true\"\n            , \"facet\", \"true\", \"facet.method\", ((methodSeed + i) % 2 == 0 ? \"fc\" : \"uif\")\n            , \"facet.field\", \"many_ws\"\n            , \"facet.limit\", \"-1\"\n            , \"facet.mincount\", \"1\"\n\n        )\n        , \"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n        , \"//lst[@name='many_ws']/int[@name='\" + t(i1 + i) + \"'][.='1']\"\n        , \"//lst[@name='many_ws']/int[@name='\" + t(i1 * 2 + i) + \"'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":["9a70797e2ad3b67325d3043155af4baf6445fdd9","3802d95c3a31be21ea2971945049b711d95ef8d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n        req(\"q\", \"id:\" + t(i), \"indent\", \"true\"\n            , \"facet\", \"true\", \"facet.method\", ((methodSeed + i) % 2 == 0 ? \"fc\" : \"uif\")\n            , \"facet.field\", \"many_ws\"\n            , \"facet.limit\", \"-1\"\n            , \"facet.mincount\", \"1\"\n\n        )\n        , \"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n        , \"//lst[@name='many_ws']/int[@name='\" + t(i1 + i) + \"'][.='1']\"\n        , \"//lst[@name='many_ws']/int[@name='\" + t(i1 * 2 + i) + \"'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    final int methodSeed = random().nextInt(2);\n    \n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\",\n                \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",((methodSeed + i)%2 ==0 ?\"fc\":\"uif\")\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c64189697927b548f74ba66dfa5051548662938":["19275ba31e621f6da1b83bf13af75233876fd3d4","3802d95c3a31be21ea2971945049b711d95ef8d5"],"275f40e1400de0b5ab5e33051ac11e8973813a2c":["3c64189697927b548f74ba66dfa5051548662938"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3c64189697927b548f74ba66dfa5051548662938","275f40e1400de0b5ab5e33051ac11e8973813a2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["275f40e1400de0b5ab5e33051ac11e8973813a2c"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","3c64189697927b548f74ba66dfa5051548662938","3802d95c3a31be21ea2971945049b711d95ef8d5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3c64189697927b548f74ba66dfa5051548662938":["275f40e1400de0b5ab5e33051ac11e8973813a2c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"275f40e1400de0b5ab5e33051ac11e8973813a2c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3802d95c3a31be21ea2971945049b711d95ef8d5":["3c64189697927b548f74ba66dfa5051548662938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}