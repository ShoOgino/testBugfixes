{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      float subScore = scorer.maxScore();\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      float subScore = scorer.maxScore();\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9","date":1525274442,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      scorer.advanceShallow(0);\n      float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca059a1802d561df3c5d3abac663d4e6284f33a","date":1526486059,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    if (needsScores == false) {\n      this.maxScore = Float.MAX_VALUE;\n    } else {\n      float scoreMax = 0;\n      double otherScoreSum = 0;\n      for (Scorer scorer : subScorers) {\n        scorer.advanceShallow(0);\n        float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n        if (subScore >= scoreMax) {\n          otherScoreSum += scoreMax;\n          scoreMax = subScore;\n        } else {\n          otherScoreSum += subScore;\n        }\n      }\n\n      if (tieBreakerMultiplier == 0) {\n        this.maxScore = scoreMax;\n      } else {\n        // The error of sums depends on the order in which values are summed up. In\n        // order to avoid this issue, we compute an upper bound of the value that\n        // the sum may take. If the max relative error is b, then it means that two\n        // sums are always within 2*b of each other.\n        otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n        this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (Scorer scorer : subScorers) {\n      scorer.advanceShallow(0);\n      float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n\n    if (tieBreakerMultiplier == 0) {\n      this.maxScore = scoreMax;\n    } else {\n      // The error of sums depends on the order in which values are summed up. In\n      // order to avoid this issue, we compute an upper bound of the value that\n      // the sum may take. If the max relative error is b, then it means that two\n      // sums are always within 2*b of each other.\n      otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n      this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":5,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight, subScorers, scoreMode);\n    this.subScorers = subScorers;\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    if (needsScores == false) {\n      this.maxScore = Float.MAX_VALUE;\n    } else {\n      float scoreMax = 0;\n      double otherScoreSum = 0;\n      for (Scorer scorer : subScorers) {\n        scorer.advanceShallow(0);\n        float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n        if (subScore >= scoreMax) {\n          otherScoreSum += scoreMax;\n          scoreMax = subScore;\n        } else {\n          otherScoreSum += subScore;\n        }\n      }\n\n      if (tieBreakerMultiplier == 0) {\n        this.maxScore = scoreMax;\n      } else {\n        // The error of sums depends on the order in which values are summed up. In\n        // order to avoid this issue, we compute an upper bound of the value that\n        // the sum may take. If the max relative error is b, then it means that two\n        // sums are always within 2*b of each other.\n        otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n        this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca059a1802d561df3c5d3abac663d4e6284f33a":["b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9"],"5b559eeae2a2a767f75666f9b692659cfe1bf631":["9ca059a1802d561df3c5d3abac663d4e6284f33a"],"4874ce841615411ddc4f5998fc9db9a533827976":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["4874ce841615411ddc4f5998fc9db9a533827976"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b559eeae2a2a767f75666f9b692659cfe1bf631"]},"commit2Childs":{"9ca059a1802d561df3c5d3abac663d4e6284f33a":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"5b559eeae2a2a767f75666f9b692659cfe1bf631":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4874ce841615411ddc4f5998fc9db9a533827976":["523cc6563c99a55527ef7993efc5413c6648852d"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["4874ce841615411ddc4f5998fc9db9a533827976"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9":["9ca059a1802d561df3c5d3abac663d4e6284f33a"],"523cc6563c99a55527ef7993efc5413c6648852d":["b9d936767cccf71f03b9fe4ee80cb70e2dc39dd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}