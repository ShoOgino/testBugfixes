{"path":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","sourceNew":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSetIterator docIdSetIterator = f.getDocIdSet(ir).iterator();\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        final DocIdSetIterator docIdSetIterator = filter.getDocIdSet(indexReader).iterator();\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  protected Weight createWeight (final Searcher searcher) throws IOException {\n    final Weight weight = query.createWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new Weight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSetIterator docIdSetIterator = f.getDocIdSet(ir).iterator();\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer (IndexReader indexReader) throws IOException {\n        final Scorer scorer = weight.scorer(indexReader);\n        final DocIdSetIterator docIdSetIterator = filter.getDocIdSet(indexReader).iterator();\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","sourceNew":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? EmptyDocIdSetIterator.getInstance() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = EmptyDocIdSetIterator.getInstance();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSetIterator docIdSetIterator = f.getDocIdSet(ir).iterator();\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        final DocIdSetIterator docIdSetIterator = filter.getDocIdSet(indexReader).iterator();\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf6645926c5572261eb47ea234b7892fc1df074f","date":1248693156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","sourceNew":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? EmptyDocIdSetIterator.getInstance() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = EmptyDocIdSetIterator.getInstance();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/FilteredQuery#createQueryWeight(Searcher).mjava","sourceNew":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public Weight createWeight(final Searcher searcher) throws IOException {\n    final Weight weight = query.createWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new Weight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (Searcher searcher, IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (searcher, ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  public QueryWeight createQueryWeight(final Searcher searcher) throws IOException {\n    final QueryWeight weight = query.createQueryWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new QueryWeight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      public float getValue() { return value; }\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, scoreDocsInOrder, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          /** @deprecated use {@link #nextDoc()} instead. */\n          public boolean next() throws IOException {\n            return nextDoc() != NO_MORE_DOCS;\n          }\n\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          /** @deprecated use {@link #docID()} instead. */\n          public int doc() { return scorer.doc(); }\n          public int docID() { return doc; }\n          \n          /** @deprecated use {@link #advance(int)} instead. */\n          public boolean skipTo(int i) throws IOException {\n            return advance(i) != NO_MORE_DOCS;\n          }\n          \n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n\n          // add an explanation about whether the document was filtered\n          public Explanation explain (int i) throws IOException {\n            Explanation exp = scorer.explain(i);\n            \n            if (docIdSetIterator.advance(i) == i) {\n              exp.setDescription (\"allowed by filter: \"+exp.getDescription());\n              exp.setValue(getBoost() * exp.getValue());\n            } else {\n              exp.setDescription (\"removed by filter: \"+exp.getDescription());\n              exp.setValue(0.0f);\n            }\n            return exp;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["231941d2cb96b9752e839c311391096d90470db8"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cf6645926c5572261eb47ea234b7892fc1df074f":["8d6c98c690b593cea727f68742684c979ead1a0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["cf6645926c5572261eb47ea234b7892fc1df074f"],"8d6c98c690b593cea727f68742684c979ead1a0a":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"cf6645926c5572261eb47ea234b7892fc1df074f":["fe941135bdfc28c81e20b4d21422f8726af34925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d6c98c690b593cea727f68742684c979ead1a0a":["cf6645926c5572261eb47ea234b7892fc1df074f"],"052fac7830290bd38a04cddee1a121ee07656b56":["8d6c98c690b593cea727f68742684c979ead1a0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}