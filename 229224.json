{"path":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","commits":[{"id":"e36340c25bc4d51dfec6b5669b58042e9180b596","date":1305729818,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", customType, \"\" + i));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", customType, \"\" + i));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBinaryTerms#testBinary().mjava","sourceNew":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinary() throws IOException {\n    assumeFalse(\"PreFlex codec cannot work with binary terms!\", \n        Codec.getDefault().getName().equals(\"Lucene3x\"));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    BytesRef bytes = new BytesRef(2);\n    BinaryTokenStream tokenStream = new BinaryTokenStream(bytes);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      Document doc = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      doc.add(new Field(\"id\", \"\" + i, customType));\n      doc.add(new TextField(\"bytes\", tokenStream));\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = newSearcher(ir);\n    \n    for (int i = 0; i < 256; i++) {\n      bytes.bytes[0] = (byte) i;\n      bytes.bytes[1] = (byte) (255 - i);\n      bytes.length = 2;\n      TopDocs docs = is.search(new TermQuery(new Term(\"bytes\", bytes)), 5);\n      assertEquals(1, docs.totalHits);\n      assertEquals(\"\" + i, is.doc(docs.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"e36340c25bc4d51dfec6b5669b58042e9180b596":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e36340c25bc4d51dfec6b5669b58042e9180b596"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e36340c25bc4d51dfec6b5669b58042e9180b596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e36340c25bc4d51dfec6b5669b58042e9180b596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"e36340c25bc4d51dfec6b5669b58042e9180b596":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e36340c25bc4d51dfec6b5669b58042e9180b596","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}