{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","commits":[{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  // Read the parents of the new categories\n  private void initFromReader(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    TermsEnum termsEnum = null;\n    DocsAndPositionsEnum positions = null;\n    int idx = 0;\n    for (AtomicReaderContext context : reader.leaves()) {\n      if (context.docBase < first) {\n        continue;\n      }\n\n      // in general we could call readerCtx.reader().termPositionsEnum(), but that\n      // passes the liveDocs. Since we know there are no deletions, the code\n      // below may save some CPU cycles.\n      termsEnum = context.reader().fields().terms(Consts.FIELD_PAYLOADS).iterator(termsEnum);\n      if (!termsEnum.seekExact(Consts.PAYLOAD_PARENT_BYTES_REF, true)) {\n        throw new CorruptIndexException(\"Missing parent stream data for segment \" + context.reader());\n      }\n      positions = termsEnum.docsAndPositions(null /* no deletes in taxonomy */, positions);\n      if (positions == null) {\n        throw new CorruptIndexException(\"Missing parent stream data for segment \" + context.reader());\n      }\n\n      idx = context.docBase;\n      int doc;\n      while ((doc = positions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        doc += context.docBase;\n        if (doc == idx) {\n          if (positions.freq() == 0) { // shouldn't happen\n            throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n          }\n          \n          parentOrdinals[idx++] = positions.nextPosition();\n        } else { // this shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n        }\n      }\n      if (idx + 1 < context.reader().maxDoc()) {\n        throw new CorruptIndexException(\"Missing parent data for category \" + (idx + 1));\n      }\n    }\n    \n    if (idx != reader.maxDoc()) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d354a31eacacdfbc478eaa22e9cf021a2972280","date":1353525594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initFromReader(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parentOrdinals[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initFromReader(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    TermsEnum termsEnum = null;\n    DocsAndPositionsEnum positions = null;\n    int idx = 0;\n    for (AtomicReaderContext context : reader.leaves()) {\n      if (context.docBase < first) {\n        continue;\n      }\n\n      // in general we could call readerCtx.reader().termPositionsEnum(), but that\n      // passes the liveDocs. Since we know there are no deletions, the code\n      // below may save some CPU cycles.\n      termsEnum = context.reader().fields().terms(Consts.FIELD_PAYLOADS).iterator(termsEnum);\n      if (!termsEnum.seekExact(Consts.PAYLOAD_PARENT_BYTES_REF, true)) {\n        throw new CorruptIndexException(\"Missing parent stream data for segment \" + context.reader());\n      }\n      positions = termsEnum.docsAndPositions(null /* no deletes in taxonomy */, positions);\n      if (positions == null) {\n        throw new CorruptIndexException(\"Missing parent stream data for segment \" + context.reader());\n      }\n\n      idx = context.docBase;\n      int doc;\n      while ((doc = positions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        doc += context.docBase;\n        if (doc == idx) {\n          if (positions.freq() == 0) { // shouldn't happen\n            throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n          }\n          \n          parentOrdinals[idx++] = positions.nextPosition();\n        } else { // this shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n        }\n      }\n      if (idx + 1 < context.reader().maxDoc()) {\n        throw new CorruptIndexException(\"Missing parent data for category \" + (idx + 1));\n      }\n    }\n    \n    if (idx != reader.maxDoc()) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initFromReader(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parentOrdinals[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d354a31eacacdfbc478eaa22e9cf021a2972280":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["6d354a31eacacdfbc478eaa22e9cf021a2972280"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"6d354a31eacacdfbc478eaa22e9cf021a2972280":["3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3d58d08788c3fd51172ba34474cca42499d6391b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["6d354a31eacacdfbc478eaa22e9cf021a2972280"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}