{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":"  /**\n   * Test the scenario where the follower is killed while the leader is still receiving updates.\n   * The follower should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the follower should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> followers = this.getShardToFollowerJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the follower node to trigger Replication strategy\n    this.restartServer(followers.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the follower\n    assertNumDocs(numDocs.get(), followers.get(0));\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed while the leader is still receiving updates.\n   * The slave should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the slave should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the slave\n    assertNumDocs(numDocs.get(), slaves.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testReplicationWithBufferedUpdates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test the scenario where the follower is killed while the leader is still receiving updates.\n   * The follower should buffer updates while in recovery, then replay them at the end of the recovery.\n   * If updates were properly buffered and replayed, then the follower should have the same number of documents\n   * than the leader. This checks if cdcr tlog replication interferes with buffered updates - SOLR-8263.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testReplicationWithBufferedUpdates() throws Exception {\n    List<CloudJettyRunner> followers = this.getShardToFollowerJetty(SOURCE_COLLECTION, SHARD1);\n\n    AtomicInteger numDocs = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-test-update-scheduler\"));\n    executor.scheduleWithFixedDelay(new UpdateThread(numDocs), 10, 10, TimeUnit.MILLISECONDS);\n\n    // Restart the follower node to trigger Replication strategy\n    this.restartServer(followers.get(0));\n\n    // shutdown the update thread and wait for its completion\n    executor.shutdown();\n    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n    // check that we have the expected number of documents in the cluster\n    assertNumDocs(numDocs.get(), SOURCE_COLLECTION);\n\n    // check that we have the expected number of documents on the follower\n    assertNumDocs(numDocs.get(), followers.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}