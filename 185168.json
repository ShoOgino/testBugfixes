{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacets#getAllDims(int).mjava","commits":[{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacets#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      String dim = taxoReader.getPath(ord).components[0];\n      FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n      if (dimConfig.indexFieldName.equals(indexFieldName)) {\n        SimpleFacetResult result = getTopChildren(topN, dim);\n        if (result != null) {\n          results.add(result);\n        }\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest value, tie break by value:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.doubleValue() > b.value.doubleValue()) {\n                           return -1;\n                         } else if (b.value.doubleValue() > a.value.doubleValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      SimpleFacetResult result = getTopChildren(taxoReader.getPath(ord), ord, topN);\n      if (result != null) {\n        results.add(result);\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacets#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacets#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      String dim = taxoReader.getPath(ord).components[0];\n      FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n      if (dimConfig.indexFieldName.equals(indexFieldName)) {\n        SimpleFacetResult result = getTopChildren(topN, dim);\n        if (result != null) {\n          results.add(result);\n        }\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest value, tie break by value:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.doubleValue() > b.value.doubleValue()) {\n                           return -1;\n                         } else if (b.value.doubleValue() > a.value.doubleValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      String dim = taxoReader.getPath(ord).components[0];\n      FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n      if (dimConfig.indexFieldName.equals(indexFieldName)) {\n        SimpleFacetResult result = getTopChildren(topN, dim);\n        if (result != null) {\n          results.add(result);\n        }\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest value, tie break by value:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.doubleValue() > b.value.doubleValue()) {\n                           return -1;\n                         } else if (b.value.doubleValue() > a.value.doubleValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacets#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacets#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      String dim = taxoReader.getPath(ord).components[0];\n      FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n      if (dimConfig.indexFieldName.equals(indexFieldName)) {\n        FacetResult result = getTopChildren(topN, dim);\n        if (result != null) {\n          results.add(result);\n        }\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest value, tie break by value:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.doubleValue() > b.value.doubleValue()) {\n                           return -1;\n                         } else if (b.value.doubleValue() > a.value.doubleValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n    int ord = children[TaxonomyReader.ROOT_ORDINAL];\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    while (ord != TaxonomyReader.INVALID_ORDINAL) {\n      String dim = taxoReader.getPath(ord).components[0];\n      FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n      if (dimConfig.indexFieldName.equals(indexFieldName)) {\n        SimpleFacetResult result = getTopChildren(topN, dim);\n        if (result != null) {\n          results.add(result);\n        }\n      }\n      ord = siblings[ord];\n    }\n\n    // Sort by highest value, tie break by value:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.doubleValue() > b.value.doubleValue()) {\n                           return -1;\n                         } else if (b.value.doubleValue() > a.value.doubleValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18edd2e3f5560087a37442fa424cbbed7c295ebc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}