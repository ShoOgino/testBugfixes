{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        if (locked) {\n          lock.unlock();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        if (locked) {\n          lock.unlock();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5398bc4387a8e74fb85a7ddc7d8e89e56ed465ec","date":1499216175,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        if (locked) {\n          lock.unlock();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        if (locked) {\n          lock.unlock();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked) {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestEventMarkerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked) {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        events.add(event);\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0d9c88546c1a130d50b56981790d87a308daffd"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5398bc4387a8e74fb85a7ddc7d8e89e56ed465ec":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d9c88546c1a130d50b56981790d87a308daffd":["1f6b20dc453cee198956989b90aa24bef0232bcf","5398bc4387a8e74fb85a7ddc7d8e89e56ed465ec"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["560c18d71dad43d675158783c3840f8c80d6d39c","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"5398bc4387a8e74fb85a7ddc7d8e89e56ed465ec":["e0d9c88546c1a130d50b56981790d87a308daffd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["5398bc4387a8e74fb85a7ddc7d8e89e56ed465ec","e0d9c88546c1a130d50b56981790d87a308daffd"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}