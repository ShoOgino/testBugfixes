{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f58dd714e47e4b20e7ddf69802a24d8278a50d3d","date":1270583819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"/dev/null","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null) {\n        doPause = waitQueue.add(docWriter);\n      } else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause) {\n        waitForWaitQueue();\n      }\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null) {\n        doPause = waitQueue.add(docWriter);\n      } else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause) {\n        waitForWaitQueue();\n      }\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null) {\n        doPause = waitQueue.add(docWriter);\n      } else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause) {\n        waitForWaitQueue();\n      }\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null) {\n        doPause = waitQueue.add(docWriter);\n      } else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause) {\n        waitForWaitQueue();\n      }\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    // Must call this w/o holding synchronized(this) else\n    // we'll hit deadlock:\n    balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null) {\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n        }\n\n        perThread.isIdle = true;\n\n        // wakes up any threads waiting on the wait queue\n        notifyAll();\n\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null) {\n        doPause = waitQueue.add(docWriter);\n      } else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause) {\n        waitForWaitQueue();\n      }\n\n      perThread.isIdle = true;\n\n      // wakes up any threads waiting on the wait queue\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}