{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testGeometricDistribution().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testGeometricDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testGeometricDistribution().mjava","sourceNew":"  @Test\n  public void testGeometricDistribution() throws Exception {\n    String cexpr = \"let(a=geometricDistribution(.2),\" +\n        \"               b=geometricDistribution(.5),\" +\n        \"               c=geometricDistribution(.8),\" +\n        \"               d=sample(a, 10000),\" +\n        \"               e=sample(b, 10000),\" +\n        \"               f=sample(c, 10000),\" +\n        \"               g=freqTable(d),\" +\n        \"               h=freqTable(e),\" +\n        \"               i=freqTable(f),\" +\n        \"               tuple(g=g, h=h, i=i))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Map> listg = (List<Map>)tuples.get(0).get(\"g\");\n    Map mapg = listg.get(0);\n    double pctg = (double) mapg.get(\"pct\");\n    assertEquals(pctg, .2, .02);\n\n    List<Map> listh = (List<Map>)tuples.get(0).get(\"h\");\n    Map maph = listh.get(0);\n    double pcth = (double)maph.get(\"pct\");\n    assertEquals(pcth, .5, .02);\n\n    List<Map> listi = (List<Map>)tuples.get(0).get(\"i\");\n    Map mapi = listi.get(0);\n    double pcti = (double)mapi.get(\"pct\");\n    assertEquals(pcti, .8, .02);\n  }\n\n","sourceOld":"  @Test\n  public void testGeometricDistribution() throws Exception {\n    String cexpr = \"let(a=geometricDistribution(.2),\" +\n        \"               b=geometricDistribution(.5),\" +\n        \"               c=geometricDistribution(.8),\" +\n        \"               d=sample(a, 10000),\" +\n        \"               e=sample(b, 10000),\" +\n        \"               f=sample(c, 10000),\" +\n        \"               g=freqTable(d),\" +\n        \"               h=freqTable(e),\" +\n        \"               i=freqTable(f),\" +\n        \"               tuple(g=g, h=h, i=i))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Map> listg = (List<Map>)tuples.get(0).get(\"g\");\n    Map mapg = listg.get(0);\n    double pctg = (double) mapg.get(\"pct\");\n    assertEquals(pctg, .2, .02);\n\n    List<Map> listh = (List<Map>)tuples.get(0).get(\"h\");\n    Map maph = listh.get(0);\n    double pcth = (double)maph.get(\"pct\");\n    assertEquals(pcth, .5, .02);\n\n    List<Map> listi = (List<Map>)tuples.get(0).get(\"i\");\n    Map mapi = listi.get(0);\n    double pcti = (double)mapi.get(\"pct\");\n    assertEquals(pcti, .8, .02);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testGeometricDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testGeometricDistribution().mjava","sourceNew":"  @Test\n  public void testGeometricDistribution() throws Exception {\n    String cexpr = \"let(a=geometricDistribution(.2),\" +\n        \"               b=geometricDistribution(.5),\" +\n        \"               c=geometricDistribution(.8),\" +\n        \"               d=sample(a, 10000),\" +\n        \"               e=sample(b, 10000),\" +\n        \"               f=sample(c, 10000),\" +\n        \"               g=freqTable(d),\" +\n        \"               h=freqTable(e),\" +\n        \"               i=freqTable(f),\" +\n        \"               tuple(g=g, h=h, i=i))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> listg = (List<Map>)tuples.get(0).get(\"g\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map mapg = listg.get(0);\n    double pctg = (double) mapg.get(\"pct\");\n    assertEquals(pctg, .2, .02);\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> listh = (List<Map>)tuples.get(0).get(\"h\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map maph = listh.get(0);\n    double pcth = (double)maph.get(\"pct\");\n    assertEquals(pcth, .5, .02);\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> listi = (List<Map>)tuples.get(0).get(\"i\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map mapi = listi.get(0);\n    double pcti = (double)mapi.get(\"pct\");\n    assertEquals(pcti, .8, .02);\n  }\n\n","sourceOld":"  @Test\n  public void testGeometricDistribution() throws Exception {\n    String cexpr = \"let(a=geometricDistribution(.2),\" +\n        \"               b=geometricDistribution(.5),\" +\n        \"               c=geometricDistribution(.8),\" +\n        \"               d=sample(a, 10000),\" +\n        \"               e=sample(b, 10000),\" +\n        \"               f=sample(c, 10000),\" +\n        \"               g=freqTable(d),\" +\n        \"               h=freqTable(e),\" +\n        \"               i=freqTable(f),\" +\n        \"               tuple(g=g, h=h, i=i))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Map> listg = (List<Map>)tuples.get(0).get(\"g\");\n    Map mapg = listg.get(0);\n    double pctg = (double) mapg.get(\"pct\");\n    assertEquals(pctg, .2, .02);\n\n    List<Map> listh = (List<Map>)tuples.get(0).get(\"h\");\n    Map maph = listh.get(0);\n    double pcth = (double)maph.get(\"pct\");\n    assertEquals(pcth, .5, .02);\n\n    List<Map> listi = (List<Map>)tuples.get(0).get(\"i\");\n    Map mapi = listi.get(0);\n    double pcti = (double)mapi.get(\"pct\");\n    assertEquals(pcti, .8, .02);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}