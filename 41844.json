{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","commits":[{"id":"ef68eed598a8494abdcad4ef076d62b12c4d89f4","date":1289177911,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","sourceNew":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testElems2LevelEmpty().mjava","sourceNew":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testElems2LevelEmpty() {\n    String xml=\"<root>\\n\"\n             + \"\\t<a>\\n\"\n             + \"\\t   <b>\\n\\t  <x>x0</x>\\n\"\n             + \"\\t            <y>y0</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t   <b>\\n\\t  <x></x>\\n\"    // empty\n             + \"\\t            <y>y1</y>\\n\"\n             + \"\\t   </b>\\n\"\n             + \"\\t</a>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a\");\n    rr.addField(\"a\", \"/root/a/b/x\", true);\n    rr.addField(\"b\", \"/root/a/b/y\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    assertEquals(1, l.size());\n    assertEquals(\"x0\",((List) l.get(0).get(\"a\")).get(0));\n    assertEquals(\"y0\",((List) l.get(0).get(\"b\")).get(0));\n    assertEquals(\"\",((List) l.get(0).get(\"a\")).get(1));\n    assertEquals(\"y1\",((List) l.get(0).get(\"b\")).get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["ef68eed598a8494abdcad4ef076d62b12c4d89f4","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"c26f00b574427b55127e869b935845554afde1fa":["ef68eed598a8494abdcad4ef076d62b12c4d89f4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"ef68eed598a8494abdcad4ef076d62b12c4d89f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ef68eed598a8494abdcad4ef076d62b12c4d89f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}