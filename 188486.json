{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      InvertedFields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      InvertedFields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.size());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"0fa6955ed1b1007ded1349ab72cea4555640432f":["322360ac5185a8446d3e0b530b2068bef67cd3d5","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["0fa6955ed1b1007ded1349ab72cea4555640432f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0fa6955ed1b1007ded1349ab72cea4555640432f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}