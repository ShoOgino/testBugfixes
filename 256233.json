{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b43cc463de57963524b3835202575c1662c9e927","date":1346784739,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aec642a2f63c39e7553a5bbb73f38e0f68237f5","date":1349277480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    if (randomState.nextInt(500) == 0) {\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1e8b3369cb0169630bfadbcf2d16a26260bc967","date":1349304984,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    if (randomState.nextInt(500) == 0) {\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"536b153ad27e78a62ee327e1e127c370d191237e","date":1349392002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    if (randomState.nextInt(500) == 0) {\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9773480aa9e800d0a232ab6ccac265e874b0c51","date":1349461188,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30e0912f3a3069b115cfea44ff612c44d6906386","date":1365631344,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen();\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bac2bd9d901ec1ee7111a77c8e616d745fb2a362","date":1368131212,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen();\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + delegate) : new NoSuchFileException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":["4356000e349e38c9fb48034695b7c309abd54557"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399ef3ff6c22f0627c82ac65f32726f3587a2aa1","date":1379005174,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + delegate) : new NoSuchFileException(name + \" in dir=\" + delegate);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = delegate.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":["2a186ae8733084223c22044e935e4ef848a143d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b346c75aa26766db314a531e6e7dd87a3a19a2a","date":1395629273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12320451a8cf581593c5eca6d2db98d299d693c7","date":1398969355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5e561b4438c227a4d8960523d49ce735652ae66","date":1470733409,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for output.\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name)) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d203e5c4d54b6f6e78e98d2342905df37f816f6","date":1532511271,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for output.\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name)) {\n      throw fillOpenTrace(new AccessDeniedException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeThrowDeterministicException();\n    maybeThrowIOExceptionOnOpen(name);\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n    }\n\n    // cannot open a file for input if it's still open for output.\n    if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.contains(name)) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput delegateInput = in.openInput(name, LuceneTestCase.newIOContext(randomState, context));\n\n    final IndexInput ii;\n    int randomInt = randomState.nextInt(500);\n    if (useSlowOpenClosers && randomInt == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowClosingMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowClosingMockIndexInputWrapper(this, name, delegateInput);\n    } else if (useSlowOpenClosers && randomInt  == 1) { \n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: using SlowOpeningMockIndexInputWrapper for file \" + name);\n      }\n      ii = new SlowOpeningMockIndexInputWrapper(this, name, delegateInput);\n    } else {\n      ii = new MockIndexInputWrapper(this, name, delegateInput, null);\n    }\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"527cc14542789f47d75da436cb4287d1ab887e34":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"d9773480aa9e800d0a232ab6ccac265e874b0c51":["536b153ad27e78a62ee327e1e127c370d191237e"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"a5e561b4438c227a4d8960523d49ce735652ae66":["12320451a8cf581593c5eca6d2db98d299d693c7"],"bac2bd9d901ec1ee7111a77c8e616d745fb2a362":["30e0912f3a3069b115cfea44ff612c44d6906386"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["12320451a8cf581593c5eca6d2db98d299d693c7","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"9aec642a2f63c39e7553a5bbb73f38e0f68237f5":["b43cc463de57963524b3835202575c1662c9e927"],"12320451a8cf581593c5eca6d2db98d299d693c7":["9b346c75aa26766db314a531e6e7dd87a3a19a2a"],"b43cc463de57963524b3835202575c1662c9e927":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["12320451a8cf581593c5eca6d2db98d299d693c7","a5e561b4438c227a4d8960523d49ce735652ae66"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["b43cc463de57963524b3835202575c1662c9e927","9aec642a2f63c39e7553a5bbb73f38e0f68237f5"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["bac2bd9d901ec1ee7111a77c8e616d745fb2a362"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9b346c75aa26766db314a531e6e7dd87a3a19a2a":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30e0912f3a3069b115cfea44ff612c44d6906386":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["12320451a8cf581593c5eca6d2db98d299d693c7","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"],"536b153ad27e78a62ee327e1e127c370d191237e":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"]},"commit2Childs":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"527cc14542789f47d75da436cb4287d1ab887e34":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"d9773480aa9e800d0a232ab6ccac265e874b0c51":["30e0912f3a3069b115cfea44ff612c44d6906386"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["9b346c75aa26766db314a531e6e7dd87a3a19a2a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["527cc14542789f47d75da436cb4287d1ab887e34"],"a5e561b4438c227a4d8960523d49ce735652ae66":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"bac2bd9d901ec1ee7111a77c8e616d745fb2a362":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9aec642a2f63c39e7553a5bbb73f38e0f68237f5":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"12320451a8cf581593c5eca6d2db98d299d693c7":["a5e561b4438c227a4d8960523d49ce735652ae66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f3adea0022cffaaa592081efed775a7b8bf86b51","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b43cc463de57963524b3835202575c1662c9e927":["9aec642a2f63c39e7553a5bbb73f38e0f68237f5","e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["536b153ad27e78a62ee327e1e127c370d191237e"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b43cc463de57963524b3835202575c1662c9e927"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9b346c75aa26766db314a531e6e7dd87a3a19a2a":["12320451a8cf581593c5eca6d2db98d299d693c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30e0912f3a3069b115cfea44ff612c44d6906386":["bac2bd9d901ec1ee7111a77c8e616d745fb2a362"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"536b153ad27e78a62ee327e1e127c370d191237e":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}