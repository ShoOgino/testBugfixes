{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.shutdown();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.shutdown();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.shutdown();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.shutdown();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["1d028314cced5858683a1bb4741423d0f934257b"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","4cc45c615dbb82bf79d5f9550286098367874fbf"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}