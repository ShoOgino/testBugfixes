{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask#findIndexCommit(Directory,String).mjava","sourceNew":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","sourceOld":"  public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit ic : commits) {\n      Map<String,String> map = ic.getUserData();\n      String ud = null;\n      if (map != null) {\n        ud = map.get(USER_DATA);\n      }\n      if (ud != null && ud.equals(userData)) {\n        return ic;\n      }\n    }\n\n    throw new IOException(\"index does not contain commit with userData: \" + userData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ca474b88b90218279fc4b893727bcefbb1f725":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","34ca474b88b90218279fc4b893727bcefbb1f725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","34ca474b88b90218279fc4b893727bcefbb1f725","868da859b43505d9d2a023bfeae6dd0c795f5295","5cab9a86bd67202d20b6adc463008c8e982b070a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}