{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#crossesTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#crossesTriangle(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if (orient(dx, dy, ex, ey, ax, ay) * orient(dx, dy, ex, ey, bx, by) <= 0 &&\n              orient(ax, ay, bx, by, dx, dy) * orient(ax, ay, bx, by, ex, ey) <= 0) {\n            return true;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if (orient(dx, dy, ex, ey, bx, by) * orient(dx, dy, ex, ey, cx, cy) <= 0 &&\n              orient(bx, by, cx, cy, dx, dy) * orient(bx, by, cx, cy, ex, ey) <= 0) {\n            return true;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if (orient(dx, dy, ex, ey, cx, cy) * orient(dx, dy, ex, ey, ax, ay) <= 0 &&\n              orient(cx, cy, ax, ay, dx, dy) * orient(cx, cy, ax, ay, ex, ey) <= 0) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#crossesTriangle(double,double,double,double,double,double).mjava","sourceNew":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if (lineCrossesLine(ax, ay, bx, by, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if (lineCrossesLine(bx, by, cx, cy, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if (lineCrossesLine(cx, cy, ax, ay, dx, dy, ex, ey)) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if (orient(dx, dy, ex, ey, ax, ay) * orient(dx, dy, ex, ey, bx, by) <= 0 &&\n              orient(ax, ay, bx, by, dx, dy) * orient(ax, ay, bx, by, ex, ey) <= 0) {\n            return true;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if (orient(dx, dy, ex, ey, bx, by) * orient(dx, dy, ex, ey, cx, cy) <= 0 &&\n              orient(bx, by, cx, cy, dx, dy) * orient(bx, by, cx, cy, ex, ey) <= 0) {\n            return true;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if (orient(dx, dy, ex, ey, cx, cy) * orient(dx, dy, ex, ey, ax, ay) <= 0 &&\n              orient(cx, cy, ax, ay, dx, dy) * orient(cx, cy, ax, ay, ex, ey) <= 0) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4312aa12218419d320e0966c3f3e72deb359afaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["4312aa12218419d320e0966c3f3e72deb359afaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4fccad460342b1af30cb328cc8297751a218d78"]},"commit2Childs":{"4312aa12218419d320e0966c3f3e72deb359afaa":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4312aa12218419d320e0966c3f3e72deb359afaa"],"e4fccad460342b1af30cb328cc8297751a218d78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}