{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,ExtendedFieldCache.DoubleParser).mjava","commits":[{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,ExtendedFieldCache.DoubleParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final ExtendedFieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = (parser==null)\n\t  ? ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field)\n\t  : ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,ExtendedFieldCache.DoubleParser).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final ExtendedFieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = (parser==null)\n\t  ? ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field)\n\t  : ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65eb076d345a794256daba691a2b366657c807e8":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65eb076d345a794256daba691a2b366657c807e8"]},"commit2Childs":{"65eb076d345a794256daba691a2b366657c807e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["65eb076d345a794256daba691a2b366657c807e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}