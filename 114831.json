{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb","date":1310269216,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n\n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int codeSkip = in.readVInt();\n            if ((codeSkip & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (omitTFAP) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int code = in.readVInt();\n            if ((code & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n\n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int codeSkip = in.readVInt();\n            if ((codeSkip & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["9c3cbbfae0960dc46f1483c96fbfb5ed938773bb"],"7b91922b55d15444d554721b352861d028eb8278":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","9c3cbbfae0960dc46f1483c96fbfb5ed938773bb","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}