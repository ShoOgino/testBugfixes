{"path":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link LeafReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static LeafReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof LeafReader;\n      return (LeafReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link LeafReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static LeafReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader, false);\n    } else {\n      assert reader instanceof LeafReader;\n      return (LeafReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link LeafReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static LeafReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof LeafReader;\n      return (LeafReader) reader;\n    }\n  }\n\n","bugFix":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link LeafReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static LeafReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader, false);\n    } else {\n      assert reader instanceof LeafReader;\n      return (LeafReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link LeafReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static LeafReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader, false);\n    } else {\n      assert reader instanceof LeafReader;\n      return (LeafReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}