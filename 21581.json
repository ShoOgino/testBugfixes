{"path":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","commits":[{"id":"6a62f51fc98f22545b2c8453da582a2d8222a756","date":1287705676,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a62f51fc98f22545b2c8453da582a2d8222a756"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a62f51fc98f22545b2c8453da582a2d8222a756"],"6a62f51fc98f22545b2c8453da582a2d8222a756":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["6a62f51fc98f22545b2c8453da582a2d8222a756"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6a62f51fc98f22545b2c8453da582a2d8222a756"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"6a62f51fc98f22545b2c8453da582a2d8222a756":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}