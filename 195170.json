{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random(), new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random().nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random()));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random()));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random(), new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random().nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random()));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random()));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random(), new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random().nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random()));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random()));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random(), new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random().nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random()));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random()));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random(), new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random().nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random()));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random()));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}