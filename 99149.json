{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (writePayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (writePayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (writePayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (writePayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (writePayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}