{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singletonMap(coll, newState));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singletonMap(coll, newState));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: \", e);\n      } catch (KeeperException e) {\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n        synchronized (getUpdateLock()) {\n          constructState(Collections.singleton(coll));\n        }\n\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}