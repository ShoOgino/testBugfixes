{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa20a3abac513546891f11898093eaf5828f7ab","date":1360558555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                      iterator = null;\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d2492fad2d2bcdbd1cac282841db19b7cc6b9ca","date":1360558733,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                     // nocommit: nulling is a hack to prevent calling next() after NO_MORE was already returned...\n                      iterator = null;\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                      iterator = null;\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988e3f44fe797ee94a0135abfe27e5872b99844d","date":1360563792,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        OrdIterator iterator = null;\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            iterator = dv.getOrds(i, iterator);\n            long ord;\n            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    nextValue = 0;\n                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              OrdIterator iterator;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (iterator != null) {\n                    final long segmentOrd = iterator.nextOrd();\n                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {\n                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);\n                      nextIsSet = true;\n                      return true;\n                    } else {\n                     // nocommit: nulling is a hack to prevent calling next() after NO_MORE was already returned...\n                      iterator = null;\n                      docIDUpto++;\n                    }\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    iterator = null;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ad8f8dd7b201036b715d4896eecb7db22aea32","date":1360887949,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        // nocommit: need a \"pagedbits\"\n        if (dv.getValueCount() > Integer.MAX_VALUE) {\n          throw new UnsupportedOperationException();\n        }\n        FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set((int)ord); // nocommit\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e129598ae448211d969dd7cdf2ad4558a0658a1","date":1362963550,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e6baad25b7155a116cb0126b4e2a06b945a5c5","date":1362976847,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6","date":1363054647,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = new SortedSetDocValuesTermsEnum(dv);\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(new SortedSetDocValuesTermsEnum(dv), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"418e93579786b1123bf5708692d809826ea239c0","date":1383035702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getSegmentNumber(currentOrd);\n                long segmentOrd = map.getSegmentOrd(segmentNumber, currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        OpenBitSet bitset = new OpenBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              final BytesRef scratch = new BytesRef();\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                dvs[segmentNumber].lookupOrd(segmentOrd, scratch);\n                currentOrd++;\n                return scratch;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","date":1402950824,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","date":1402998114,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bcfd864fb8b916f7d21f2579d2010a31892055d","date":1403359094,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = new OrdinalMap(this, liveTerms);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      LeafReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      AtomicReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      LeafReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    \n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      LeafReader reader = readers[sub];\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = reader.getLiveDocs();\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < reader.maxDoc(); i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                      currentMap = map.getGlobalOrds(readerUpto);\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n                  nextValue = 0;\n                  while (sub.values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                    nextValue++;\n                  }\n                  //System.out.println(\"  doc \" + sub + \" -> ord count = \" + nextValue);\n                  nextIsSet = true;\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedSetDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i], map.getGlobalOrds(i)));\n            }\n\n            final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  SortedSetDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  sub.values.setDocument(sub.docID);\n\n                  ordUpto = ordLength = 0;\n                  long ord;\n                  while ((ord = sub.values.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                    if (ordLength == ords.length) {\n                      ords = ArrayUtil.grow(ords, ordLength+1);\n                    }\n                    ords[ordLength] = sub.map.get(ord);\n                    ordLength++;\n                  }\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState,List[SortedSetDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedSetDocValues> toMerge) throws IOException {\n    final SortedSetDocValues dvs[] = toMerge.toArray(new SortedSetDocValues[toMerge.size()]);\n    final int numReaders = mergeState.maxDocs.length;\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[dvs.length];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = dvs[sub];\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        for (int i = 0; i < maxDoc; i++) {\n          if (liveDocs.get(i)) {\n            dv.setDocument(i);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(fieldInfo,\n        // ord -> value\n        new Iterable<BytesRef>() {\n          @Override\n          public Iterator<BytesRef> iterator() {\n            return new Iterator<BytesRef>() {\n              long currentOrd;\n\n              @Override\n              public boolean hasNext() {\n                return currentOrd < map.getValueCount();\n              }\n\n              @Override\n              public BytesRef next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                int segmentNumber = map.getFirstSegmentNumber(currentOrd);\n                long segmentOrd = map.getFirstSegmentOrd(currentOrd);\n                final BytesRef term = dvs[segmentNumber].lookupOrd(segmentOrd);\n                currentOrd++;\n                return term;\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        },\n        // doc -> ord count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = 0;\n                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n                      nextValue++;\n                    }\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // ords\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              LongValues currentMap;\n              boolean nextIsSet;\n              long ords[] = new long[8];\n              int ordUpto;\n              int ordLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                // TODO make a mutable number\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (ordUpto < ordLength) {\n                    nextValue = ords[ordUpto];\n                    ordUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentMap = map.getGlobalOrds(readerUpto);\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedSetDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    ordUpto = ordLength = 0;\n                    long ord;\n                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                      if (ordLength == ords.length) {\n                        ords = ArrayUtil.grow(ords, ordLength+1);\n                      }\n                      ords[ordLength] = currentMap.get(ord);\n                      ordLength++;\n                    }\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ad8f8dd7b201036b715d4896eecb7db22aea32":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"0ad30c6a479e764150a3316e57263319775f1df2":["9bb9a29a5e71a90295f175df8919802993142c9a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60ad8f8dd7b201036b715d4896eecb7db22aea32"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["5bcfd864fb8b916f7d21f2579d2010a31892055d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9bb9a29a5e71a90295f175df8919802993142c9a","0ad30c6a479e764150a3316e57263319775f1df2"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"3d2492fad2d2bcdbd1cac282841db19b7cc6b9ca":["3fa20a3abac513546891f11898093eaf5828f7ab"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"3995f83351082af8ae83bb017e63c56818fc1568":["418e93579786b1123bf5708692d809826ea239c0"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["3d2492fad2d2bcdbd1cac282841db19b7cc6b9ca"],"3fa20a3abac513546891f11898093eaf5828f7ab":["f366ce28775e2b8ea4e06355009471328711666d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["3995f83351082af8ae83bb017e63c56818fc1568"],"418e93579786b1123bf5708692d809826ea239c0":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["9bb9a29a5e71a90295f175df8919802993142c9a"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9bb9a29a5e71a90295f175df8919802993142c9a","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"5bcfd864fb8b916f7d21f2579d2010a31892055d":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"60ad8f8dd7b201036b715d4896eecb7db22aea32":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3d2492fad2d2bcdbd1cac282841db19b7cc6b9ca":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"f366ce28775e2b8ea4e06355009471328711666d":["3fa20a3abac513546891f11898093eaf5828f7ab"],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","5bcfd864fb8b916f7d21f2579d2010a31892055d"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["60ad8f8dd7b201036b715d4896eecb7db22aea32"],"3995f83351082af8ae83bb017e63c56818fc1568":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"3fa20a3abac513546891f11898093eaf5828f7ab":["3d2492fad2d2bcdbd1cac282841db19b7cc6b9ca"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","f6d0aee18c1653f7ee634fa8830abdb001dcfe1b"],"418e93579786b1123bf5708692d809826ea239c0":["3995f83351082af8ae83bb017e63c56818fc1568"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":[],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["418e93579786b1123bf5708692d809826ea239c0"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"5bcfd864fb8b916f7d21f2579d2010a31892055d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}