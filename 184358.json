{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/Ords41PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                state.fieldInfos,\n                                                                state.segmentInfo,\n                                                                state.context,\n                                                                state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                   state.fieldInfos,\n                                                                   state.segmentInfo,\n                                                                   state.context,\n                                                                   state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new OrdsBlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                state.fieldInfos,\n                                                                state.segmentInfo,\n                                                                state.context,\n                                                                state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                state.fieldInfos,\n                                                                state.segmentInfo,\n                                                                state.context,\n                                                                state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/Ords41PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                state.fieldInfos,\n                                                                state.segmentInfo,\n                                                                state.context,\n                                                                state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                   state.fieldInfos,\n                                                                   state.segmentInfo,\n                                                                   state.context,\n                                                                   state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new OrdsBlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new Lucene41PostingsReader(state.directory,\n                                                                state.fieldInfos,\n                                                                state.segmentInfo,\n                                                                state.context,\n                                                                state.segmentSuffix);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postingsReader, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}