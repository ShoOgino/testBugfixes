{"path":"solr/solrj/src/java/org/noggit/JSONParser#next(int).mjava","commits":[{"id":"980f4ef5a16664be88d82c37e6af5c49a3d57c9c","date":1557969027,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/noggit/JSONParser#next(int).mjava","pathOld":"/dev/null","sourceNew":"  /*** alternate implementation\n   // middle is the pointer to the middle of a buffer to start scanning for a non-string\n   // character ('\"' or \"/\").  start<=middle<end\n   private void readStringChars2a(CharArr arr, int middle) throws IOException {\n   int ch=0;\n   for(;;) {\n   // find the next non-string char\n   for (; middle<end; middle++) {\n   ch = buf[middle];\n   if (ch=='\"' || ch=='\\\\') break;\n   }\n\n   arr.write(buf,start,middle-start);\n   if (middle>=end) {\n   getMore();\n   middle=start;\n   } else {\n   start = middle+1;   // set buffer pointer to correct spot\n   if (ch=='\"') {\n   valstate=0;\n   return;\n   } else if (ch=='\\\\') {\n   arr.write(readEscapedChar());\n   if (start>=end) getMore();\n   middle=start;\n   }\n   }\n   }\n   }\n   ***/\n\n\n  // return the next event when parser is in a neutral state (no\n  // map separators or array element separators to read\n  private int next(int ch) throws IOException {\n    // TODO: try my own form of indirect jump... look up char class and index directly into handling implementation?\n    for (; ; ) {\n      switch (ch) {\n        case ' ': // this is not the exclusive list of whitespace chars... the rest are handled in default:\n        case '\\t':\n        case '\\r':\n        case '\\n':\n          ch = getCharNWS(); // calling getCharNWS here seems faster than letting the switch handle it\n          break;\n        case '\"':\n          stringTerm = '\"';\n          valstate = STRING;\n          return STRING;\n        case '\\'':\n          if ((flags & ALLOW_SINGLE_QUOTES) == 0) {\n            throw err(\"Single quoted strings not allowed\");\n          }\n          stringTerm = '\\'';\n          valstate = STRING;\n          return STRING;\n        case '{':\n          push();\n          state = DID_OBJSTART;\n          return OBJECT_START;\n        case '[':\n          push();\n          state = DID_ARRSTART;\n          return ARRAY_START;\n        case '0':\n          out.reset();\n          //special case '0'?  If next char isn't '.' val=0\n          ch = getChar();\n          if (ch == '.') {\n            start--;\n            ch = '0';\n            readNumber('0', false);\n            return valstate;\n          } else if (ch > '9' || ch < '0') {\n            out.unsafeWrite('0');\n            if (ch != -1) start--;\n            lval = 0;\n            valstate = LONG;\n            return LONG;\n          } else {\n            throw err(\"Leading zeros not allowed\");\n          }\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          out.reset();\n          lval = readNumber(ch, false);\n          return valstate;\n        case '-':\n          out.reset();\n          out.unsafeWrite('-');\n          ch = getChar();\n          if (ch < '0' || ch > '9') throw err(\"expected digit after '-'\");\n          lval = readNumber(ch, true);\n          return valstate;\n        case 't':\n          // TODO: test performance of this non-branching inline version.\n          // if ((('r'-getChar())|('u'-getChar())|('e'-getChar())) != 0) throw err(\"\");\n          if (matchBareWord(JSONUtil.TRUE_CHARS)) {\n            bool = true;\n            valstate = BOOLEAN;\n            return valstate;\n          } else {\n            valstate = STRING;\n            return STRING;\n          }\n        case 'f':\n          if (matchBareWord(JSONUtil.FALSE_CHARS)) {\n            bool = false;\n            valstate = BOOLEAN;\n            return valstate;\n          } else {\n            valstate = STRING;\n            return STRING;\n          }\n        case 'n':\n          if (matchBareWord(JSONUtil.NULL_CHARS)) {\n            valstate = NULL;\n            return valstate;\n          } else {\n            valstate = STRING;\n            return STRING;\n          }\n        case '/':\n          getSlashComment();\n          ch = getChar();\n          break;\n        case '#':\n          getNewlineComment();\n          ch = getChar();\n          break;\n        case ']':  // This only happens with a trailing comma (or an error)\n          if (state != DID_ARRELEM || (flags & ALLOW_EXTRA_COMMAS) == 0) {\n            throw err(\"Unexpected array closer ]\");\n          }\n          pop();\n          return event = ARRAY_END;\n        case '}':  // This only happens with a trailing comma (or an error)\n          if (state != DID_MEMVAL || (flags & ALLOW_EXTRA_COMMAS) == 0) {\n            throw err(\"Unexpected object closer }\");\n          }\n          pop();\n          return event = ARRAY_END;\n        case ',': // This only happens with input like [1,]\n          if ((state != DID_ARRELEM && state != DID_MEMVAL) || (flags & ALLOW_EXTRA_COMMAS) == 0) {\n            throw err(\"Unexpected comma\");\n          }\n          ch = getChar();\n          break;\n        case -1:\n          if (getLevel() > 0) throw err(\"Premature EOF\");\n          return EOF;\n        default:\n          // Handle unusual unicode whitespace like no-break space (0xA0)\n          if (isWhitespace(ch)) {\n            ch = getChar();  // getCharNWS() would also work\n            break;\n          }\n          handleNonDoubleQuoteString(ch, false);\n          valstate = STRING;\n          return STRING;\n        // throw err(null);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"]},"commit2Childs":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}