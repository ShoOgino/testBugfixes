{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","commits":[{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[BLOCK_MASK] - pending[0]) / BLOCK_MASK;\n\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[BLOCK_MASK] - pending[0]) / BLOCK_MASK;\n\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[pending.length - 1] - pending[0]) / (pending.length - 1);\n\n    for (int i = 0; i < pending.length; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pending.length; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[BLOCK_MASK] - pending[0]) / BLOCK_MASK;\n\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < MAX_PENDING_COUNT; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      deltas[valuesOff] = new  PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[pending.length - 1] - pending[0]) / (pending.length - 1);\n\n    for (int i = 0; i < pending.length; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pending.length; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      deltas[valuesOff] = new  PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = (float) (pending[pending.length - 1] - pending[0]) / (pending.length - 1);\n\n    for (int i = 0; i < pending.length; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pending.length; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta != 0) {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      deltas[valuesOff] = new  PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      deltas[valuesOff] = new  PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    minValues[valuesOff] = pending[0];\n    averages[valuesOff] = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = zigZagEncode(pending[i] - minValues[valuesOff] - (long) (averages[valuesOff] * (long) i));\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = PackedInts.unsignedBitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = PackedInts.unsignedBitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#packPendingValues().mjava","sourceNew":null,"sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff > 0;\n    final float average = pendingOff == 1 ? 0 : (float) (pending[pendingOff - 1] - pending[0]) / (pendingOff - 1);\n    long minValue = pending[0];\n    // adjust minValue so that all deltas will be positive\n    for (int i = 1; i < pendingOff; ++i) {\n      final long actual = pending[i];\n      final long expected = expected(minValue, average, i);\n      if (expected > actual) {\n        minValue -= (expected - actual);\n      }\n    }\n\n    minValues[valuesOff] = minValue;\n    averages[valuesOff] = average;\n\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] = pending[i] - expected(minValue, average, i);\n    }\n    long maxDelta = 0;\n    for (int i = 0; i < pendingOff; ++i) {\n      if (pending[i] < 0) {\n        maxDelta = -1;\n        break;\n      } else {\n        maxDelta = Math.max(maxDelta, pending[i]);\n      }\n    }\n    if (maxDelta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      final int bitsRequired = PackedInts.unsignedBitsRequired(maxDelta);\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["22344cc5c695683a5a6cecff291f840d71c20d25"],"db1893644d5f20456c9524b28e826293d767db65":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["db1893644d5f20456c9524b28e826293d767db65"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["22344cc5c695683a5a6cecff291f840d71c20d25","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae3be3418aea9954be27a83315087f67c0c2201e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["db1893644d5f20456c9524b28e826293d767db65","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ae3be3418aea9954be27a83315087f67c0c2201e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"db1893644d5f20456c9524b28e826293d767db65":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["db1893644d5f20456c9524b28e826293d767db65"],"22344cc5c695683a5a6cecff291f840d71c20d25":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}