{"path":"backwards/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestRank(String,FieldScoreQuery.Type).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestRank(String,FieldScoreQuery.Type).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestRank(String,FieldScoreQuery.Type).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestRank(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}