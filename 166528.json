{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char text[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char ch = text[i];\n        if (ch >= 0xFF01 && ch <= 0xFF5E) {\n          // Fullwidth ASCII variants\n          text[i] -= 0xFEE0;\n        } else if (ch >= 0xFF65 && ch <= 0xFF9F) {\n          // Halfwidth Katakana variants\n          if ((ch == 0xFF9E || ch == 0xFF9F) && i > 0 && combine(text, i, ch)) {\n            length = StemmerUtil.delete(text, i--, length);\n          } else {\n            text[i] = KANA_NORM[ch - 0xFF65];\n          }\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}