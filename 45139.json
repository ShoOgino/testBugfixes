{"path":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd205b3154cb1bec7fc9675ba26cb4397ff03a2a","date":1415953853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"There must be at least 1 sort field\");\n    }\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"There must be at least 1 sort field\");\n    }\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"There must be at least 1 sort field\");\n    }\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"There must be at least 1 sort field\");\n    }\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Sort#setSort(SortField...).mjava","sourceNew":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"There must be at least 1 sort field\");\n    }\n    this.fields = fields;\n  }\n\n","sourceOld":"  /** Sets the sort to the given criteria in succession: the\n   *  first SortField is checked first, but if it produces a\n   *  tie, then the second SortField is used to break the tie,\n   *  etc.  Finally, if there is still a tie after all SortFields\n   *  are checked, the internal Lucene docid is used to break it. */\n  public void setSort(SortField... fields) {\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"dd205b3154cb1bec7fc9675ba26cb4397ff03a2a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd205b3154cb1bec7fc9675ba26cb4397ff03a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"dd205b3154cb1bec7fc9675ba26cb4397ff03a2a":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}