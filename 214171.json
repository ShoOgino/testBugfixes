{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    //FIXME: Change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    //FIXME: Change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    //FIXME: Change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    //FIXME: Change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(QueryParserWrapper.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParserWrapper.OR_OPERATOR);\n    assertEquals(QueryParserWrapper.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c7f8e68717c68517265937c911e1ce9f25750247"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7f8e68717c68517265937c911e1ce9f25750247":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}