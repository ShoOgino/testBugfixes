{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeHttpMethod(HttpClient,String,InputStreamConsumer[T],HttpRequestBase).mjava","commits":[{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":0,"author":"Marcus","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeHttpMethod(HttpClient,String,InputStreamConsumer[T],HttpRequestBase).mjava","pathOld":"/dev/null","sourceNew":"  public static <T> T executeHttpMethod(HttpClient client, String url, InputStreamConsumer<T> consumer, HttpRequestBase httpMethod) {\n    T result = null;\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpMethod);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeHttpMethod(HttpClient,String,InputStreamConsumer[T],HttpRequestBase).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeHttpMethod(HttpClient,String,InputStreamConsumer[T],HttpRequestBase).mjava","sourceNew":"  public static <T> T executeHttpMethod(HttpClient client, String url, InputStreamConsumer<T> consumer, HttpRequestBase httpMethod) {\n    T result = null;\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpMethod);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // nowarn\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":"  public static <T> T executeHttpMethod(HttpClient client, String url, InputStreamConsumer<T> consumer, HttpRequestBase httpMethod) {\n    T result = null;\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpMethod);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}