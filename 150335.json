{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","commits":[{"id":"b1ce302c8330eae47fb0d4ab045c8a7d708e5585","date":1407490641,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator(null);\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccb767b71a2649cb561f38e3bf0bd8909e6aeda7","date":1407505449,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","sourceNew":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException in case accessing the underlying index fails\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator(null);\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","sourceOld":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator(null);\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","sourceNew":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException in case accessing the underlying index fails\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator();\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","sourceOld":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException in case accessing the underlying index fails\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator(null);\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils#toDenseLocalFreqDoubleArray(Terms).mjava","sourceNew":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   *\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException in case accessing the underlying index fails\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n      freqVector = new Double[(int) docTerms.size()];\n      int i = 0;\n      TermsEnum docTermsEnum = docTerms.iterator();\n\n      while (docTermsEnum.next() != null) {\n        long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n        freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n        i++;\n      }\n    }\n    return freqVector;\n  }\n\n","sourceOld":"  /**\n   * create a dense <code>Double</code> vector given doc and field term vectors using local frequency of the terms in the doc\n   * @param docTerms term vectors for a given document\n   * @return a dense vector of <code>Double</code>s as an array\n   * @throws IOException in case accessing the underlying index fails\n   */\n  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {\n    Double[] freqVector = null;\n    if (docTerms != null) {\n        freqVector = new Double[(int) docTerms.size()];\n        int i = 0;\n        TermsEnum docTermsEnum = docTerms.iterator();\n\n        while (docTermsEnum.next() != null) {\n            long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document\n            freqVector[i] = Long.valueOf(termFreqLocal).doubleValue();\n            i++;\n        }\n    }\n    return freqVector;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["ccb767b71a2649cb561f38e3bf0bd8909e6aeda7"],"b1ce302c8330eae47fb0d4ab045c8a7d708e5585":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccb767b71a2649cb561f38e3bf0bd8909e6aeda7":["b1ce302c8330eae47fb0d4ab045c8a7d708e5585"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"b1ce302c8330eae47fb0d4ab045c8a7d708e5585":["ccb767b71a2649cb561f38e3bf0bd8909e6aeda7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1ce302c8330eae47fb0d4ab045c8a7d708e5585"],"ccb767b71a2649cb561f38e3bf0bd8909e6aeda7":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}