{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", DefaultFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, DefaultFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < DefaultFieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, DefaultFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= DefaultFieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & DefaultFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & DefaultFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & DefaultFieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & DefaultFieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & DefaultFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & DefaultFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & DefaultFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & DefaultFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= DefaultFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        ValueType docValuesType = null;\n        if (format <= DefaultFieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = ValueType.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = ValueType.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = ValueType.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = ValueType.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = ValueType.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = ValueType.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = ValueType.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = ValueType.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = ValueType.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = ValueType.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = ValueType.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        ValueType docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = ValueType.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = ValueType.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = ValueType.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = ValueType.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = ValueType.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = ValueType.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = ValueType.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = ValueType.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = ValueType.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = ValueType.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = ValueType.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", DefaultFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, DefaultFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < DefaultFieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, DefaultFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= DefaultFieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & DefaultFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & DefaultFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & DefaultFieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & DefaultFieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & DefaultFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & DefaultFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & DefaultFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & DefaultFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= DefaultFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        ValueType docValuesType = null;\n        if (format <= DefaultFieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = ValueType.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = ValueType.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = ValueType.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = ValueType.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = ValueType.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = ValueType.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = ValueType.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = ValueType.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = ValueType.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = ValueType.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = ValueType.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}