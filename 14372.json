{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","commits":[{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = ((NamedList) response.getResponse().get(\"success\")).getName(0);\n    String corename = (String) ((NamedList) ((NamedList) response.getResponse().get(\"success\")).getVal(0)).get(\"core\");\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      Map m = status.getResponse().asMap(5);\n      assertEquals(collectionName, Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"collection\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"shard\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"replica\")));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = ((NamedList) response.getResponse().get(\"success\")).getName(0);\n    String corename = (String) ((NamedList) ((NamedList) response.getResponse().get(\"success\")).getVal(0)).get(\"core\");\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      Map m = status.getResponse().asMap(5);\n      assertEquals(collectionName, Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"collection\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"shard\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"replica\")));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = ((NamedList) response.getResponse().get(\"success\")).getName(0);\n    String corename = (String) response.getResponse()._get(asList(\"success\", nodeName,\"core\"),null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      NamedList m = status.getResponse();\n      assertEquals(collectionName, m._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(m._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(m._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = ((NamedList) response.getResponse().get(\"success\")).getName(0);\n    String corename = (String) ((NamedList) ((NamedList) response.getResponse().get(\"success\")).getVal(0)).get(\"core\");\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      Map m = status.getResponse().asMap(5);\n      assertEquals(collectionName, Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"collection\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"shard\")));\n      assertNotNull(Utils.getObjectByPath(m, true, Arrays.asList(\"status\", corename, \"cloud\", \"replica\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = (String) response._get(\"success[0]/key\", null);\n    String corename = (String) response._get(asList(\"success\", nodeName, \"core\"), null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = ((NamedList) response.getResponse().get(\"success\")).getName(0);\n    String corename = (String) response.getResponse()._get(asList(\"success\", nodeName,\"core\"),null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      NamedList m = status.getResponse();\n      assertEquals(collectionName, m._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(m._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(m._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    String nodeName = (String) response._get(\"success[0]/key\", null);\n    String corename = (String) response._get(asList(\"success\", nodeName, \"core\"), null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    String nodeName = (String) response._get(\"success[0]/key\", null);\n    String corename = (String) response._get(asList(\"success\", nodeName, \"core\"), null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCloudInfoInCoreStatus().mjava","sourceNew":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    String nodeName = (String) response._get(\"success[0]/key\", null);\n    String corename = (String) response._get(asList(\"success\", nodeName, \"core\"), null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudInfoInCoreStatus() throws IOException, SolrServerException {\n    String collectionName = \"corestatus_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    String nodeName = (String) response._get(\"success[0]/key\", null);\n    String corename = (String) response._get(asList(\"success\", nodeName, \"core\"), null);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(corename, coreclient);\n      assertEquals(collectionName, status._get(asList(\"status\", corename, \"cloud\", \"collection\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"shard\"), null));\n      assertNotNull(status._get(asList(\"status\", corename, \"cloud\", \"replica\"), null));\n    }\n  }\n\n","bugFix":["e021e73178a0be1b0ff15a0894796c23f0556144"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e021e73178a0be1b0ff15a0894796c23f0556144"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3167eae3325cf45449a75ab0468b53c0545606a3"],"e021e73178a0be1b0ff15a0894796c23f0556144":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["e021e73178a0be1b0ff15a0894796c23f0556144"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167eae3325cf45449a75ab0468b53c0545606a3":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e021e73178a0be1b0ff15a0894796c23f0556144":["e9017cf144952056066919f1ebc7897ff9bd71b1","536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["3167eae3325cf45449a75ab0468b53c0545606a3"],"3167eae3325cf45449a75ab0468b53c0545606a3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}