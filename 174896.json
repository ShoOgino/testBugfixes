{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        MockRAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        MockRAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        MockRAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory(random);\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        MockRAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory(random);\n        ramDirectory2=newDirectory(random);\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        MockRAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        MockRAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory(random);\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory(random);\n        ramDirectory2=newDirectory(random);\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        MockRAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory(random);\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        MockRAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory(random);\n        ramDirectory2=newDirectory(random);\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory();\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory();\n        ramDirectory2=newDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory(random);\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory(random);\n        ramDirectory2=newDirectory(random);\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory();\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory();\n        ramDirectory2=newDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":null,"sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory();\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory();\n        ramDirectory2=newDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":null,"sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory();\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory();\n        ramDirectory2=newDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":null,"sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        Directory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=newDirectory();\n        \n        // First put the documents in the same index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        Directory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=newDirectory();\n        ramDirectory2=newDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(random, ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(random, ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1f653cfcf159baeaafe5d01682a911e95bba4012","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}