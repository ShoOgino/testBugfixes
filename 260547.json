{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","sourceNew":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return refill();\n    }\n\n","sourceOld":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return refill();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2a54c721be6a1ed8a89b32d9bb8fef603133770","date":1327399247,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","sourceNew":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return doc = refill();\n    }\n\n","sourceOld":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return refill();\n    }\n\n","bugFix":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","sourceNew":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return doc = refill();\n    }\n\n","sourceOld":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return refill();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","sourceNew":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return doc = refill();\n    }\n\n","sourceOld":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return refill();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.LiveDocsSegmentDocsEnum#linearScan(int).mjava","sourceNew":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return doc = refill();\n    }\n\n","sourceOld":"    @Override\n    protected final int linearScan(int scanTo) throws IOException {\n      final int[] docs = this.docs;\n      final int upTo = count;\n      final Bits liveDocs = this.liveDocs;\n      for (int i = start; i < upTo; i++) {\n        int d = docs[i];\n        if (scanTo <= d && liveDocs.get(d)) {\n          start = i;\n          freq = freqs[i];\n          return doc = docs[i];\n        }\n      }\n      return doc = refill();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2a54c721be6a1ed8a89b32d9bb8fef603133770":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","e2a54c721be6a1ed8a89b32d9bb8fef603133770"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e2a54c721be6a1ed8a89b32d9bb8fef603133770"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","e2a54c721be6a1ed8a89b32d9bb8fef603133770"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e2a54c721be6a1ed8a89b32d9bb8fef603133770":["0d22ac6a4146774c1bc8400160fc0b6150294e92","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e2a54c721be6a1ed8a89b32d9bb8fef603133770","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}