{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (lazyDescriptors.containsKey(coreName) || container.getTransientCacheHandler() == null)\n        return lazyDescriptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (lazyDescriptors.containsKey(coreName) || container.getTransientCacheHandler() == null)\n        return lazyDescriptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (dynamicDescriptors.containsKey(coreName))\n        return dynamicDescriptors.get(coreName);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (lazyDescriptors.containsKey(coreName) || container.getTransientCacheHandler() == null)\n        return lazyDescriptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (cores.containsKey(coreName))\n        return cores.get(coreName).getCoreDescriptor();\n      if (lazyDescriptors.containsKey(coreName) || container.getTransientCacheHandler() == null)\n        return lazyDescriptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreDescriptor(String).mjava","sourceNew":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the CoreDescriptor corresponding to a given core name.\n   * Blocks if the SolrCore is still loading until it is ready.\n   * @param coreName the name of the core\n   * @return the CoreDescriptor\n   */\n  public CoreDescriptor getCoreDescriptor(String coreName) {\n    synchronized (modifyLock) {\n      if (residentDesciptors.containsKey(coreName))\n        return residentDesciptors.get(coreName);\n      return container.getTransientCacheHandler().getTransientDescriptor(coreName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["275019a81d0883a1db4560391b072d1fbe272ec4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["275019a81d0883a1db4560391b072d1fbe272ec4"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"275019a81d0883a1db4560391b072d1fbe272ec4":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","275019a81d0883a1db4560391b072d1fbe272ec4"],"275019a81d0883a1db4560391b072d1fbe272ec4":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}