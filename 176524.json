{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"febd00ace8921b742cf22d7679207562fa752b1f","date":1379617597,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81220b46d5c5e6263123603452e529484114fd01","date":1530284828,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\",\n        \"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = (StopFilterFactory) tokenFilterFactory(\"Stop\");\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"febd00ace8921b742cf22d7679207562fa752b1f":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"81220b46d5c5e6263123603452e529484114fd01":["febd00ace8921b742cf22d7679207562fa752b1f"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["febd00ace8921b742cf22d7679207562fa752b1f","81220b46d5c5e6263123603452e529484114fd01"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81220b46d5c5e6263123603452e529484114fd01"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["febd00ace8921b742cf22d7679207562fa752b1f","81220b46d5c5e6263123603452e529484114fd01"]},"commit2Childs":{"febd00ace8921b742cf22d7679207562fa752b1f":["81220b46d5c5e6263123603452e529484114fd01","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"81220b46d5c5e6263123603452e529484114fd01":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["febd00ace8921b742cf22d7679207562fa752b1f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e456307e9593d8518ec97cd724d8a7d3a109297b":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}