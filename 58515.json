{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public float coord(int overlap, int maxOverlap) {\n    // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n    // so coord() is not applied. But when BQ cannot optimize itself away\n    // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n    // important not to apply coord(1,1) for consistency, it might not be 1.0F\n    return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","sourceNew":"  public float coord(int overlap, int maxOverlap) {\n    if (overlap == 0) {\n      // special case that there are only non-scoring clauses\n      return 0F;\n    } else if (maxOverlap == 1) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return 1F;\n    } else {\n      // common case: use the similarity to compute the coord\n      return similarity.coord(overlap, maxOverlap);\n    }\n  }\n\n","sourceOld":"  public float coord(int overlap, int maxOverlap) {\n    // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n    // so coord() is not applied. But when BQ cannot optimize itself away\n    // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n    // important not to apply coord(1,1) for consistency, it might not be 1.0F\n    return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","sourceNew":null,"sourceOld":"  public float coord(int overlap, int maxOverlap) {\n    if (overlap == 0) {\n      // special case that there are only non-scoring clauses\n      return 0F;\n    } else if (maxOverlap == 1) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return 1F;\n    } else {\n      // common case: use the similarity to compute the coord\n      return similarity.coord(overlap, maxOverlap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#coord(int,int).mjava","sourceNew":null,"sourceOld":"  public float coord(int overlap, int maxOverlap) {\n    if (overlap == 0) {\n      // special case that there are only non-scoring clauses\n      return 0F;\n    } else if (maxOverlap == 1) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return 1F;\n    } else {\n      // common case: use the similarity to compute the coord\n      return similarity.coord(overlap, maxOverlap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["25f698887111a682424e759ba36083180899a1fd"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25f698887111a682424e759ba36083180899a1fd":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["25f698887111a682424e759ba36083180899a1fd","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}