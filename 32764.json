{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["51c34a3639838887e7997850b6be80f838a4d6f7"],"bugIntro":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8","date":1410170375,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["9274621789ce990dbfef455dabdf026bb3184821"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new FixedBitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new FixedBitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", 10, 20, true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, DocValuesRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"test\", 10, 20, true, true)), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", 10, 20, true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":null,"sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"test\", 10, 20, true, true)), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":null,"sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", 10, 20, true, true), false);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));\n      }\n      @Override\n      public String toString(String field) {\n        return \"cacheableFilter\";\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9274621789ce990dbfef455dabdf026bb3184821":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2713584a660051cd646423be682771e3bbd99985":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["2713584a660051cd646423be682771e3bbd99985"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["484e80062d7ab2729bc82f0311d6a97dd913961a","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"2713584a660051cd646423be682771e3bbd99985":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["9274621789ce990dbfef455dabdf026bb3184821","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}