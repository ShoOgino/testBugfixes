{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n    deleteFile(name, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8ec0889b27701f0ad90a25c95b75454e898cf3","date":1454871481,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n    createdFiles.remove(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n    createdFiles.remove(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d203e5c4d54b6f6e78e98d2342905df37f816f6","date":1532511271,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String).mjava","sourceNew":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n    createdFiles.remove(name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void deleteFile(String name) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    if (openFiles.containsKey(name)) {\n      openFilesDeleted.add(name);\n      if (assertNoDeleteOpenFile) {\n        throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      }\n    } else {\n      openFilesDeleted.remove(name);\n    }\n\n    unSyncedFiles.remove(name);\n    in.deleteFile(name);\n    createdFiles.remove(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["68496c2200e559fb7802f7575427b7a482659afb"],"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68496c2200e559fb7802f7575427b7a482659afb":["5a207d19eac354d649c3f0e2cce070017c78125e","4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"]},"commit2Childs":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["68496c2200e559fb7802f7575427b7a482659afb"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["68496c2200e559fb7802f7575427b7a482659afb"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68496c2200e559fb7802f7575427b7a482659afb":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}